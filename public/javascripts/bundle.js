(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";function makeSinkProxies(e){for(var r={},o=Object.keys(e),n=0;n<o.length;n++)r[o[n]]=new Rx.ReplaySubject(1);return r}function callDrivers(e,r){for(var o={},n=Object.keys(e),t=0;t<n.length;t++){var s=n[t];o[s]=e[s](r[s],s)}return o}function attachDisposeToSinks(e,r){return Object.defineProperty(e,"dispose",{value:function(){r.dispose()}})}function makeDisposeSources(e){return function(){for(var r=Object.keys(e),o=0;o<r.length;o++){var n=e[r[o]];"function"==typeof n.dispose&&n.dispose()}}}function attachDisposeToSources(e){return Object.defineProperty(e,"dispose",{value:makeDisposeSources(e)})}function replicateMany(e,r){return Rx.Observable.create(function(o){var n=new Rx.CompositeDisposable;return setTimeout(function(){for(var t=Object.keys(e),s=0;s<t.length;s++){var i=t[s];r.hasOwnProperty(i)&&!r[i].isDisposed&&n.add(e[i].doOnError(logToConsoleError).subscribe(r[i].asObserver()))}o.onNext(n)}),function(){n.dispose();for(var e=Object.keys(r),o=0;o<e.length;o++)r[e[o]].dispose()}})}function run(e,r){if("function"!=typeof e)throw new Error("First argument given to Cycle.run() must be the 'main' function.");if("object"!=typeof r||null===r)throw new Error("Second argument given to Cycle.run() must be an object with driver functions as properties.");if(0===Object.keys(r).length)throw new Error("Second argument given to Cycle.run() must be an object with at least one driver function declared as a property.");var o=makeSinkProxies(r),n=callDrivers(r,o),t=e(n),s=replicateMany(t,o).subscribe(),i=attachDisposeToSinks(t,s),c=attachDisposeToSources(n);return{sources:c,sinks:i}}var Rx=require("rx"),logToConsoleError="undefined"!=typeof console&&console.error?function(e){console.error(e.stack||e)}:Function.prototype,Cycle={run:run};module.exports=Cycle;

},{"rx":64}],2:[function(require,module,exports){
"use strict";var _extends=Object.assign||function(r){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var t in i)Object.prototype.hasOwnProperty.call(i,t)&&(r[t]=i[t])}return r},svg=require("./virtual-hyperscript-svg"),_require=require("./render-dom"),makeDOMDriver=_require.makeDOMDriver,_require2=require("./render-html"),makeHTMLDriver=_require2.makeHTMLDriver,mockDOMSource=require("./mock-dom-source"),h=require("./virtual-hyperscript"),hh=require("hyperscript-helpers")(h),CycleDOM=_extends({makeDOMDriver:makeDOMDriver,makeHTMLDriver:makeHTMLDriver,h:h},hh,{hJSX:function(r,e){for(var i=arguments.length,t=Array(i>2?i-2:0),u=2;i>u;u++)t[u-2]=arguments[u];return h(r,e,t)},svg:svg,mockDOMSource:mockDOMSource});module.exports=CycleDOM;

},{"./mock-dom-source":4,"./render-dom":5,"./render-html":6,"./virtual-hyperscript":9,"./virtual-hyperscript-svg":8,"hyperscript-helpers":54}],3:[function(require,module,exports){
"use strict";function createListener(e){var n=e.element,r=e.eventName,t=e.handler,a=e.useCapture;if(n.addEventListener)return n.addEventListener(r,t,a),disposableCreate(function(){n.removeEventListener(r,t,a)});throw new Error("No listener found")}function createEventListener(e){var n=e.element,r=e.eventName,t=e.handler,a=e.useCapture,s=new CompositeDisposable;if(Array.isArray(n))for(var o=0,i=n.length;i>o;o++)s.add(createEventListener({element:n[o],eventName:r,handler:t,useCapture:a}));else n&&s.add(createListener({element:n,eventName:r,handler:t,useCapture:a}));return s}function fromEvent(e,n){var r=arguments.length<=2||void 0===arguments[2]?!1:arguments[2];return new AnonymousObservable(function(t){return createEventListener({element:e,eventName:n,handler:function(){t.onNext(arguments[0])},useCapture:r})}).share()}var Rx=require("rx"),disposableCreate=Rx.Disposable.create,CompositeDisposable=Rx.CompositeDisposable,AnonymousObservable=Rx.AnonymousObservable;module.exports=fromEvent;

},{"rx":64}],4:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function getEventsStreamForSelector(e){return function(r){for(var t in e)if(e.hasOwnProperty(t)&&t===r)return e[t];return emptyStream}}function mockDOMSource(){var e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];return{select:function(r){for(var t in e)if(e.hasOwnProperty(t)&&t===r){var o=emptyStream;return e[t].hasOwnProperty("observable")&&(o=e[t].observable),{observable:o,events:getEventsStreamForSelector(e[t])}}return{observable:emptyStream,events:function(){return emptyStream}}}}}Object.defineProperty(exports,"__esModule",{value:!0});var _rx=require("rx"),_rx2=_interopRequireDefault(_rx),emptyStream=_rx2["default"].Observable.empty();exports["default"]=mockDOMSource,module.exports=exports["default"];

},{"rx":64}],5:[function(require,module,exports){
"use strict";function isElement(e){return"object"==typeof HTMLElement?e instanceof HTMLElement||e instanceof DocumentFragment:e&&"object"==typeof e&&null!==e&&(1===e.nodeType||11===e.nodeType)&&"string"==typeof e.nodeName}function wrapTopLevelVTree(e,t){var r=e.properties.id,n=void 0===r?"":r,o=e.properties.className,a=void 0===o?"":o,i=n===t.id,s=a===t.className,c=e.tagName.toUpperCase()===t.tagName;if(i&&s&&c)return e;var l={};return t.id&&(l.id=t.id),t.className&&(l.className=t.className),VDOM.h(t.tagName,l,[e])}function makeDiffAndPatchToElement$(e){return function(t){var r=_slicedToArray(t,2),n=r[0],o=r[1];if("undefined"==typeof o)return Rx.Observable.empty();var a=wrapTopLevelVTree(n,e),i=wrapTopLevelVTree(o,e);return e=VDOM.patch(e,VDOM.diff(a,i)),Rx.Observable.just(e)}}function renderRawRootElem$(e,t){var r=makeDiffAndPatchToElement$(t);return e.flatMapLatest(transposeVTree).startWith(VDOM.parse(t)).pairwise().flatMap(r)}function isolateSource(e,t){return e.select(".cycle-scope-"+t)}function isolateSink(e,t){return e.map(function(e){var r=e.properties.className,n=void 0===r?"":r;if(-1===n.indexOf("cycle-scope-"+t)){var o=(n+" cycle-scope-"+t).trim();e.properties.className=o}if(e.properties.attributes){var a=e.properties.attributes["class"]||"";if(-1===a.indexOf("cycle-scope-"+t)){var i=(a+" cycle-scope-"+t).trim();e.properties.attributes["class"]=i}}return e})}function makeIsStrictlyInRootScope(e){var t=function(t){var r=t.match(/cycle-scope-(\S+)/);return r&&-1===e.indexOf("."+t)},r=function(t){var r=t.match(/cycle-scope-(\S+)/);return r&&-1!==e.indexOf("."+t)};return function(e){for(var n=e;n;n=n.parentElement){var o=String.prototype.split,a=n.classList||o.call(n.className," ");if(Array.prototype.some.call(a,r))return!0;if(Array.prototype.some.call(a,t))return!1}return!0}}function maybeMutateEventPropagationAttributes(e){e.hasOwnProperty("propagationHasBeenStopped")||!function(){e.propagationHasBeenStopped=!1;var t=e.stopPropagation;e.stopPropagation=function(){t.call(this),this.propagationHasBeenStopped=!0}}()}function mutateEventCurrentTarget(e,t){try{Object.defineProperty(e,"currentTarget",{value:t,configurable:!0})}catch(r){}e.ownerTarget=t}function makeSimulateBubbling(e,t){var r=makeIsStrictlyInRootScope(e),n=e.join(" "),o=e.join(""),a=t.parentElement;return function(e){if(maybeMutateEventPropagationAttributes(e),e.propagationHasBeenStopped)return!1;for(var t=e.target;t&&t!==a;t=t.parentElement)if(r(t)&&(matchesSelector(t,n)||matchesSelector(t,o)))return mutateEventCurrentTarget(e,t),!0;return!1}}function makeEventsSelector(e,t){return function(r){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];if("string"!=typeof r)throw new Error("DOM driver's events() expects argument to be a string representing the event type to listen for.");var o=!1;return-1!==eventTypesThatDontBubble.indexOf(r)&&(o=!0),"boolean"==typeof n.useCapture&&(o=n.useCapture),e.first().flatMapLatest(function(e){if(!t||0===t.length)return fromEvent(e,r,o);var n=makeSimulateBubbling(t,e);return fromEvent(e,r,o).filter(n)}).share()}}function makeElementSelector(e){return function(t){if("string"!=typeof t)throw new Error("DOM driver's select() expects the argument to be a string as a CSS selector");var r=this.namespace,n=t.trim(),o=":root"===n?r:r.concat(n),a=e.map(function(e){if(""===o.join(""))return e;var t=e.querySelectorAll(o.join(" "));0===t.length&&(t=e.querySelectorAll(o.join("")));var r=Array.prototype.slice.call(t);return r.filter(makeIsStrictlyInRootScope(o))});return{observable:a,namespace:o,select:makeElementSelector(e),events:makeEventsSelector(e,o),isolateSource:isolateSource,isolateSink:isolateSink}}}function validateDOMSink(e){if(!e||"function"!=typeof e.subscribe)throw new Error("The DOM driver function expects as input an Observable of virtual DOM elements")}function defaultOnErrorFn(e){console&&console.error?console.error(e):console.log(e)}function makeDOMDriver(e,t){var r="string"==typeof e?document.querySelector(e):e;if("string"==typeof e&&null===r)throw new Error("Cannot render into unknown element `"+e+"`");if(!isElement(r))throw new Error("Given container is not a DOM element neither a selector string.");var n=t||{},o=n.onError,a=void 0===o?defaultOnErrorFn:o;if("function"!=typeof a)throw new Error("You provided an `onError` to makeDOMDriver but it was not a function. It should be a callback function to handle errors.");return function(e){validateDOMSink(e);var t=renderRawRootElem$(e,r).startWith(r).doOnError(a).replay(null,1),n=t.connect();return{observable:t,namespace:[],select:makeElementSelector(t),events:makeEventsSelector(t,[]),dispose:function(){return n.dispose()},isolateSource:isolateSource,isolateSink:isolateSink}}}var _slicedToArray=function(){function e(e,t){var r=[],n=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(n=(i=s.next()).done)&&(r.push(i.value),!t||r.length!==t);n=!0);}catch(c){o=!0,a=c}finally{try{!n&&s["return"]&&s["return"]()}finally{if(o)throw a}}return r}return function(t,r){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,r);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),Rx=require("rx"),fromEvent=require("./fromevent"),VDOM={h:require("./virtual-hyperscript"),diff:require("virtual-dom/diff"),patch:require("virtual-dom/patch"),parse:"undefined"!=typeof window?require("vdom-parser"):function(){}},_require=require("./transposition"),transposeVTree=_require.transposeVTree,matchesSelector=void 0;try{matchesSelector=require("matches-selector")}catch(err){matchesSelector=function(){}}var eventTypesThatDontBubble=["load","unload","focus","blur","mouseenter","mouseleave","submit","change","reset","timeupdate","playing","waiting","seeking","seeked","ended","loadedmetadata","loadeddata","canplay","canplaythrough","durationchange","play","pause","ratechange","volumechange","suspend","emptied","stalled"];module.exports={isElement:isElement,wrapTopLevelVTree:wrapTopLevelVTree,makeDiffAndPatchToElement$:makeDiffAndPatchToElement$,renderRawRootElem$:renderRawRootElem$,validateDOMSink:validateDOMSink,makeDOMDriver:makeDOMDriver};

},{"./fromevent":3,"./transposition":7,"./virtual-hyperscript":9,"matches-selector":60,"rx":64,"vdom-parser":71,"virtual-dom/diff":78,"virtual-dom/patch":79}],6:[function(require,module,exports){
"use strict";function makeBogusSelect(){return function(){return{observable:Rx.Observable.empty(),events:function(){return Rx.Observable.empty()}}}}function makeHTMLDriver(){return function(e){var r=e.flatMapLatest(transposeVTree).last().map(toHTML);return r.select=makeBogusSelect(),r}}var Rx=require("rx"),toHTML=require("vdom-to-html"),_require=require("./transposition"),transposeVTree=_require.transposeVTree;module.exports={makeBogusSelect:makeBogusSelect,makeHTMLDriver:makeHTMLDriver};

},{"./transposition":7,"rx":64,"vdom-to-html":75}],7:[function(require,module,exports){
"use strict";function transposeVTree(e){if("function"==typeof e.subscribe)return e.flatMapLatest(transposeVTree);if("VirtualText"===e.type)return Rx.Observable.just(e);if("VirtualNode"===e.type&&Array.isArray(e.children)&&e.children.length>0)return Rx.Observable.combineLatest(e.children.map(transposeVTree),function(){for(var r=arguments.length,t=Array(r),n=0;r>n;n++)t[n]=arguments[n];return new VirtualNode(e.tagName,e.properties,t,e.key,e.namespace)});if("VirtualNode"===e.type||"Widget"===e.type||"Thunk"===e.type)return Rx.Observable.just(e);throw new Error("Unhandled case in transposeVTree()")}var Rx=require("rx"),VirtualNode=require("virtual-dom/vnode/vnode");module.exports={transposeVTree:transposeVTree};

},{"rx":64,"virtual-dom/vnode/vnode":98}],8:[function(require,module,exports){
"use strict";function svg(r,t,e){!e&&isChildren(t)&&(e=t,t={}),t=t||{},t.namespace=SVG_NAMESPACE;var i=t.attributes||(t.attributes={});for(var a in t)if(t.hasOwnProperty(a)){var s=SVGAttributeNamespace(a);if(void 0!==s){var u=t[a];"string"!=typeof u&&"number"!=typeof u&&"boolean"!=typeof u||(null===s?(i[a]=u,t[a]=void 0):t[a]=attributeHook(s,u))}}return h(r,t,e)}function isObservable(r){return r&&"function"==typeof r.subscribe}function isChildren(r){return"string"==typeof r||isArray(r)||isObservable(r)}var isArray=require("x-is-array"),h=require("./virtual-hyperscript"),SVGAttributeNamespace=require("virtual-dom/virtual-hyperscript/svg-attribute-namespace"),attributeHook=require("virtual-dom/virtual-hyperscript/hooks/attribute-hook"),SVG_NAMESPACE="http://www.w3.org/2000/svg";module.exports=svg;

},{"./virtual-hyperscript":9,"virtual-dom/virtual-hyperscript/hooks/attribute-hook":86,"virtual-dom/virtual-hyperscript/svg-attribute-namespace":90,"x-is-array":104}],9:[function(require,module,exports){
"use strict";function h(e,r,i){var t,o,n,s,u=[];return!i&&isChildren(r)&&(i=r,o={}),o=o||r||{},t=parseTag(e,o),o.hasOwnProperty("key")&&(n=o.key,o.key=void 0),o.hasOwnProperty("namespace")&&(s=o.namespace,o.namespace=void 0),"INPUT"!==t||s||!o.hasOwnProperty("value")||void 0===o.value||isHook(o.value)||(o.value=softSetHook(o.value)),transformProperties(o),void 0!==i&&null!==i&&addChild(i,u,t,o),new VNode(t,o,u,n,s)}function addChild(e,r,i,t){if("string"==typeof e)r.push(new VText(e));else if("number"==typeof e)r.push(new VText(String(e)));else if(isChild(e))r.push(e);else{if(!isArray(e)){if(null===e||void 0===e)return;throw UnexpectedVirtualElement({foreignObject:e,parentVnode:{tagName:i,properties:t}})}for(var o=0;o<e.length;o++)addChild(e[o],r,i,t)}}function transformProperties(e){for(var r in e)if(e.hasOwnProperty(r)){var i=e[r];if(isHook(i))continue;"ev-"===r.substr(0,3)&&(e[r]=evHook(i))}}function isObservable(e){return e&&"function"==typeof e.subscribe}function isChild(e){return isVNode(e)||isVText(e)||isObservable(e)||isWidget(e)||isVThunk(e)}function isChildren(e){return"string"==typeof e||isArray(e)||isChild(e)}function UnexpectedVirtualElement(e){var r=new Error;return r.type="virtual-hyperscript.unexpected.virtual-element",r.message="Unexpected virtual child passed to h().\nExpected a VNode / Vthunk / VWidget / string but:\ngot:\n"+errorString(e.foreignObject)+".\nThe parent vnode is:\n"+errorString(e.parentVnode),r.foreignObject=e.foreignObject,r.parentVnode=e.parentVnode,r}function errorString(e){try{return JSON.stringify(e,null,"    ")}catch(r){return String(e)}}var isArray=require("x-is-array"),VNode=require("virtual-dom/vnode/vnode.js"),VText=require("virtual-dom/vnode/vtext.js"),isVNode=require("virtual-dom/vnode/is-vnode"),isVText=require("virtual-dom/vnode/is-vtext"),isWidget=require("virtual-dom/vnode/is-widget"),isHook=require("virtual-dom/vnode/is-vhook"),isVThunk=require("virtual-dom/vnode/is-thunk"),parseTag=require("virtual-dom/virtual-hyperscript/parse-tag.js"),softSetHook=require("virtual-dom/virtual-hyperscript/hooks/soft-set-hook.js"),evHook=require("virtual-dom/virtual-hyperscript/hooks/ev-hook.js");module.exports=h;

},{"virtual-dom/virtual-hyperscript/hooks/ev-hook.js":87,"virtual-dom/virtual-hyperscript/hooks/soft-set-hook.js":88,"virtual-dom/virtual-hyperscript/parse-tag.js":89,"virtual-dom/vnode/is-thunk":92,"virtual-dom/vnode/is-vhook":93,"virtual-dom/vnode/is-vnode":94,"virtual-dom/vnode/is-vtext":95,"virtual-dom/vnode/is-widget":96,"virtual-dom/vnode/vnode.js":98,"virtual-dom/vnode/vtext.js":100,"x-is-array":104}],10:[function(require,module,exports){
"use strict";function optionsToSuperagent(e){var r=e.url,t=e.send,n=void 0===t?null:t,o=e.accept,i=void 0===o?null:o,a=e.query,s=void 0===a?null:a,u=e.user,l=void 0===u?null:u,p=e.password,c=void 0===p?null:p,f=e.field,v=void 0===f?null:f,d=e.attach,g=void 0===d?null:d,m=e.withCredentials,h=void 0===m?!1:m,y=e.headers,S=void 0===y?{}:y,q=e.redirects,T=void 0===q?5:q,w=e.type,R=void 0===w?"json":w,b=e.method,k=void 0===b?"get":b;if("string"!=typeof r)throw new Error("Please provide a `url` property in the request options.");var x=k.toLowerCase(),O="delete"===x?"del":x,P=superagent[O](r);"function"==typeof P.redirects&&(P=P.redirects(T)),P=P.type(R),null!==n&&(P=P.send(n)),null!==i&&(P=P.accept(i)),null!==s&&(P=P.query(s)),h&&(P=P.withCredentials()),null!==l&&null!==c&&(P=P.auth(l,c));for(var _ in S)S.hasOwnProperty(_)&&(P=P.set(_,S[_]));if(null!==v)for(var _ in v)v.hasOwnProperty(_)&&(P=P.field(_,v[_]));if(null!==g)for(var C=g.length-1;C>=0;C--){var D=g[C];P=P.attach(D.name,D.path,D.filename)}return P}function createResponse$(e){return Rx.Observable.create(function(r){var t=optionsToSuperagent(e);try{e.progress&&(t=t.on("progress",function(t){t.request=e,r.onNext(t)})),t.end(function(t,n){t?r.onError(t):(n.request=e,r.onNext(n),r.onCompleted())})}catch(n){r.onError(n)}return function(){t.abort()}})}function normalizeRequestOptions(e){if("string"==typeof e)return{url:e};if("object"==typeof e)return e;throw new Error("Observable of requests given to HTTP Driver must emit either URL strings or objects with parameters.")}function isolateSink(e,r){return e.map(function(e){return"string"==typeof e?{url:e,_namespace:[r]}:(e._namespace=e._namespace||[],e._namespace.push(r),e)})}function isolateSource(e,r){var t=e.filter(function(e){return Array.isArray(e.request._namespace)&&-1!==e.request._namespace.indexOf(r)});return t.isolateSource=isolateSource,t.isolateSink=isolateSink,t}function makeHTTPDriver(){var e=arguments.length<=0||void 0===arguments[0]?{eager:!1}:arguments[0],r=e.eager,t=void 0===r?!1:r;return function(e){var r=e.map(function(e){var r=normalizeRequestOptions(e),n=createResponse$(r);return("boolean"==typeof r.eager?r.eager:t)&&(n=n.replay(null,1),n.connect()),n.request=r,n}).replay(null,1);return r.connect(),r.isolateSource=isolateSource,r.isolateSink=isolateSink,r}}var Rx=require("rx"),superagent=require("superagent");module.exports={optionsToSuperagent:optionsToSuperagent,createResponse$:createResponse$,makeHTTPDriver:makeHTTPDriver};

},{"rx":64,"superagent":12}],11:[function(require,module,exports){
"use strict";var _require=require("./http-driver"),makeHTTPDriver=_require.makeHTTPDriver,CycleHTTPDriver={makeHTTPDriver:makeHTTPDriver};module.exports=CycleHTTPDriver;

},{"./http-driver":10}],12:[function(require,module,exports){
function noop(){}function isHost(t){var e={}.toString.call(t);switch(e){case"[object File]":case"[object Blob]":case"[object FormData]":return!0;default:return!1}}function isObject(t){return t===Object(t)}function serialize(t){if(!isObject(t))return t;var e=[];for(var r in t)null!=t[r]&&pushEncodedKeyValuePair(e,r,t[r]);return e.join("&")}function pushEncodedKeyValuePair(t,e,r){return Array.isArray(r)?r.forEach(function(r){pushEncodedKeyValuePair(t,e,r)}):void t.push(encodeURIComponent(e)+"="+encodeURIComponent(r))}function parseString(t){for(var e,r,s={},i=t.split("&"),o=0,n=i.length;n>o;++o)r=i[o],e=r.split("="),s[decodeURIComponent(e[0])]=decodeURIComponent(e[1]);return s}function parseHeader(t){var e,r,s,i,o=t.split(/\r?\n/),n={};o.pop();for(var u=0,a=o.length;a>u;++u)r=o[u],e=r.indexOf(":"),s=r.slice(0,e).toLowerCase(),i=trim(r.slice(e+1)),n[s]=i;return n}function isJSON(t){return/[\/+]json\b/.test(t)}function type(t){return t.split(/ *; */).shift()}function params(t){return reduce(t.split(/ *; */),function(t,e){var r=e.split(/ *= */),s=r.shift(),i=r.shift();return s&&i&&(t[s]=i),t},{})}function Response(t,e){e=e||{},this.req=t,this.xhr=this.req.xhr,this.text="HEAD"!=this.req.method&&(""===this.xhr.responseType||"text"===this.xhr.responseType)||"undefined"==typeof this.xhr.responseType?this.xhr.responseText:null,this.statusText=this.req.xhr.statusText,this.setStatusProperties(this.xhr.status),this.header=this.headers=parseHeader(this.xhr.getAllResponseHeaders()),this.header["content-type"]=this.xhr.getResponseHeader("content-type"),this.setHeaderProperties(this.header),this.body="HEAD"!=this.req.method?this.parseBody(this.text?this.text:this.xhr.response):null}function Request(t,e){var r=this;Emitter.call(this),this._query=this._query||[],this.method=t,this.url=e,this.header={},this._header={},this.on("end",function(){var t=null,e=null;try{e=new Response(r)}catch(s){return t=new Error("Parser is unable to parse the response"),t.parse=!0,t.original=s,t.rawResponse=r.xhr&&r.xhr.responseText?r.xhr.responseText:null,r.callback(t)}if(r.emit("response",e),t)return r.callback(t,e);if(e.status>=200&&e.status<300)return r.callback(t,e);var i=new Error(e.statusText||"Unsuccessful HTTP response");i.original=t,i.response=e,i.status=e.status,r.callback(i,e)})}function request(t,e){return"function"==typeof e?new Request("GET",t).end(e):1==arguments.length?new Request("GET",t):new Request(t,e)}function del(t,e){var r=request("DELETE",t);return e&&r.end(e),r}var Emitter=require("emitter"),reduce=require("reduce"),root;root="undefined"!=typeof window?window:"undefined"!=typeof self?self:this,request.getXHR=function(){if(!(!root.XMLHttpRequest||root.location&&"file:"==root.location.protocol&&root.ActiveXObject))return new XMLHttpRequest;try{return new ActiveXObject("Microsoft.XMLHTTP")}catch(t){}try{return new ActiveXObject("Msxml2.XMLHTTP.6.0")}catch(t){}try{return new ActiveXObject("Msxml2.XMLHTTP.3.0")}catch(t){}try{return new ActiveXObject("Msxml2.XMLHTTP")}catch(t){}return!1};var trim="".trim?function(t){return t.trim()}:function(t){return t.replace(/(^\s*|\s*$)/g,"")};request.serializeObject=serialize,request.parseString=parseString,request.types={html:"text/html",json:"application/json",xml:"application/xml",urlencoded:"application/x-www-form-urlencoded",form:"application/x-www-form-urlencoded","form-data":"application/x-www-form-urlencoded"},request.serialize={"application/x-www-form-urlencoded":serialize,"application/json":JSON.stringify},request.parse={"application/x-www-form-urlencoded":parseString,"application/json":JSON.parse},Response.prototype.get=function(t){return this.header[t.toLowerCase()]},Response.prototype.setHeaderProperties=function(t){var e=this.header["content-type"]||"";this.type=type(e);var r=params(e);for(var s in r)this[s]=r[s]},Response.prototype.parseBody=function(t){var e=request.parse[this.type];return e&&t&&(t.length||t instanceof Object)?e(t):null},Response.prototype.setStatusProperties=function(t){1223===t&&(t=204);var e=t/100|0;this.status=this.statusCode=t,this.statusType=e,this.info=1==e,this.ok=2==e,this.clientError=4==e,this.serverError=5==e,this.error=4==e||5==e?this.toError():!1,this.accepted=202==t,this.noContent=204==t,this.badRequest=400==t,this.unauthorized=401==t,this.notAcceptable=406==t,this.notFound=404==t,this.forbidden=403==t},Response.prototype.toError=function(){var t=this.req,e=t.method,r=t.url,s="cannot "+e+" "+r+" ("+this.status+")",i=new Error(s);return i.status=this.status,i.method=e,i.url=r,i},request.Response=Response,Emitter(Request.prototype),Request.prototype.use=function(t){return t(this),this},Request.prototype.timeout=function(t){return this._timeout=t,this},Request.prototype.clearTimeout=function(){return this._timeout=0,clearTimeout(this._timer),this},Request.prototype.abort=function(){return this.aborted?void 0:(this.aborted=!0,this.xhr.abort(),this.clearTimeout(),this.emit("abort"),this)},Request.prototype.set=function(t,e){if(isObject(t)){for(var r in t)this.set(r,t[r]);return this}return this._header[t.toLowerCase()]=e,this.header[t]=e,this},Request.prototype.unset=function(t){return delete this._header[t.toLowerCase()],delete this.header[t],this},Request.prototype.getHeader=function(t){return this._header[t.toLowerCase()]},Request.prototype.type=function(t){return this.set("Content-Type",request.types[t]||t),this},Request.prototype.parse=function(t){return this._parser=t,this},Request.prototype.accept=function(t){return this.set("Accept",request.types[t]||t),this},Request.prototype.auth=function(t,e){var r=btoa(t+":"+e);return this.set("Authorization","Basic "+r),this},Request.prototype.query=function(t){return"string"!=typeof t&&(t=serialize(t)),t&&this._query.push(t),this},Request.prototype.field=function(t,e){return this._formData||(this._formData=new root.FormData),this._formData.append(t,e),this},Request.prototype.attach=function(t,e,r){return this._formData||(this._formData=new root.FormData),this._formData.append(t,e,r||e.name),this},Request.prototype.send=function(t){var e=isObject(t),r=this.getHeader("Content-Type");if(e&&isObject(this._data))for(var s in t)this._data[s]=t[s];else"string"==typeof t?(r||this.type("form"),r=this.getHeader("Content-Type"),"application/x-www-form-urlencoded"==r?this._data=this._data?this._data+"&"+t:t:this._data=(this._data||"")+t):this._data=t;return!e||isHost(t)?this:(r||this.type("json"),this)},Request.prototype.callback=function(t,e){var r=this._callback;this.clearTimeout(),r(t,e)},Request.prototype.crossDomainError=function(){var t=new Error("Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.");t.crossDomain=!0,t.status=this.status,t.method=this.method,t.url=this.url,this.callback(t)},Request.prototype.timeoutError=function(){var t=this._timeout,e=new Error("timeout of "+t+"ms exceeded");e.timeout=t,this.callback(e)},Request.prototype.withCredentials=function(){return this._withCredentials=!0,this},Request.prototype.end=function(t){var e=this,r=this.xhr=request.getXHR(),s=this._query.join("&"),i=this._timeout,o=this._formData||this._data;this._callback=t||noop,r.onreadystatechange=function(){if(4==r.readyState){var t;try{t=r.status}catch(s){t=0}if(0==t){if(e.timedout)return e.timeoutError();if(e.aborted)return;return e.crossDomainError()}e.emit("end")}};var n=function(t){t.total>0&&(t.percent=t.loaded/t.total*100),t.direction="download",e.emit("progress",t)};this.hasListeners("progress")&&(r.onprogress=n);try{r.upload&&this.hasListeners("progress")&&(r.upload.onprogress=n)}catch(u){}if(i&&!this._timer&&(this._timer=setTimeout(function(){e.timedout=!0,e.abort()},i)),s&&(s=request.serializeObject(s),this.url+=~this.url.indexOf("?")?"&"+s:"?"+s),r.open(this.method,this.url,!0),this._withCredentials&&(r.withCredentials=!0),"GET"!=this.method&&"HEAD"!=this.method&&"string"!=typeof o&&!isHost(o)){var a=this.getHeader("Content-Type"),h=this._parser||request.serialize[a?a.split(";")[0]:""];!h&&isJSON(a)&&(h=request.serialize["application/json"]),h&&(o=h(o))}for(var p in this.header)null!=this.header[p]&&r.setRequestHeader(p,this.header[p]);return this.emit("request",this),r.send("undefined"!=typeof o?o:null),this},Request.prototype.then=function(t,e){return this.end(function(r,s){r?e(r):t(s)})},request.Request=Request,request.get=function(t,e,r){var s=request("GET",t);return"function"==typeof e&&(r=e,e=null),e&&s.query(e),r&&s.end(r),s},request.head=function(t,e,r){var s=request("HEAD",t);return"function"==typeof e&&(r=e,e=null),e&&s.send(e),r&&s.end(r),s},request.del=del,request["delete"]=del,request.patch=function(t,e,r){var s=request("PATCH",t);return"function"==typeof e&&(r=e,e=null),e&&s.send(e),r&&s.end(r),s},request.post=function(t,e,r){var s=request("POST",t);return"function"==typeof e&&(r=e,e=null),e&&s.send(e),r&&s.end(r),s},request.put=function(t,e,r){var s=request("PUT",t);return"function"==typeof e&&(r=e,e=null),e&&s.send(e),r&&s.end(r),s},module.exports=request;

},{"emitter":16,"reduce":63}],13:[function(require,module,exports){

},{}],14:[function(require,module,exports){
module.exports=function(e){var t,n=String.prototype.split,l=/()??/.exec("")[1]===e;return t=function(t,r,i){if("[object RegExp]"!==Object.prototype.toString.call(r))return n.call(t,r,i);var o,p,s,c,g=[],u=(r.ignoreCase?"i":"")+(r.multiline?"m":"")+(r.extended?"x":"")+(r.sticky?"y":""),x=0,r=new RegExp(r.source,u+"g");for(t+="",l||(o=new RegExp("^"+r.source+"$(?!\\s)",u)),i=i===e?-1>>>0:i>>>0;(p=r.exec(t))&&(s=p.index+p[0].length,!(s>x&&(g.push(t.slice(x,p.index)),!l&&p.length>1&&p[0].replace(o,function(){for(var t=1;t<arguments.length-2;t++)arguments[t]===e&&(p[t]=e)}),p.length>1&&p.index<t.length&&Array.prototype.push.apply(g,p.slice(1)),c=p[0].length,x=s,g.length>=i)));)r.lastIndex===p.index&&r.lastIndex++;return x===t.length?!c&&r.test("")||g.push(""):g.push(t.slice(x)),g.length>i?g.slice(0,i):g}}();

},{}],15:[function(require,module,exports){
function cleanUpNextTick(){draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue()}function drainQueue(){if(!draining){var e=setTimeout(cleanUpNextTick);draining=!0;for(var n=queue.length;n;){for(currentQueue=queue,queue=[];++queueIndex<n;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,n=queue.length}currentQueue=null,draining=!1,clearTimeout(e)}}function Item(e,n){this.fun=e,this.array=n}function noop(){}var process=module.exports={},queue=[],draining=!1,currentQueue,queueIndex=-1;process.nextTick=function(e){var n=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)n[r-1]=arguments[r];queue.push(new Item(e,n)),1!==queue.length||draining||setTimeout(drainQueue,0)},Item.prototype.run=function(){this.fun.apply(null,this.array)},process.title="browser",process.browser=!0,process.env={},process.argv=[],process.version="",process.versions={},process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.binding=function(e){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(e){throw new Error("process.chdir is not supported")},process.umask=function(){return 0};

},{}],16:[function(require,module,exports){
function Emitter(t){return t?mixin(t):void 0}function mixin(t){for(var e in Emitter.prototype)t[e]=Emitter.prototype[e];return t}module.exports=Emitter,Emitter.prototype.on=Emitter.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},Emitter.prototype.once=function(t,e){function i(){this.off(t,i),e.apply(this,arguments)}return i.fn=e,this.on(t,i),this},Emitter.prototype.off=Emitter.prototype.removeListener=Emitter.prototype.removeAllListeners=Emitter.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var i=this._callbacks["$"+t];if(!i)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var r,s=0;s<i.length;s++)if(r=i[s],r===e||r.fn===e){i.splice(s,1);break}return this},Emitter.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),i=this._callbacks["$"+t];if(i){i=i.slice(0);for(var r=0,s=i.length;s>r;++r)i[r].apply(this,e)}return this},Emitter.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},Emitter.prototype.hasListeners=function(t){return!!this.listeners(t).length};

},{}],17:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _makeHistoryDriver=require("./makeHistoryDriver");Object.defineProperty(exports,"makeHistoryDriver",{enumerable:!0,get:function(){return _makeHistoryDriver.makeHistoryDriver}});var _util=require("./util");Object.defineProperty(exports,"supportsHistory",{enumerable:!0,get:function(){return _util.supportsHistory}}),Object.defineProperty(exports,"createLocation",{enumerable:!0,get:function(){return _util.createLocation}});var _serverHistory=require("./serverHistory");Object.defineProperty(exports,"createServerHistory",{enumerable:!0,get:function(){return _serverHistory.createServerHistory}});

},{"./makeHistoryDriver":18,"./serverHistory":19,"./util":20}],18:[function(require,module,exports){
"use strict";function makePushState(e){return function(t){if("string"!=typeof t&&"object"!==("undefined"==typeof t?"undefined":_typeof(t)))throw new Error("History Driver input must be a string or\n        object but received "+("undefined"==typeof t?"undefined":_typeof(t)));e.push(t)}}function makeHistoryDriver(e){if(!e||"object"!==("undefined"==typeof e?"undefined":_typeof(e))||"function"!=typeof e.listen)throw new Error("First argument to makeHistoryDriver must be a valid history instance with a listen() method");return function(t){var r=new _rx.ReplaySubject(1);return e.listen(function(e){return r.onNext(e)}),t.subscribe(makePushState(e)),r.createHref=e.createHref,r}}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};Object.defineProperty(exports,"__esModule",{value:!0}),exports.makeHistoryDriver=void 0;var _rx=require("rx");exports.makeHistoryDriver=makeHistoryDriver;

},{"rx":64}],19:[function(require,module,exports){
"use strict";function ServerHistory(){this.listeners=[]}function createServerHistory(){return new ServerHistory}Object.defineProperty(exports,"__esModule",{value:!0}),exports.createServerHistory=void 0;var _util=require("./util");ServerHistory.prototype.listen=function(e){this.listeners.push(e)},ServerHistory.prototype.push=function(e){var r=this.listeners;if(!r||0===r.length)throw new Error("There is no active listener");r.forEach(function(r){return r((0,_util.createLocation)(e))})},ServerHistory.prototype.createHref=function(e){return e},ServerHistory.prototype.createLocation=_util.createLocation,exports.createServerHistory=createServerHistory;

},{"./util":20}],20:[function(require,module,exports){
"use strict";function supportsHistory(){var t=navigator.userAgent;return(-1===t.indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&"undefined"!=typeof window?window.history&&"pushState"in window.history:!1}function createLocation(){var t=arguments.length<=0||void 0===arguments[0]?locationDefaults:arguments[0];return"string"==typeof t?Object.assign(locationDefaults,{pathname:t}):Object.assign(locationDefaults,t)}Object.defineProperty(exports,"__esModule",{value:!0});var locationDefaults={pathname:"/",action:"POP",hash:"",search:"",state:null,key:null};exports.supportsHistory=supportsHistory,exports.createLocation=createLocation;

},{}],21:[function(require,module,exports){
"use strict";function createAPI(e,r,t){var i=e.replay(1),o=i.connect();return{path:(0,_pathFilter.makePathFilter)(i,r,t),define:(0,_definitionResolver.makeDefinitionResolver)(i,r,t),observable:i,createHref:(0,_util.makeCreateHref)(r,t),dispose:function(){return o.dispose()}}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.createAPI=void 0;var _pathFilter=require("./pathFilter"),_definitionResolver=require("./definitionResolver"),_util=require("./util");exports.createAPI=createAPI;

},{"./definitionResolver":23,"./pathFilter":26,"./util":27}],22:[function(require,module,exports){
"use strict";function createRouter(e){return(0,_api.createAPI)(e,[],e.createHref)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.createRouter=void 0;var _api=require("./api");exports.createRouter=createRouter;

},{"./api":21}],23:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function getPathValue(e,t){var a=void 0,i=void 0;try{var r=(0,_switchPath2["default"])(e,t);i=r.value,a=r.path}catch(u){if(!t["*"])throw u;a=e,i=t["*"]}return{path:a,value:i}}function makeDefinitionResolver(e,t,a){return function(i){var r=e.map(function(e){var a=e.pathname,r="/"+(0,_util.filterPath)((0,_util.splitPath)(a),t),u=getPathValue(r,i),n=u.path,l=u.value;return{path:n,value:l,pathname:a}}),u=r.pluck("path").replay(1),n=u.connect(),l=r.pluck("value").replay(1),o=l.connect(),p=r.pluck("pathname").replay(1),h=p.connect(),c=function(){n.dispose(),h.dispose(),o.dispose()};return{path$:u,value$:l,fullPath$:p,createHref:(0,_util.makeCreateHref)(t,a),dispose:c}}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.makeDefinitionResolver=void 0;var _switchPath=require("switch-path"),_switchPath2=_interopRequireDefault(_switchPath),_util=require("./util");exports.makeDefinitionResolver=makeDefinitionResolver;

},{"./util":27,"switch-path":70}],24:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _makeRouterDriver=require("./makeRouterDriver");Object.defineProperty(exports,"makeRouterDriver",{enumerable:!0,get:function(){return _makeRouterDriver.makeRouterDriver}});var _createRouter=require("./createRouter");Object.defineProperty(exports,"createRouter",{enumerable:!0,get:function(){return _createRouter.createRouter}});var _util=require("./util");Object.defineProperty(exports,"supportsHistory",{enumerable:!0,get:function(){return _util.supportsHistory}}),Object.defineProperty(exports,"createLocation",{enumerable:!0,get:function(){return _util.createLocation}});

},{"./createRouter":22,"./makeRouterDriver":25,"./util":27}],25:[function(require,module,exports){
"use strict";function makeRouterDriver(r){if(!r||"function"!=typeof r)throw new Error("First argument to makeRouterDriver must be a valid history driver");return function(e){var t=r(e);return(0,_api.createAPI)(t,[],t.createHref)}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.makeRouterDriver=void 0;var _api=require("./api");exports.makeRouterDriver=makeRouterDriver;

},{"./api":21}],26:[function(require,module,exports){
"use strict";function isStrictlyInScope(t,e){var r=(0,_util.splitPath)(e);return t.every(function(t,e){return r[e]===t})}function makePathFilter(t,e,r){return function(i){var a=e.concat((0,_util.splitPath)(i)),n=t.filter(function(t){var e=t.pathname;return isStrictlyInScope(a,e)});return(0,_api.createAPI)(n,a,r)}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.makePathFilter=void 0;var _api=require("./api"),_util=require("./util");exports.makePathFilter=makePathFilter;

},{"./api":21,"./util":27}],27:[function(require,module,exports){
"use strict";function supportsHistory(){var t=navigator.userAgent;return(-1===t.indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&"undefined"!=typeof window?window.history&&"pushState"in window.history:!1}function splitPath(t){return t.split("/").filter(function(t){return t.length>0})}function filterPath(t,e){return t.filter(function(t){return e.indexOf(t)<0}).join("/")}function makeCreateHref(t,e){return function(n){var r=""+t.join("/")+n;return e(startsWith(r,"/")||startsWith("#/")?r:"/"+r)}}function createLocation(){var t=arguments.length<=0||void 0===arguments[0]?locationDefaults:arguments[0];return"string"==typeof t?Object.assign(locationDefaults,{pathname:t}):Object.assign(locationDefaults,t)}Object.defineProperty(exports,"__esModule",{value:!0});var startsWith=function(t,e){return t[0]===e},locationDefaults={pathname:"/",action:"POP",hash:"",search:"",state:null,key:null};exports.supportsHistory=supportsHistory,exports.splitPath=splitPath,exports.filterPath=filterPath,exports.makeCreateHref=makeCreateHref,exports.createLocation=createLocation;

},{}],28:[function(require,module,exports){
function isUndefinedOrNull(e){return null===e||void 0===e}function isBuffer(e){return e&&"object"==typeof e&&"number"==typeof e.length?"function"!=typeof e.copy||"function"!=typeof e.slice?!1:!(e.length>0&&"number"!=typeof e[0]):!1}function objEquiv(e,t,r){var n,i;if(isUndefinedOrNull(e)||isUndefinedOrNull(t))return!1;if(e.prototype!==t.prototype)return!1;if(isArguments(e))return isArguments(t)?(e=pSlice.call(e),t=pSlice.call(t),deepEqual(e,t,r)):!1;if(isBuffer(e)){if(!isBuffer(t))return!1;if(e.length!==t.length)return!1;for(n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}try{var u=objectKeys(e),o=objectKeys(t)}catch(f){return!1}if(u.length!=o.length)return!1;for(u.sort(),o.sort(),n=u.length-1;n>=0;n--)if(u[n]!=o[n])return!1;for(n=u.length-1;n>=0;n--)if(i=u[n],!deepEqual(e[i],t[i],r))return!1;return typeof e==typeof t}var pSlice=Array.prototype.slice,objectKeys=require("./lib/keys.js"),isArguments=require("./lib/is_arguments.js"),deepEqual=module.exports=function(e,t,r){return r||(r={}),e===t?!0:e instanceof Date&&t instanceof Date?e.getTime()===t.getTime():!e||!t||"object"!=typeof e&&"object"!=typeof t?r.strict?e===t:e==t:objEquiv(e,t,r)};

},{"./lib/is_arguments.js":29,"./lib/keys.js":30}],29:[function(require,module,exports){
function supported(t){return"[object Arguments]"==Object.prototype.toString.call(t)}function unsupported(t){return t&&"object"==typeof t&&"number"==typeof t.length&&Object.prototype.hasOwnProperty.call(t,"callee")&&!Object.prototype.propertyIsEnumerable.call(t,"callee")||!1}var supportsArgumentsClass="[object Arguments]"==function(){return Object.prototype.toString.call(arguments)}();exports=module.exports=supportsArgumentsClass?supported:unsupported,exports.supported=supported,exports.unsupported=unsupported;

},{}],30:[function(require,module,exports){
function shim(e){var s=[];for(var t in e)s.push(t);return s}exports=module.exports="function"==typeof Object.keys?Object.keys:shim,exports.shim=shim;

},{}],31:[function(require,module,exports){
"use strict";function escapeHtml(e){var t=""+e,a=matchHtmlRegExp.exec(t);if(!a)return t;var r,c="",s=0,n=0;for(s=a.index;s<t.length;s++){switch(t.charCodeAt(s)){case 34:r="&quot;";break;case 38:r="&amp;";break;case 39:r="&#39;";break;case 60:r="&lt;";break;case 62:r="&gt;";break;default:continue}n!==s&&(c+=t.substring(n,s)),n=s+1,c+=r}return n!==s?c+t.substring(n,s):c}var matchHtmlRegExp=/["'&<>]/;module.exports=escapeHtml;

},{}],32:[function(require,module,exports){
"use strict";function EvStore(e){var r=e[hashKey];return r||(r=e[hashKey]={}),r}var OneVersionConstraint=require("individual/one-version"),MY_VERSION="7";OneVersionConstraint("ev-store",MY_VERSION);var hashKey="__EV_STORE_KEY@"+MY_VERSION;module.exports=EvStore;

},{"individual/one-version":56}],33:[function(require,module,exports){
(function (global){
var topLevel="undefined"!=typeof global?global:"undefined"!=typeof window?window:{},minDoc=require("min-document");if("undefined"!=typeof document)module.exports=document;else{var doccy=topLevel["__GLOBAL_DOCUMENT_CACHE@4"];doccy||(doccy=topLevel["__GLOBAL_DOCUMENT_CACHE@4"]=minDoc),module.exports=doccy}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"min-document":13}],34:[function(require,module,exports){
"use strict";exports.__esModule=!0;var PUSH="PUSH";exports.PUSH=PUSH;var REPLACE="REPLACE";exports.REPLACE=REPLACE;var POP="POP";exports.POP=POP,exports["default"]={PUSH:PUSH,REPLACE:REPLACE,POP:POP};

},{}],35:[function(require,module,exports){
"use strict";function loopAsync(o,i,t){function c(){return r=!0,n?void(p=[].concat(_slice.call(arguments))):void t.apply(this,arguments)}function s(){if(!r&&(e=!0,!n)){for(n=!0;!r&&o>l&&e;)e=!1,i.call(this,l++,s,c);return n=!1,r?void t.apply(this,p):void(l>=o&&e&&(r=!0,t()))}}var l=0,r=!1,n=!1,e=!1,p=void 0;s()}exports.__esModule=!0;var _slice=Array.prototype.slice;exports.loopAsync=loopAsync;

},{}],36:[function(require,module,exports){
(function (process){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function createKey(e){return KeyPrefix+e}function saveState(e,r){try{null==r?window.sessionStorage.removeItem(createKey(e)):window.sessionStorage.setItem(createKey(e),JSON.stringify(r))}catch(t){if(t.name===SecurityError)return void("production"!==process.env.NODE_ENV?_warning2["default"](!1,"[history] Unable to save state; sessionStorage is not available due to security settings"):void 0);if(QuotaExceededErrors.indexOf(t.name)>=0&&0===window.sessionStorage.length)return void("production"!==process.env.NODE_ENV?_warning2["default"](!1,"[history] Unable to save state; sessionStorage is not available in Safari private mode"):void 0);throw t}}function readState(e){var r=void 0;try{r=window.sessionStorage.getItem(createKey(e))}catch(t){if(t.name===SecurityError)return"production"!==process.env.NODE_ENV?_warning2["default"](!1,"[history] Unable to read state; sessionStorage is not available due to security settings"):void 0,null}if(r)try{return JSON.parse(r)}catch(t){}return null}exports.__esModule=!0,exports.saveState=saveState,exports.readState=readState;var _warning=require("warning"),_warning2=_interopRequireDefault(_warning),KeyPrefix="@@History/",QuotaExceededErrors=["QuotaExceededError","QUOTA_EXCEEDED_ERR"],SecurityError="SecurityError";

}).call(this,require('_process'))

},{"_process":15,"warning":103}],37:[function(require,module,exports){
"use strict";function addEventListener(t,e,o){t.addEventListener?t.addEventListener(e,o,!1):t.attachEvent("on"+e,o)}function removeEventListener(t,e,o){t.removeEventListener?t.removeEventListener(e,o,!1):t.detachEvent("on"+e,o)}function getHashPath(){return window.location.href.split("#")[1]||""}function replaceHashPath(t){window.location.replace(window.location.pathname+window.location.search+"#"+t)}function getWindowPath(){return window.location.pathname+window.location.search+window.location.hash}function go(t){t&&window.history.go(t)}function getUserConfirmation(t,e){e(window.confirm(t))}function supportsHistory(){var t=navigator.userAgent;return-1===t.indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone")?window.history&&"pushState"in window.history:!1}function supportsGoWithoutReloadUsingHash(){var t=navigator.userAgent;return-1===t.indexOf("Firefox")}exports.__esModule=!0,exports.addEventListener=addEventListener,exports.removeEventListener=removeEventListener,exports.getHashPath=getHashPath,exports.replaceHashPath=replaceHashPath,exports.getWindowPath=getWindowPath,exports.go=go,exports.getUserConfirmation=getUserConfirmation,exports.supportsHistory=supportsHistory,exports.supportsGoWithoutReloadUsingHash=supportsGoWithoutReloadUsingHash;

},{}],38:[function(require,module,exports){
"use strict";exports.__esModule=!0;var canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement);exports.canUseDOM=canUseDOM;

},{}],39:[function(require,module,exports){
(function (process){
"use strict";function _interopRequireDefault(t){return t&&t.__esModule?t:{"default":t}}function extractPath(t){var e=t.match(/^https?:\/\/[^\/]*/);return null==e?t:t.substring(e[0].length)}function parsePath(t){var e=extractPath(t),r="",a="";"production"!==process.env.NODE_ENV?_warning2["default"](t===e,'A path must be pathname + search + hash only, not a fully qualified URL like "%s"',t):void 0;var n=e.indexOf("#");-1!==n&&(a=e.substring(n),e=e.substring(0,n));var s=e.indexOf("?");return-1!==s&&(r=e.substring(s),e=e.substring(0,s)),""===e&&(e="/"),{pathname:e,search:r,hash:a}}exports.__esModule=!0,exports.extractPath=extractPath,exports.parsePath=parsePath;var _warning=require("warning"),_warning2=_interopRequireDefault(_warning);

}).call(this,require('_process'))

},{"_process":15,"warning":103}],40:[function(require,module,exports){
(function (process){
"use strict";function _interopRequireDefault(t){return t&&t.__esModule?t:{"default":t}}function createBrowserHistory(){function t(t){t=t||window.history.state||{};var e=_DOMUtils.getWindowPath(),r=t,n=r.key,i=void 0;n?i=_DOMStateStorage.readState(n):(i=null,n=_.createKey(),c&&window.history.replaceState(_extends({},t,{key:n}),null,e));var o=_PathUtils.parsePath(e);return _.createLocation(_extends({},o,{state:i}),void 0,n)}function e(e){function r(e){void 0!==e.state&&n(t(e.state))}var n=e.transitionTo;return _DOMUtils.addEventListener(window,"popstate",r),function(){_DOMUtils.removeEventListener(window,"popstate",r)}}function r(t){var e=t.basename,r=t.pathname,n=t.search,i=t.hash,o=t.state,a=t.action,s=t.key;if(a!==_Actions.POP){_DOMStateStorage.saveState(s,o);var u=(e||"")+r+n+i,c={key:s};if(a===_Actions.PUSH){if(l)return window.location.href=u,!1;window.history.pushState(c,null,u)}else{if(l)return window.location.replace(u),!1;window.history.replaceState(c,null,u)}}}function n(t){1===++f&&(v=e(_));var r=_.listenBefore(t);return function(){r(),0===--f&&v()}}function i(t){1===++f&&(v=e(_));var r=_.listen(t);return function(){r(),0===--f&&v()}}function o(t){1===++f&&(v=e(_)),_.registerTransitionHook(t)}function a(t){_.unregisterTransitionHook(t),0===--f&&v()}var s=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];_ExecutionEnvironment.canUseDOM?void 0:"production"!==process.env.NODE_ENV?_invariant2["default"](!1,"Browser history needs a DOM"):_invariant2["default"](!1);var u=s.forceRefresh,c=_DOMUtils.supportsHistory(),l=!c||u,_=_createDOMHistory2["default"](_extends({},s,{getCurrentLocation:t,finishTransition:r,saveState:_DOMStateStorage.saveState})),f=0,v=void 0;return _extends({},_,{listenBefore:n,listen:i,registerTransitionHook:o,unregisterTransitionHook:a})}exports.__esModule=!0;var _extends=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},_invariant=require("invariant"),_invariant2=_interopRequireDefault(_invariant),_Actions=require("./Actions"),_PathUtils=require("./PathUtils"),_ExecutionEnvironment=require("./ExecutionEnvironment"),_DOMUtils=require("./DOMUtils"),_DOMStateStorage=require("./DOMStateStorage"),_createDOMHistory=require("./createDOMHistory"),_createDOMHistory2=_interopRequireDefault(_createDOMHistory);exports["default"]=createBrowserHistory,module.exports=exports["default"];

}).call(this,require('_process'))

},{"./Actions":34,"./DOMStateStorage":36,"./DOMUtils":37,"./ExecutionEnvironment":38,"./PathUtils":39,"./createDOMHistory":41,"_process":15,"invariant":57}],41:[function(require,module,exports){
(function (process){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function createDOMHistory(e){function t(e){return _ExecutionEnvironment.canUseDOM?void 0:"production"!==process.env.NODE_ENV?_invariant2["default"](!1,"DOM history needs a DOM"):_invariant2["default"](!1),r.listen(e)}var r=_createHistory2["default"](_extends({getUserConfirmation:_DOMUtils.getUserConfirmation},e,{go:_DOMUtils.go}));return _extends({},r,{listen:t})}exports.__esModule=!0;var _extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},_invariant=require("invariant"),_invariant2=_interopRequireDefault(_invariant),_ExecutionEnvironment=require("./ExecutionEnvironment"),_DOMUtils=require("./DOMUtils"),_createHistory=require("./createHistory"),_createHistory2=_interopRequireDefault(_createHistory);exports["default"]=createDOMHistory,module.exports=exports["default"];

}).call(this,require('_process'))

},{"./DOMUtils":37,"./ExecutionEnvironment":38,"./createHistory":43,"_process":15,"invariant":57}],42:[function(require,module,exports){
(function (process){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function isAbsolutePath(e){return"string"==typeof e&&"/"===e.charAt(0)}function ensureSlash(){var e=_DOMUtils.getHashPath();return isAbsolutePath(e)?!0:(_DOMUtils.replaceHashPath("/"+e),!1)}function addQueryStringValueToPath(e,t,n){return e+(-1===e.indexOf("?")?"?":"&")+(t+"="+n)}function stripQueryStringValueFromPath(e,t){return e.replace(new RegExp("[?&]?"+t+"=[a-zA-Z0-9]+"),"")}function getQueryStringValueFromPath(e,t){var n=e.match(new RegExp("\\?.*?\\b"+t+"=(.+?)\\b"));return n&&n[1]}function createHashHistory(){function e(){var e=_DOMUtils.getHashPath(),t=void 0,n=void 0;p?(t=getQueryStringValueFromPath(e,p),e=stripQueryStringValueFromPath(e,p),t?n=_DOMStateStorage.readState(t):(n=null,t=f.createKey(),_DOMUtils.replaceHashPath(addQueryStringValueToPath(e,p,t)))):t=n=null;var r=_PathUtils.parsePath(e);return f.createLocation(_extends({},r,{state:n}),void 0,t)}function t(t){function n(){ensureSlash()&&r(e())}var r=t.transitionTo;return ensureSlash(),_DOMUtils.addEventListener(window,"hashchange",n),function(){_DOMUtils.removeEventListener(window,"hashchange",n)}}function n(e){var t=e.basename,n=e.pathname,r=e.search,a=e.state,i=e.action,o=e.key;if(i!==_Actions.POP){var u=(t||"")+n+r;p?(u=addQueryStringValueToPath(u,p,o),_DOMStateStorage.saveState(o,a)):e.key=e.state=null;var s=_DOMUtils.getHashPath();i===_Actions.PUSH?s!==u?window.location.hash=u:"production"!==process.env.NODE_ENV?_warning2["default"](!1,"You cannot PUSH the same path using hash history"):void 0:s!==u&&_DOMUtils.replaceHashPath(u)}}function r(e){1===++v&&(g=t(f));var n=f.listenBefore(e);return function(){n(),0===--v&&g()}}function a(e){1===++v&&(g=t(f));var n=f.listen(e);return function(){n(),0===--v&&g()}}function i(e){"production"!==process.env.NODE_ENV?_warning2["default"](p||null==e.state,"You cannot use state without a queryKey it will be dropped"):void 0,f.push(e)}function o(e){"production"!==process.env.NODE_ENV?_warning2["default"](p||null==e.state,"You cannot use state without a queryKey it will be dropped"):void 0,f.replace(e)}function u(e){"production"!==process.env.NODE_ENV?_warning2["default"](y,"Hash history go(n) causes a full page reload in this browser"):void 0,f.go(e)}function s(e){return"#"+f.createHref(e)}function l(e){1===++v&&(g=t(f)),f.registerTransitionHook(e)}function c(e){f.unregisterTransitionHook(e),0===--v&&g()}function h(e,t){"production"!==process.env.NODE_ENV?_warning2["default"](p||null==e,"You cannot use state without a queryKey it will be dropped"):void 0,f.pushState(e,t)}function d(e,t){"production"!==process.env.NODE_ENV?_warning2["default"](p||null==e,"You cannot use state without a queryKey it will be dropped"):void 0,f.replaceState(e,t)}var _=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];_ExecutionEnvironment.canUseDOM?void 0:"production"!==process.env.NODE_ENV?_invariant2["default"](!1,"Hash history needs a DOM"):_invariant2["default"](!1);var p=_.queryKey;(void 0===p||p)&&(p="string"==typeof p?p:DefaultQueryKey);var f=_createDOMHistory2["default"](_extends({},_,{getCurrentLocation:e,finishTransition:n,saveState:_DOMStateStorage.saveState})),v=0,g=void 0,y=_DOMUtils.supportsGoWithoutReloadUsingHash();return _extends({},f,{listenBefore:r,listen:a,push:i,replace:o,go:u,createHref:s,registerTransitionHook:l,unregisterTransitionHook:c,pushState:h,replaceState:d})}exports.__esModule=!0;var _extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},_warning=require("warning"),_warning2=_interopRequireDefault(_warning),_invariant=require("invariant"),_invariant2=_interopRequireDefault(_invariant),_Actions=require("./Actions"),_PathUtils=require("./PathUtils"),_ExecutionEnvironment=require("./ExecutionEnvironment"),_DOMUtils=require("./DOMUtils"),_DOMStateStorage=require("./DOMStateStorage"),_createDOMHistory=require("./createDOMHistory"),_createDOMHistory2=_interopRequireDefault(_createDOMHistory),DefaultQueryKey="_k";exports["default"]=createHashHistory,module.exports=exports["default"];

}).call(this,require('_process'))

},{"./Actions":34,"./DOMStateStorage":36,"./DOMUtils":37,"./ExecutionEnvironment":38,"./PathUtils":39,"./createDOMHistory":41,"_process":15,"invariant":57,"warning":103}],43:[function(require,module,exports){
(function (process){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function createRandomKey(e){return Math.random().toString(36).substr(2,e)}function locationsAreEqual(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.key===t.key&&_deepEqual2["default"](e.state,t.state)}function createHistory(){function e(e){return T.push(e),function(){T=T.filter(function(t){return t!==e})}}function t(){return R&&R.action===_Actions.POP?U.indexOf(R.key):O?U.indexOf(O.key):-1}function n(e){var n=t();O=e,O.action===_Actions.PUSH?U=[].concat(U.slice(0,n+1),[O.key]):O.action===_Actions.REPLACE&&(U[n]=O.key),m.forEach(function(e){e(O)})}function r(e){if(m.push(e),O)e(O);else{var t=P();U=[t.key],n(t)}return function(){m=m.filter(function(t){return t!==e})}}function i(e,t){_AsyncUtils.loopAsync(T.length,function(t,n,r){_runTransitionHook2["default"](T[t],e,function(e){null!=e?r(e):n()})},function(e){x&&"string"==typeof e?x(e,function(e){t(e!==!1)}):t(e!==!1)})}function a(e){O&&locationsAreEqual(O,e)||(R=e,i(e,function(t){if(R===e)if(t){if(e.action===_Actions.PUSH){var r=d(O),i=d(e);i===r&&_deepEqual2["default"](O.state,e.state)&&(e.action=_Actions.REPLACE)}A(e)!==!1&&n(e)}else if(O&&e.action===_Actions.POP){var a=U.indexOf(O.key),o=U.indexOf(e.key);-1!==a&&-1!==o&&H(a-o)}}))}function o(e){a(p(e,_Actions.PUSH,f()))}function u(e){a(p(e,_Actions.REPLACE,f()))}function s(){H(-1)}function c(){H(1)}function f(){return createRandomKey(L)}function d(e){if(null==e||"string"==typeof e)return e;var t=e.pathname,n=e.search,r=e.hash,i=t;return n&&(i+=n),r&&(i+=r),i}function l(e){return d(e)}function p(e,t){var n=arguments.length<=2||void 0===arguments[2]?f():arguments[2];return"object"==typeof t&&("production"!==process.env.NODE_ENV?_warning2["default"](!1,"The state (2nd) argument to history.createLocation is deprecated; use a location descriptor instead"):void 0,"string"==typeof e&&(e=_PathUtils.parsePath(e)),e=_extends({},e,{state:t}),t=n,n=arguments[3]||f()),_createLocation3["default"](e,t,n)}function _(e){O?(h(O,e),n(O)):h(P(),e)}function h(e,t){e.state=_extends({},e.state,t),E(e.key,e.state)}function y(e){-1===T.indexOf(e)&&T.push(e)}function g(e){T=T.filter(function(t){return t!==e})}function k(e,t){"string"==typeof t&&(t=_PathUtils.parsePath(t)),o(_extends({state:e},t))}function q(e,t){"string"==typeof t&&(t=_PathUtils.parsePath(t)),u(_extends({state:e},t))}var v=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],P=v.getCurrentLocation,A=v.finishTransition,E=v.saveState,H=v.go,x=v.getUserConfirmation,L=v.keyLength;"number"!=typeof L&&(L=DefaultKeyLength);var T=[],U=[],m=[],O=void 0,R=void 0;return{listenBefore:e,listen:r,transitionTo:a,push:o,replace:u,go:H,goBack:s,goForward:c,createKey:f,createPath:d,createHref:l,createLocation:p,setState:_deprecate2["default"](_,"setState is deprecated; use location.key to save state instead"),registerTransitionHook:_deprecate2["default"](y,"registerTransitionHook is deprecated; use listenBefore instead"),unregisterTransitionHook:_deprecate2["default"](g,"unregisterTransitionHook is deprecated; use the callback returned from listenBefore instead"),pushState:_deprecate2["default"](k,"pushState is deprecated; use push instead"),replaceState:_deprecate2["default"](q,"replaceState is deprecated; use replace instead")}}exports.__esModule=!0;var _extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},_warning=require("warning"),_warning2=_interopRequireDefault(_warning),_deepEqual=require("deep-equal"),_deepEqual2=_interopRequireDefault(_deepEqual),_PathUtils=require("./PathUtils"),_AsyncUtils=require("./AsyncUtils"),_Actions=require("./Actions"),_createLocation2=require("./createLocation"),_createLocation3=_interopRequireDefault(_createLocation2),_runTransitionHook=require("./runTransitionHook"),_runTransitionHook2=_interopRequireDefault(_runTransitionHook),_deprecate=require("./deprecate"),_deprecate2=_interopRequireDefault(_deprecate),DefaultKeyLength=6;exports["default"]=createHistory,module.exports=exports["default"];

}).call(this,require('_process'))

},{"./Actions":34,"./AsyncUtils":35,"./PathUtils":39,"./createLocation":44,"./deprecate":46,"./runTransitionHook":50,"_process":15,"deep-equal":28,"warning":103}],44:[function(require,module,exports){
(function (process){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function createLocation(){var e=arguments.length<=0||void 0===arguments[0]?"/":arguments[0],t=arguments.length<=1||void 0===arguments[1]?_Actions.POP:arguments[1],n=arguments.length<=2||void 0===arguments[2]?null:arguments[2],r=arguments.length<=3||void 0===arguments[3]?null:arguments[3];"string"==typeof e&&(e=_PathUtils.parsePath(e)),"object"==typeof t&&("production"!==process.env.NODE_ENV?_warning2["default"](!1,"The state (2nd) argument to createLocation is deprecated; use a location descriptor instead"):void 0,e=_extends({},e,{state:t}),t=n||_Actions.POP,n=r);var a=e.pathname||"/",o=e.search||"",i=e.hash||"",s=e.state||null;return{pathname:a,search:o,hash:i,state:s,action:t,key:n}}exports.__esModule=!0;var _extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},_warning=require("warning"),_warning2=_interopRequireDefault(_warning),_Actions=require("./Actions"),_PathUtils=require("./PathUtils");exports["default"]=createLocation,module.exports=exports["default"];

}).call(this,require('_process'))

},{"./Actions":34,"./PathUtils":39,"_process":15,"warning":103}],45:[function(require,module,exports){
(function (process){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function createStateStorage(e){return e.filter(function(e){return e.state}).reduce(function(e,t){return e[t.key]=t.state,e},{})}function createMemoryHistory(){function e(e,t){_[e]=t}function t(e){return _[e]}function r(){var e=c[f],r=e.basename,n=e.pathname,a=e.search,i=(r||"")+n+(a||""),o=void 0,u=void 0;e.key?(o=e.key,u=t(o)):(o=s.createKey(),u=null,e.key=o);var _=_PathUtils.parsePath(i);return s.createLocation(_extends({},_,{state:u}),void 0,o)}function n(e){var t=f+e;return t>=0&&t<c.length}function a(e){if(e){if(!n(e))return void("production"!==process.env.NODE_ENV?_warning2["default"](!1,"Cannot go(%s) there is not enough history",e):void 0);f+=e;var t=r();s.transitionTo(_extends({},t,{action:_Actions.POP}))}}function i(t){switch(t.action){case _Actions.PUSH:f+=1,f<c.length&&c.splice(f),c.push(t),e(t.key,t.state);break;case _Actions.REPLACE:c[f]=t,e(t.key,t.state)}}var o=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];Array.isArray(o)?o={entries:o}:"string"==typeof o&&(o={entries:[o]});var s=_createHistory2["default"](_extends({},o,{getCurrentLocation:r,finishTransition:i,saveState:e,go:a})),u=o,c=u.entries,f=u.current;"string"==typeof c?c=[c]:Array.isArray(c)||(c=["/"]),c=c.map(function(e){var t=s.createKey();return"string"==typeof e?{pathname:e,key:t}:"object"==typeof e&&e?_extends({},e,{key:t}):void("production"!==process.env.NODE_ENV?_invariant2["default"](!1,"Unable to create history entry from %s",e):_invariant2["default"](!1))}),null==f?f=c.length-1:f>=0&&f<c.length?void 0:"production"!==process.env.NODE_ENV?_invariant2["default"](!1,"Current index must be >= 0 and < %s, was %s",c.length,f):_invariant2["default"](!1);var _=createStateStorage(c);return s}exports.__esModule=!0;var _extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},_warning=require("warning"),_warning2=_interopRequireDefault(_warning),_invariant=require("invariant"),_invariant2=_interopRequireDefault(_invariant),_PathUtils=require("./PathUtils"),_Actions=require("./Actions"),_createHistory=require("./createHistory"),_createHistory2=_interopRequireDefault(_createHistory);exports["default"]=createMemoryHistory,module.exports=exports["default"];

}).call(this,require('_process'))

},{"./Actions":34,"./PathUtils":39,"./createHistory":43,"_process":15,"invariant":57,"warning":103}],46:[function(require,module,exports){
(function (process){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function deprecate(e,r){return function(){return"production"!==process.env.NODE_ENV?_warning2["default"](!1,"[history] "+r):void 0,e.apply(this,arguments)}}exports.__esModule=!0;var _warning=require("warning"),_warning2=_interopRequireDefault(_warning);exports["default"]=deprecate,module.exports=exports["default"];

}).call(this,require('_process'))

},{"_process":15,"warning":103}],47:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}exports.__esModule=!0;var _deprecate=require("./deprecate"),_deprecate2=_interopRequireDefault(_deprecate),_useBeforeUnload=require("./useBeforeUnload"),_useBeforeUnload2=_interopRequireDefault(_useBeforeUnload);exports["default"]=_deprecate2["default"](_useBeforeUnload2["default"],"enableBeforeUnload is deprecated, use useBeforeUnload instead"),module.exports=exports["default"];

},{"./deprecate":46,"./useBeforeUnload":52}],48:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}exports.__esModule=!0;var _deprecate=require("./deprecate"),_deprecate2=_interopRequireDefault(_deprecate),_useQueries=require("./useQueries"),_useQueries2=_interopRequireDefault(_useQueries);exports["default"]=_deprecate2["default"](_useQueries2["default"],"enableQueries is deprecated, use useQueries instead"),module.exports=exports["default"];

},{"./deprecate":46,"./useQueries":53}],49:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}exports.__esModule=!0;var _deprecate=require("./deprecate"),_deprecate2=_interopRequireDefault(_deprecate),_createLocation2=require("./createLocation"),_createLocation3=_interopRequireDefault(_createLocation2),_createBrowserHistory=require("./createBrowserHistory"),_createBrowserHistory2=_interopRequireDefault(_createBrowserHistory);exports.createHistory=_createBrowserHistory2["default"];var _createHashHistory2=require("./createHashHistory"),_createHashHistory3=_interopRequireDefault(_createHashHistory2);exports.createHashHistory=_createHashHistory3["default"];var _createMemoryHistory2=require("./createMemoryHistory"),_createMemoryHistory3=_interopRequireDefault(_createMemoryHistory2);exports.createMemoryHistory=_createMemoryHistory3["default"];var _useBasename2=require("./useBasename"),_useBasename3=_interopRequireDefault(_useBasename2);exports.useBasename=_useBasename3["default"];var _useBeforeUnload2=require("./useBeforeUnload"),_useBeforeUnload3=_interopRequireDefault(_useBeforeUnload2);exports.useBeforeUnload=_useBeforeUnload3["default"];var _useQueries2=require("./useQueries"),_useQueries3=_interopRequireDefault(_useQueries2);exports.useQueries=_useQueries3["default"];var _Actions2=require("./Actions"),_Actions3=_interopRequireDefault(_Actions2);exports.Actions=_Actions3["default"];var _enableBeforeUnload2=require("./enableBeforeUnload"),_enableBeforeUnload3=_interopRequireDefault(_enableBeforeUnload2);exports.enableBeforeUnload=_enableBeforeUnload3["default"];var _enableQueries2=require("./enableQueries"),_enableQueries3=_interopRequireDefault(_enableQueries2);exports.enableQueries=_enableQueries3["default"];var createLocation=_deprecate2["default"](_createLocation3["default"],"Using createLocation without a history instance is deprecated; please use history.createLocation instead");exports.createLocation=createLocation;

},{"./Actions":34,"./createBrowserHistory":40,"./createHashHistory":42,"./createLocation":44,"./createMemoryHistory":45,"./deprecate":46,"./enableBeforeUnload":47,"./enableQueries":48,"./useBasename":51,"./useBeforeUnload":52,"./useQueries":53}],50:[function(require,module,exports){
(function (process){
"use strict";function _interopRequireDefault(n){return n&&n.__esModule?n:{"default":n}}function runTransitionHook(n,e,r){var t=n(e,r);n.length<2?r(t):"production"!==process.env.NODE_ENV?_warning2["default"](void 0===t,'You should not "return" in a transition hook with a callback argument; call the callback instead'):void 0}exports.__esModule=!0;var _warning=require("warning"),_warning2=_interopRequireDefault(_warning);exports["default"]=runTransitionHook,module.exports=exports["default"];

}).call(this,require('_process'))

},{"_process":15,"warning":103}],51:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function useBasename(e){return function(){function t(e){return d&&null==e.basename&&(0===e.pathname.indexOf(d)?(e.pathname=e.pathname.substring(d.length),e.basename=d,""===e.pathname&&(e.pathname="/")):e.basename=""),e}function n(e){if(!d)return e;"string"==typeof e&&(e=_PathUtils.parsePath(e));var t=e.pathname,n="/"===d.slice(-1)?d:d+"/",r="/"===t.charAt(0)?t.slice(1):t,a=n+r;return _extends({},e,{pathname:a})}function r(e){return h.listenBefore(function(n,r){_runTransitionHook2["default"](e,t(n),r)})}function a(e){return h.listen(function(n){e(t(n))})}function i(e){h.push(n(e))}function u(e){h.replace(n(e))}function o(e){return h.createPath(n(e))}function s(e){return h.createHref(n(e))}function c(e){for(var r=arguments.length,a=Array(r>1?r-1:0),i=1;r>i;i++)a[i-1]=arguments[i];return t(h.createLocation.apply(h,[n(e)].concat(a)))}function p(e,t){"string"==typeof t&&(t=_PathUtils.parsePath(t)),i(_extends({state:e},t))}function l(e,t){"string"==typeof t&&(t=_PathUtils.parsePath(t)),u(_extends({state:e},t))}var f=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],h=e(f),d=f.basename;if(null==d&&_ExecutionEnvironment.canUseDOM){var _=document.getElementsByTagName("base")[0];_&&(d=_PathUtils.extractPath(_.href))}return _extends({},h,{listenBefore:r,listen:a,push:i,replace:u,createPath:o,createHref:s,createLocation:c,pushState:_deprecate2["default"](p,"pushState is deprecated; use push instead"),replaceState:_deprecate2["default"](l,"replaceState is deprecated; use replace instead")})}}exports.__esModule=!0;var _extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},_ExecutionEnvironment=require("./ExecutionEnvironment"),_PathUtils=require("./PathUtils"),_runTransitionHook=require("./runTransitionHook"),_runTransitionHook2=_interopRequireDefault(_runTransitionHook),_deprecate=require("./deprecate"),_deprecate2=_interopRequireDefault(_deprecate);exports["default"]=useBasename,module.exports=exports["default"];

},{"./ExecutionEnvironment":38,"./PathUtils":39,"./deprecate":46,"./runTransitionHook":50}],52:[function(require,module,exports){
(function (process){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function startBeforeUnloadListener(e){function n(n){var r=e();return"string"==typeof r?((n||window.event).returnValue=r,r):void 0}return _DOMUtils.addEventListener(window,"beforeunload",n),function(){_DOMUtils.removeEventListener(window,"beforeunload",n)}}function useBeforeUnload(e){return function(n){function r(){for(var e=void 0,n=0,r=l.length;null==e&&r>n;++n)e=l[n].call();return e}function t(e){return l.push(e),1===l.length&&(_ExecutionEnvironment.canUseDOM?a=startBeforeUnloadListener(r):"production"!==process.env.NODE_ENV?_warning2["default"](!1,"listenBeforeUnload only works in DOM environments"):void 0),function(){l=l.filter(function(n){return n!==e}),0===l.length&&a&&(a(),a=null)}}function o(e){_ExecutionEnvironment.canUseDOM&&-1===l.indexOf(e)&&(l.push(e),1===l.length&&(a=startBeforeUnloadListener(r)))}function i(e){l.length>0&&(l=l.filter(function(n){return n!==e}),0===l.length&&a())}var u=e(n),a=void 0,l=[];return _extends({},u,{listenBeforeUnload:t,registerBeforeUnloadHook:_deprecate2["default"](o,"registerBeforeUnloadHook is deprecated; use listenBeforeUnload instead"),unregisterBeforeUnloadHook:_deprecate2["default"](i,"unregisterBeforeUnloadHook is deprecated; use the callback returned from listenBeforeUnload instead")})}}exports.__esModule=!0;var _extends=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var r=arguments[n];for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])}return e},_warning=require("warning"),_warning2=_interopRequireDefault(_warning),_ExecutionEnvironment=require("./ExecutionEnvironment"),_DOMUtils=require("./DOMUtils"),_deprecate=require("./deprecate"),_deprecate2=_interopRequireDefault(_deprecate);exports["default"]=useBeforeUnload,module.exports=exports["default"];

}).call(this,require('_process'))

},{"./DOMUtils":37,"./ExecutionEnvironment":38,"./deprecate":46,"_process":15,"warning":103}],53:[function(require,module,exports){
(function (process){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function defaultStringifyQuery(e){return _queryString.stringify(e).replace(/%20/g,"+")}function isNestedObject(e){for(var r in e)if(e.hasOwnProperty(r)&&"object"==typeof e[r]&&!Array.isArray(e[r])&&null!==e[r])return!0;return!1}function useQueries(e){return function(){function r(e){if(null==e.query){var r=e.search;e.query=_(r.substring(1)),e[SEARCH_BASE_KEY]={search:r,searchBase:""}}return e}function t(e,r){var t,n=e[SEARCH_BASE_KEY],a=r?y(r):"";if(!n&&!a)return e;"production"!==process.env.NODE_ENV?_warning2["default"](y!==defaultStringifyQuery||!isNestedObject(r),"useQueries does not stringify nested query objects by default; use a custom stringifyQuery function"):void 0,"string"==typeof e&&(e=_PathUtils.parsePath(e));var u=void 0;u=n&&e.search===n.search?n.searchBase:e.search||"";var i=u;return a&&(i+=(i?"&":"?")+a),_extends({},e,(t={search:i},t[SEARCH_BASE_KEY]={search:i,searchBase:u},t))}function n(e){return l.listenBefore(function(t,n){_runTransitionHook2["default"](e,r(t),n)})}function a(e){return l.listen(function(t){e(r(t))})}function u(e){l.push(t(e,e.query))}function i(e){l.replace(t(e,e.query))}function s(e,r){return"production"!==process.env.NODE_ENV?_warning2["default"](!r,"the query argument to createPath is deprecated; use a location descriptor instead"):void 0,l.createPath(t(e,r||e.query))}function o(e,r){return"production"!==process.env.NODE_ENV?_warning2["default"](!r,"the query argument to createHref is deprecated; use a location descriptor instead"):void 0,l.createHref(t(e,r||e.query))}function c(e){for(var n=arguments.length,a=Array(n>1?n-1:0),u=1;n>u;u++)a[u-1]=arguments[u];var i=l.createLocation.apply(l,[t(e,e.query)].concat(a));return e.query&&(i.query=e.query),r(i)}function f(e,r,t){"string"==typeof r&&(r=_PathUtils.parsePath(r)),u(_extends({state:e},r,{query:t}))}function d(e,r,t){"string"==typeof r&&(r=_PathUtils.parsePath(r)),i(_extends({state:e},r,{query:t}))}var p=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],l=e(p),y=p.stringifyQuery,_=p.parseQueryString;return"function"!=typeof y&&(y=defaultStringifyQuery),"function"!=typeof _&&(_=defaultParseQueryString),_extends({},l,{listenBefore:n,listen:a,push:u,replace:i,createPath:s,createHref:o,createLocation:c,pushState:_deprecate2["default"](f,"pushState is deprecated; use push instead"),replaceState:_deprecate2["default"](d,"replaceState is deprecated; use replace instead")})}}exports.__esModule=!0;var _extends=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},_warning=require("warning"),_warning2=_interopRequireDefault(_warning),_queryString=require("query-string"),_runTransitionHook=require("./runTransitionHook"),_runTransitionHook2=_interopRequireDefault(_runTransitionHook),_PathUtils=require("./PathUtils"),_deprecate=require("./deprecate"),_deprecate2=_interopRequireDefault(_deprecate),SEARCH_BASE_KEY="$searchBase",defaultParseQueryString=_queryString.parse;exports["default"]=useQueries,module.exports=exports["default"];

}).call(this,require('_process'))

},{"./PathUtils":39,"./deprecate":46,"./runTransitionHook":50,"_process":15,"query-string":62,"warning":103}],54:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var isValidString=function(t){return"string"==typeof t&&t.length>0},startsWith=function(t,e){return t[0]===e},isSelector=function(t){return isValidString(t)&&(startsWith(t,".")||startsWith(t,"#"))},node=function(t){return function(e){return function(r){for(var o=arguments.length,i=Array(o>1?o-1:0),n=1;o>n;n++)i[n-1]=arguments[n];return isSelector(r)?t.apply(void 0,[e+r].concat(i)):t.apply(void 0,[e,r].concat(i))}}},TAG_NAMES=["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","dd","del","dfn","dir","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","menu","meta","nav","noscript","object","ol","optgroup","option","p","param","pre","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","sup","table","tbody","td","textarea","tfoot","th","thead","title","tr","u","ul","video"];exports["default"]=function(t){var e=node(t),r={TAG_NAMES:TAG_NAMES,isSelector:isSelector,createTag:e};return TAG_NAMES.forEach(function(t){r[t]=e(t)}),r},module.exports=exports["default"];

},{}],55:[function(require,module,exports){
(function (global){
"use strict";function Individual(o,n){return o in root?root[o]:(root[o]=n,n)}var root="undefined"!=typeof window?window:"undefined"!=typeof global?global:{};module.exports=Individual;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],56:[function(require,module,exports){
"use strict";function OneVersion(n,e,i){var r="__INDIVIDUAL_ONE_VERSION_"+n,o=r+"_ENFORCE_SINGLETON",a=Individual(o,e);if(a!==e)throw new Error("Can only have one copy of "+n+".\nYou already have version "+a+" installed.\nThis means you cannot install version "+e);return Individual(r,i)}var Individual=require("./index.js");module.exports=OneVersion;

},{"./index.js":55}],57:[function(require,module,exports){
(function (process){
"use strict";var invariant=function(r,e,n,i,o,a,t,s){if("production"!==process.env.NODE_ENV&&void 0===e)throw new Error("invariant requires an error message argument");if(!r){var u;if(void 0===e)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var v=[n,i,o,a,t,s],d=0;u=new Error(e.replace(/%s/g,function(){return v[d++]})),u.name="Invariant Violation"}throw u.framesToPop=1,u}};module.exports=invariant;

}).call(this,require('_process'))

},{"_process":15}],58:[function(require,module,exports){
"use strict";module.exports=function(t){return"object"==typeof t&&null!==t};

},{}],59:[function(require,module,exports){
var LANGUAGES={tr:{regexp:/\u0130|\u0049|\u0049\u0307/g,map:{"İ":"i",I:"ı","İ":"i"}},az:{regexp:/[\u0130]/g,map:{"İ":"i",I:"ı","İ":"i"}},lt:{regexp:/[\u0049\u004A\u012E\u00CC\u00CD\u0128]/g,map:{I:"i̇",J:"j̇","Į":"į̇","Ì":"i̇̀","Í":"i̇́","Ĩ":"i̇̃"}}};module.exports=function(u,e){var r=LANGUAGES[e];return u=null==u?"":String(u),r&&(u=u.replace(r.regexp,function(u){return r.map[u]})),u.toLowerCase()};

},{}],60:[function(require,module,exports){
"use strict";function match(e,t){if(vendor)return vendor.call(e,t);for(var o=e.parentNode.querySelectorAll(t),r=0;r<o.length;r++)if(o[r]==e)return!0;return!1}var proto=Element.prototype,vendor=proto.matches||proto.matchesSelector||proto.webkitMatchesSelector||proto.mozMatchesSelector||proto.msMatchesSelector||proto.oMatchesSelector;module.exports=match;

},{}],61:[function(require,module,exports){
var sentenceCase=require("sentence-case");module.exports=function(e,n){return sentenceCase(e,n,"-")};

},{"sentence-case":65}],62:[function(require,module,exports){
"use strict";var strictUriEncode=require("strict-uri-encode");exports.extract=function(r){return r.split("?")[1]||""},exports.parse=function(r){return"string"!=typeof r?{}:(r=r.trim().replace(/^(\?|#|&)/,""),r?r.split("&").reduce(function(r,t){var e=t.replace(/\+/g," ").split("="),n=e.shift(),i=e.length>0?e.join("="):void 0;return n=decodeURIComponent(n),i=void 0===i?null:decodeURIComponent(i),r.hasOwnProperty(n)?Array.isArray(r[n])?r[n].push(i):r[n]=[r[n],i]:r[n]=i,r},{}):{})},exports.stringify=function(r){return r?Object.keys(r).sort().map(function(t){var e=r[t];return void 0===e?"":null===e?t:Array.isArray(e)?e.slice().sort().map(function(r){return strictUriEncode(t)+"="+strictUriEncode(r)}).join("&"):strictUriEncode(t)+"="+strictUriEncode(e)}).filter(function(r){return r.length>0}).join("&"):""};

},{"strict-uri-encode":69}],63:[function(require,module,exports){
module.exports=function(l,n,e){for(var r=0,t=l.length,o=3==arguments.length?e:l[r++];t>r;)o=n.call(null,o,l[r],++r,l);return o};

},{}],64:[function(require,module,exports){
(function (process,global){
(function(t){function e(t){return t&&t.Object===Object?t:null}function n(t){for(var e=[],n=0,r=t.length;r>n;n++)e.push(t[n]);return e}function r(t){return function(){try{return t.apply(this,arguments)}catch(e){return Xt.e=e,Xt}}}function i(t){throw t}function o(t,e){if(Zt&&e.stack&&"object"==typeof t&&null!==t&&t.stack&&-1===t.stack.indexOf(re)){for(var n=[],r=e;r;r=r.source)r.stack&&n.unshift(r.stack);n.unshift(t.stack);var i=n.join("\n"+re+"\n");t.stack=s(i)}}function s(t){for(var e=t.split("\n"),n=[],r=0,i=e.length;i>r;r++){var o=e[r];u(o)||c(o)||!o||n.push(o)}return n.join("\n")}function u(t){var e=a(t);if(!e)return!1;var n=e[0],r=e[1];return n===ee&&r>=ne&&Fs>=r}function c(t){return-1!==t.indexOf("(module.js:")||-1!==t.indexOf("(node.js:")}function h(){if(Zt)try{throw new Error}catch(t){var e=t.stack.split("\n"),n=e[0].indexOf("@")>0?e[1]:e[2],r=a(n);if(!r)return;return ee=r[0],r[1]}}function a(t){var e=/at .+ \((.+):(\d+):(?:\d+)\)$/.exec(t);if(e)return[e[1],Number(e[2])];var n=/at ([^ ]+):(\d+):(?:\d+)$/.exec(t);if(n)return[n[1],Number(n[2])];var r=/.*@(.+):(\d+)$/.exec(t);return r?[r[1],Number(r[2])]:void 0}function p(e,n,r,i,o,s){var u=Ue(e),c=u.length,h=Ue(n),a=h.length;if(c!==a&&!i)return!1;for(var p,f=c;f--;)if(p=u[f],!(i?p in n:ze.call(n,p)))return!1;for(var l=i;++f<c;){p=u[f];var d,_=e[p],b=n[p];if(!(d===t?r(_,b,i,o,s):d))return!1;l||(l="constructor"===p)}if(!l){var v=e.constructor,y=n.constructor;if(v!==y&&"constructor"in e&&"constructor"in n&&!("function"==typeof v&&v instanceof v&&"function"==typeof y&&y instanceof y))return!1}return!0}function f(t,e,n){switch(n){case ye:case we:return+t===+e;case me:return t.name===e.name&&t.message===e.message;case ge:return t!==+t?e!==+e:t===+e;case Ne:case Ae:return t===e+""}return!1}function l(t){return!!t&&"object"==typeof t}function d(t){return"number"==typeof t&&t>-1&&t%1===0&&Be>=t}function _(t){return l(t)&&d(t.length)&&!!Ve[Ie.call(t)]}function b(t,e){for(var n=-1,r=t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}function v(e,n,r,i,o,s){var u=-1,c=e.length,h=n.length;if(c!==h&&!(i&&h>c))return!1;for(;++u<c;){var a,p=e[u],f=n[u];if(a!==t){if(a)continue;return!1}if(i){if(!b(n,function(t){return p===t||r(p,t,i,o,s)}))return!1}else if(p!==f&&!r(p,f,i,o,s))return!1}return!0}function y(t,e,n,r,i,o){var s=He(t),u=He(e),c=ve,h=ve;s||(c=Ie.call(t),c===be?c=xe:c!==xe&&(s=_(t))),u||(h=Ie.call(e),h===be&&(h=xe));var a=c===xe&&!Ke(t),l=h===xe&&!Ke(e),d=c===h;if(d&&!s&&!a)return f(t,e,c);if(!r){var b=a&&ze.call(t,"__wrapped__"),y=l&&ze.call(e,"__wrapped__");if(b||y)return n(b?t.value():t,y?e.value():e,r,i,o)}if(!d)return!1;i||(i=[]),o||(o=[]);for(var w=i.length;w--;)if(i[w]===t)return o[w]===e;i.push(t),o.push(e);var m=(s?v:p)(t,e,n,r,i,o);return i.pop(),o.pop(),m}function w(t,e,n,r,i){return t===e?!0:null==t||null==e||!et(t)&&!l(e)?t!==t&&e!==e:y(t,e,w,n,r,i)}function m(t,e){for(var n=new Array(t),r=0;t>r;r++)n[r]=e();return n}function E(t,e){this.id=t,this.value=e}function C(t,e){this.scheduler=t,this.disposable=e,this.isDisposed=!1}function g(t,e){e.isDisposed||(e.isDisposed=!0,e.disposable.dispose())}function x(t){this._s=t,this.isDisposed=!1}function N(t){this._s=t}function D(t){this._s=t,this._l=t.length,this._i=0}function A(t){this._a=t}function S(t){this._a=t,this._l=j(t),this._i=0}function O(t){return"number"==typeof t&&zt.isFinite(t)}function q(e){var n,r=e[ae];if(!r&&"string"==typeof e)return n=new N(e),n[ae]();if(!r&&e.length!==t)return n=new A(e),n[ae]();if(!r)throw new TypeError("Object is not iterable");return e[ae]()}function k(t){var e=+t;return 0===e?e:isNaN(e)?e:0>e?-1:1}function j(t){var e=+t.length;return isNaN(e)?0:0!==e&&O(e)?(e=k(e)*Math.floor(Math.abs(e)),0>=e?0:e>fr?fr:e):e}function F(t,e){return bn(t)||(t=gn),new dr(e,t)}function R(t,e){this.observer=t,this.parent=e}function T(t,e){return t.amb(e)}function M(){return!1}function P(){for(var t=arguments.length,e=new Array(t),n=0;t>n;n++)e[n]=arguments[n];return e}function M(){return!1}function P(){for(var t=arguments.length,e=new Array(t),n=0;t>n;n++)e[n]=arguments[n];return e}function M(){return!1}function L(){return[]}function M(){return!1}function L(){return[]}function P(){for(var t=arguments.length,e=new Array(t),n=0;t>n;n++)e[n]=arguments[n];return e}function V(t){return function(e){return t.subscribe(e)}}function W(t){return t.toArray()}function z(t){return t.length>0}function I(t){return{"@@iterator":function(){return{next:function(){return{done:!1,value:t}}}}}}function I(t){return{"@@iterator":function(){return{next:function(){return{done:!1,value:t}}}}}}function B(t,e,n){var r=de(e,n,3);return t.map(function(e,n){var i=r(e,n,t);return $t(i)&&(i=ir(i)),(le(i)||fe(i))&&(i=lr(i)),i}).concatAll()}function U(t,e,n){for(var r=0,i=t.length;i>r;r++)if(n(t[r],e))return r;return-1}function K(t){this.comparer=t,this.set=[]}function H(e,n){return function(r){for(var i=r,o=0;n>o;o++){var s=i[e[o]];if("undefined"==typeof s)return t;i=s}return i}}function J(t){if(0===t.length)throw new ie;return t[0]}function Q(t,e,n,r){var i=de(e,n,3);return new xs(function(e){return t.subscribe(new uo(e,t,i,r))},t)}function $(t){return t?Kn.isObservable(t)?t:$t(t)?Kn.fromPromise(t):tt(t)||Z(t)?vo.call(this,t):Gt(t)?Y.call(this,t):le(t)||fe(t)?G.call(this,t):et(t)?X.call(this,t):t:t}function G(t){return Kn.from(t).concatMap(function(t){return Kn.isObservable(t)||et(t)?$.call(null,t):It.Observable.just(t)}).toArray()}function X(e){function n(e,n){r[n]=t,o.push(e.map(function(t){r[n]=t}))}for(var r=new e.constructor,i=Object.keys(e),o=[],s=0,u=i.length;u>s;s++){var c=i[s],h=$.call(this,e[c]);h&&Kn.isObservable(h)?n(h,c):r[c]=e[c]}return Kn.forkJoin.apply(Kn,o).map(function(){return r})}function Y(t){var e=this;return new xs(function(n){t.call(e,function(){var t=arguments[0],e=arguments[1];if(t)return n.onError(t);if(arguments.length>2){for(var r=[],i=1,o=arguments.length;o>i;i++)r.push(arguments[i]);e=r}n.onNext(e),n.onCompleted()})})}function Z(t){return Gt(t.next)&&Gt(t["throw"])}function tt(t){var e=t.constructor;return e?"GeneratorFunction"===e.name||"GeneratorFunction"===e.displayName?!0:Z(e.prototype):!1}function et(t){return Object==t.constructor}function nt(t,e,n,r){var i=new Os;return r.push(rt(i,e,n)),t.apply(e,r),i.asObservable()}function rt(t,e,n){return function(){for(var r=arguments.length,i=new Array(r),o=0;r>o;o++)i[o]=arguments[o];if(Gt(n)){if(i=Yt(n).apply(e,i),i===Xt)return t.onError(i.e);t.onNext(i)}else i.length<=1?t.onNext(i[0]):t.onNext(i);t.onCompleted()}}function it(t,e,n,r){var i=new Os;return r.push(ot(i,e,n)),t.apply(e,r),i.asObservable()}function ot(t,e,n){return function(){var r=arguments[0];if(r)return t.onError(r);for(var i=arguments.length,o=[],s=1;i>s;s++)o[s-1]=arguments[s];if(Gt(n)){var o=Yt(n).apply(e,o);if(o===Xt)return t.onError(o.e);t.onNext(o)}else o.length<=1?t.onNext(o[0]):t.onNext(o);t.onCompleted()}}function st(t){return zt.StaticNodeList?t instanceof zt.StaticNodeList||t instanceof zt.NodeList:"[object NodeList]"===Object.prototype.toString.call(t)}function ut(t,e,n){this._e=t,this._n=e,this._fn=n,this._e.addEventListener(this._n,this._fn,!1),this.isDisposed=!1}function ct(t,e,n){var r=new Ze,i=Object.prototype.toString.call(t);if(st(t)||"[object HTMLCollection]"===i)for(var o=0,s=t.length;s>o;o++)r.add(ct(t.item(o),e,n));else t&&r.add(new ut(t,e,n));return r}function ht(t,e,n){return new xs(function(r){function i(t,e){if(h[e]=t,s[e]=!0,u||(u=s.every(Ut))){if(o)return r.onError(o);var i=Yt(n).apply(null,h);if(i===Xt)return r.onError(i.e);r.onNext(i)}c&&h[1]&&r.onCompleted()}var o,s=[!1,!1],u=!1,c=!1,h=new Array(2);return new an(t.subscribe(function(t){i(t,0)},function(t){h[1]?r.onError(t):o=t},function(){c=!0,h[1]&&r.onCompleted()}),e.subscribe(function(t){i(t,1)},function(t){r.onError(t)},function(){c=!0,i(!0,1)}))},t)}function W(t){return t.toArray()}function at(t,e){return t.groupJoin(this,e,ar,function(t,e){return e})}function pt(t){var e=this;return new xs(function(n){var r=new Ss,i=new Ze,o=new fn(i);return n.onNext(Ge(r,o)),i.add(e.subscribe(function(t){r.onNext(t)},function(t){r.onError(t),n.onError(t)},function(){r.onCompleted(),n.onCompleted()})),$t(t)&&(t=ir(t)),i.add(t.subscribe(function(t){r.onCompleted(),r=new Ss,n.onNext(Ge(r,o))},function(t){r.onError(t),n.onError(t)},function(){r.onCompleted(),n.onCompleted()})),o},e)}function ft(t){var e=this;return new xs(function(n){function r(){var e;try{e=t()}catch(o){return void n.onError(o)}$t(e)&&(e=ir(e));var c=new cn;i.setDisposable(c),c.setDisposable(e.take(1).subscribe(Bt,function(t){u.onError(t),n.onError(t)},function(){u.onCompleted(),u=new Ss,n.onNext(Ge(u,s)),r()}))}var i=new hn,o=new Ze(i),s=new fn(o),u=new Ss;return n.onNext(Ge(u,s)),o.add(e.subscribe(function(t){u.onNext(t)},function(t){u.onError(t),n.onError(t)},function(){u.onCompleted(),n.onCompleted()})),r(),s},e)}function lt(t,e){return new Ro(t,e)}function P(){for(var t=arguments.length,e=new Array(t),n=0;t>n;n++)e[n]=arguments[n];return e}function dt(t){this.patterns=t}function _t(t,e){this.expression=t,this.selector=e}function bt(t){return function(e){t.onError(e)}}function vt(t,e){return function(){var n=Yt(t.selector).apply(t,arguments);return n===Xt?e.onError(n.e):void e.onNext(n)}}function yt(t,e,n){var r=t.get(e);if(!r){var i=new Io(e,n);return t.set(e,i),i}return r}function wt(t,e,n){this.joinObserverArray=t,this.onNext=e,this.onCompleted=n,this.joinObservers=new zo;for(var r=0,i=this.joinObserverArray.length;i>r;r++){var o=this.joinObserverArray[r];this.joinObservers.set(o,o)}}function mt(t,e){return new Bo(t,e)}function Et(t,e,n){return new xs(function(r){var i=t,o=_n(e);return n.scheduleRecursiveFuture(0,i,function(t,e){if(o>0){var s=n.now();i=new Date(i.getTime()+o),i.getTime()<=s&&(i=new Date(s+o))}r.onNext(t),e(t+1,new Date(i))})})}function Ct(t,e,n){return t===e?new xs(function(t){return n.schedulePeriodic(0,e,function(e){return t.onNext(e),e+1})}):ur(function(){return Et(new Date(n.now()+t),e,n)})}function gt(t,e,n){return new xs(function(r){var i,o=!1,s=new hn,u=null,c=[],h=!1;return i=t.materialize().timestamp(n).subscribe(function(t){var i,a;"E"===t.value.kind?(c=[],c.push(t),u=t.value.error,a=!h):(c.push({value:t.value,timestamp:t.timestamp+e}),a=!o,o=!0),a&&(null!==u?r.onError(u):(i=new cn,s.setDisposable(i),i.setDisposable(n.scheduleRecursiveFuture(null,e,function(t,e){var i,s,a,p;if(null===u){h=!0;do a=null,c.length>0&&c[0].timestamp-n.now()<=0&&(a=c.shift().value),null!==a&&a.accept(r);while(null!==a);p=!1,s=0,c.length>0?(p=!0,s=Math.max(0,c[0].timestamp-n.now())):o=!1,i=u,h=!1,null!==i?r.onError(i):p&&e(null,s)}}))))}),new an(i,s)},t)}function xt(t,e,n){return ur(function(){return gt(t,e-n.now(),n)})}function Nt(t,e,n){var r,i;return Gt(e)?i=e:(r=e,i=n),new xs(function(e){function n(){c.setDisposable(t.subscribe(function(t){var n=Yt(i)(t);if(n===Xt)return e.onError(n.e);var r=new cn;s.add(r),r.setDisposable(n.subscribe(function(){e.onNext(t),s.remove(r),o()},function(t){e.onError(t)},function(){e.onNext(t),s.remove(r),o()}))},function(t){e.onError(t)},function(){u=!0,c.dispose(),o()}))}function o(){u&&0===s.length&&e.onCompleted()}var s=new Ze,u=!1,c=new hn;return r?c.setDisposable(r.subscribe(n,function(t){e.onError(t)},n)):n(),new an(c,s)},t)}function Dt(t,e){return new xs(function(n){var r,i=!1,o=new hn,s=0,u=t.subscribe(function(t){var u=Yt(e)(t);if(u===Xt)return n.onError(u.e);$t(u)&&(u=ir(u)),i=!0,r=t,s++;var c=s,h=new cn;o.setDisposable(h),h.setDisposable(u.subscribe(function(){i&&s===c&&n.onNext(r),i=!1,h.dispose()},function(t){n.onError(t)},function(){i&&s===c&&n.onNext(r),i=!1,h.dispose()}))},function(t){o.dispose(),n.onError(t),i=!1,s++},function(){o.dispose(),i&&n.onNext(r),n.onCompleted(),i=!1,s++});return new an(u,o)},t)}function W(t){return t.toArray()}function W(t){return t.toArray()}function At(t,e,n,r){return Gt(e)&&(r=n,n=e,e=wr()),Kn.isObservable(r)||(r=Nr(new ts)),new xs(function(i){function o(t){function e(){return p=n===a}var n=a,o=new cn;c.setDisposable(o),o.setDisposable(t.subscribe(function(){e()&&u.setDisposable(r.subscribe(i)),o.dispose()},function(t){e()&&i.onError(t)},function(){e()&&u.setDisposable(r.subscribe(i))}))}function s(){var t=!p;return t&&a++,t}var u=new hn,c=new hn,h=new cn;u.setDisposable(h);var a=0,p=!1;return o(e),h.setDisposable(t.subscribe(function(t){if(s()){i.onNext(t);var e=Yt(n)(t);if(e===Xt)return i.onError(e.e);o($t(e)?ir(e):e)}},function(t){s()&&i.onError(t)},function(){s()&&i.onCompleted()})),new an(u,c)},t)}function St(t,e,n,r){return bn(n)&&(r=n,n=Nr(new ts)),n instanceof Error&&(n=Nr(n)),bn(r)||(r=Sn),Kn.isObservable(n)||(n=Nr(new ts)),new xs(function(i){function o(){var t=s;a.setDisposable(r.scheduleFuture(null,e,function(){h=s===t,h&&($t(n)&&(n=ir(n)),c.setDisposable(n.subscribe(i)))}))}var s=0,u=new cn,c=new hn,h=!1,a=new hn;return c.setDisposable(u),o(),u.setDisposable(t.subscribe(function(t){h||(s++,i.onNext(t),o())},function(t){h||(s++,i.onError(t))},function(){h||(s++,i.onCompleted())})),new an(c,a)},t)}function Ot(t){return{"@@transducer/init":function(){return t},"@@transducer/step":function(t,e){return t.onNext(e)},"@@transducer/result":function(t){return t.onCompleted()}}}function qt(t){this.predicate=t}function kt(t){this.predicate=t}function jt(t,e){var n=this;this.scheduler=t,this.messages=e,this.subscriptions=[],this.observers=[];for(var r=0,i=this.messages.length;i>r;r++){var o=this.messages[r],s=o.value;!function(e){t.scheduleAbsolute(null,o.time,function(){for(var t=n.observers.slice(0),r=0,i=t.length;i>r;r++)e.accept(t[r]);return rn})}(s)}}var Ft={"function":!0,object:!0},Rt=Ft[typeof exports]&&exports&&!exports.nodeType?exports:null,Tt=Ft[typeof module]&&module&&!module.nodeType?module:null,Mt=e(Rt&&Tt&&"object"==typeof global&&global),Pt=e(Ft[typeof self]&&self),Lt=e(Ft[typeof window]&&window),Vt=Tt&&Tt.exports===Rt?Rt:null,Wt=e(Ft[typeof this]&&this),zt=Mt||Lt!==(Wt&&Wt.window)&&Lt||Pt||Wt||Function("return this")(),It={internals:{},config:{Promise:zt.Promise},helpers:{}},Bt=It.helpers.noop=function(){},Ut=It.helpers.identity=function(t){return t},Kt=It.helpers.defaultNow=Date.now,Ht=It.helpers.defaultComparer=function(t,e){return Je(t,e)},Jt=It.helpers.defaultSubComparer=function(t,e){return t>e?1:e>t?-1:0},Qt=(It.helpers.defaultKeySerializer=function(t){return t.toString()},It.helpers.defaultError=function(t){throw t}),$t=It.helpers.isPromise=function(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then},Gt=It.helpers.isFunction=function(){var t=function(t){return"function"==typeof t||!1};return t(/x/)&&(t=function(t){return"function"==typeof t&&"[object Function]"==toString.call(t)}),t}(),Xt={e:{}},Yt=It.internals.tryCatch=function(t){if(!Gt(t))throw new TypeError("fn must be a function");return r(t)};It.config.longStackSupport=!1;var Zt=!1,te=Yt(function(){throw new Error})();Zt=!!te.e&&!!te.e.stack;var ee,ne=h(),re="From previous event:",ie=It.EmptyError=function(){this.message="Sequence contains no elements.",Error.call(this)};ie.prototype=Object.create(Error.prototype),ie.prototype.name="EmptyError";var oe=It.ObjectDisposedError=function(){this.message="Object has been disposed",Error.call(this)};oe.prototype=Object.create(Error.prototype),oe.prototype.name="ObjectDisposedError";var se=It.ArgumentOutOfRangeError=function(){this.message="Argument out of range",Error.call(this)};se.prototype=Object.create(Error.prototype),se.prototype.name="ArgumentOutOfRangeError";var ue=It.NotSupportedError=function(t){this.message=t||"This operation is not supported",Error.call(this)};ue.prototype=Object.create(Error.prototype),ue.prototype.name="NotSupportedError";var ce=It.NotImplementedError=function(t){this.message=t||"This operation is not implemented",Error.call(this)};ce.prototype=Object.create(Error.prototype),ce.prototype.name="NotImplementedError";var he=It.helpers.notImplemented=function(){throw new ce},ae=(It.helpers.notSupported=function(){throw new ue},"function"==typeof Symbol&&Symbol.iterator||"_es6shim_iterator_");zt.Set&&"function"==typeof(new zt.Set)["@@iterator"]&&(ae="@@iterator");var pe=It.doneEnumerator={done:!0,value:t},fe=It.helpers.isIterable=function(e){return e&&e[ae]!==t},le=It.helpers.isArrayLike=function(e){return e&&e.length!==t};It.helpers.iterator=ae;var de=It.internals.bindCallback=function(t,e,n){if("undefined"==typeof e)return t;switch(n){case 0:return function(){return t.call(e)};case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}},_e=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],be=(_e.length,"[object Arguments]"),ve="[object Array]",ye="[object Boolean]",we="[object Date]",me="[object Error]",Ee="[object Function]",Ce="[object Map]",ge="[object Number]",xe="[object Object]",Ne="[object RegExp]",De="[object Set]",Ae="[object String]",Se="[object WeakMap]",Oe="[object ArrayBuffer]",qe="[object Float32Array]",ke="[object Float64Array]",je="[object Int8Array]",Fe="[object Int16Array]",Re="[object Int32Array]",Te="[object Uint8Array]",Me="[object Uint8ClampedArray]",Pe="[object Uint16Array]",Le="[object Uint32Array]",Ve={};Ve[qe]=Ve[ke]=Ve[je]=Ve[Fe]=Ve[Re]=Ve[Te]=Ve[Me]=Ve[Pe]=Ve[Le]=!0,Ve[be]=Ve[ve]=Ve[Oe]=Ve[ye]=Ve[we]=Ve[me]=Ve[Ee]=Ve[Ce]=Ve[ge]=Ve[xe]=Ve[Ne]=Ve[De]=Ve[Ae]=Ve[Se]=!1;var We=Object.prototype,ze=We.hasOwnProperty,Ie=We.toString,Be=Math.pow(2,53)-1,Ue=Object.keys||function(){var t=Object.prototype.hasOwnProperty,e=!{toString:null}.propertyIsEnumerable("toString"),n=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],r=n.length;return function(i){if("object"!=typeof i&&("function"!=typeof i||null===i))throw new TypeError("Object.keys called on non-object");var o,s,u=[];for(o in i)t.call(i,o)&&u.push(o);if(e)for(s=0;r>s;s++)t.call(i,n[s])&&u.push(n[s]);return u}}(),et=It.internals.isObject=function(t){var e=typeof t;return!!t&&("object"===e||"function"===e)},Ke=function(){try{Object({toString:0}+"")}catch(t){return function(){return!1}}return function(t){return"function"!=typeof t.toString&&"string"==typeof(t+"")}}(),He=Array.isArray||function(t){return l(t)&&d(t.length)&&Ie.call(t)===ve},Je=It.internals.isEqual=function(t,e){return w(t,e)},Qe=({}.hasOwnProperty,Array.prototype.slice,It.internals.inherits=function(t,e){function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n}),$e=It.internals.addProperties=function(t){for(var e=[],n=1,r=arguments.length;r>n;n++)e.push(arguments[n]);for(var i=0,o=e.length;o>i;i++){var s=e[i];for(var u in s)t[u]=s[u]}},Ge=It.internals.addRef=function(t,e){return new xs(function(n){return new an(e.getDisposable(),t.subscribe(n))})};E.prototype.compareTo=function(t){var e=this.value.compareTo(t.value);return 0===e&&(e=this.id-t.id),e};var Xe=It.internals.PriorityQueue=function(t){this.items=new Array(t),this.length=0},Ye=Xe.prototype;Ye.isHigherPriority=function(t,e){return this.items[t].compareTo(this.items[e])<0},Ye.percolate=function(t){if(!(t>=this.length||0>t)){var e=t-1>>1;if(!(0>e||e===t)&&this.isHigherPriority(t,e)){var n=this.items[t];this.items[t]=this.items[e],this.items[e]=n,this.percolate(e)}}},Ye.heapify=function(t){if(+t||(t=0),!(t>=this.length||0>t)){var e=2*t+1,n=2*t+2,r=t;if(e<this.length&&this.isHigherPriority(e,r)&&(r=e),n<this.length&&this.isHigherPriority(n,r)&&(r=n),r!==t){var i=this.items[t];this.items[t]=this.items[r],this.items[r]=i,this.heapify(r)}}},Ye.peek=function(){return this.items[0].value},Ye.removeAt=function(e){this.items[e]=this.items[--this.length],this.items[this.length]=t,this.heapify()},Ye.dequeue=function(){var t=this.peek();return this.removeAt(0),t},Ye.enqueue=function(t){var e=this.length++;this.items[e]=new E(Xe.count++,t),this.percolate(e)},Ye.remove=function(t){for(var e=0;e<this.length;e++)if(this.items[e].value===t)return this.removeAt(e),!0;return!1},Xe.count=0;var Ze=It.CompositeDisposable=function(){var t,e,n=[];if(Array.isArray(arguments[0]))n=arguments[0];else for(e=arguments.length,n=new Array(e),t=0;e>t;t++)n[t]=arguments[t];this.disposables=n,this.isDisposed=!1,this.length=n.length},tn=Ze.prototype;tn.add=function(t){this.isDisposed?t.dispose():(this.disposables.push(t),this.length++)},tn.remove=function(t){var e=!1;if(!this.isDisposed){var n=this.disposables.indexOf(t);-1!==n&&(e=!0,this.disposables.splice(n,1),this.length--,t.dispose())}return e},tn.dispose=function(){if(!this.isDisposed){this.isDisposed=!0;for(var t=this.disposables.length,e=new Array(t),n=0;t>n;n++)e[n]=this.disposables[n];for(this.disposables=[],this.length=0,n=0;t>n;n++)e[n].dispose()}};var en=It.Disposable=function(t){this.isDisposed=!1,this.action=t||Bt};en.prototype.dispose=function(){this.isDisposed||(this.action(),this.isDisposed=!0)};var nn=en.create=function(t){return new en(t)},rn=en.empty={dispose:Bt},on=en.isDisposable=function(t){return t&&Gt(t.dispose)},sn=en.checkDisposed=function(t){if(t.isDisposed)throw new oe},un=en._fixup=function(t){return on(t)?t:rn},cn=It.SingleAssignmentDisposable=function(){this.isDisposed=!1,this.current=null};cn.prototype.getDisposable=function(){return this.current},cn.prototype.setDisposable=function(t){if(this.current)throw new Error("Disposable has already been assigned");var e=this.isDisposed;!e&&(this.current=t),e&&t&&t.dispose()},cn.prototype.dispose=function(){if(!this.isDisposed){this.isDisposed=!0;var t=this.current;this.current=null,t&&t.dispose()}};var hn=It.SerialDisposable=function(){this.isDisposed=!1,this.current=null};hn.prototype.getDisposable=function(){return this.current},hn.prototype.setDisposable=function(t){var e=this.isDisposed;if(!e){var n=this.current;this.current=t}n&&n.dispose(),e&&t&&t.dispose()},hn.prototype.dispose=function(){if(!this.isDisposed){this.isDisposed=!0;var t=this.current;this.current=null}t&&t.dispose()};var an=It.BinaryDisposable=function(t,e){this._first=t,this._second=e,this.isDisposed=!1};an.prototype.dispose=function(){if(!this.isDisposed){this.isDisposed=!0;var t=this._first;this._first=null,t&&t.dispose();var e=this._second;this._second=null,e&&e.dispose()}};var pn=It.NAryDisposable=function(t){this._disposables=t,this.isDisposed=!1};pn.prototype.dispose=function(){if(!this.isDisposed){this.isDisposed=!0;for(var t=0,e=this._disposables.length;e>t;t++)this._disposables[t].dispose();this._disposables.length=0}};var fn=It.RefCountDisposable=function(){function t(t){this.disposable=t,this.disposable.count++,this.isInnerDisposed=!1}function e(t){this.underlyingDisposable=t,this.isDisposed=!1,this.isPrimaryDisposed=!1,this.count=0}return t.prototype.dispose=function(){this.disposable.isDisposed||this.isInnerDisposed||(this.isInnerDisposed=!0,this.disposable.count--,0===this.disposable.count&&this.disposable.isPrimaryDisposed&&(this.disposable.isDisposed=!0,this.disposable.underlyingDisposable.dispose()))},e.prototype.dispose=function(){this.isDisposed||this.isPrimaryDisposed||(this.isPrimaryDisposed=!0,0===this.count&&(this.isDisposed=!0,this.underlyingDisposable.dispose()))},e.prototype.getDisposable=function(){return this.isDisposed?rn:new t(this)},e}();C.prototype.dispose=function(){this.scheduler.schedule(this,g)};var ln=It.internals.ScheduledItem=function(t,e,n,r,i){this.scheduler=t,this.state=e,this.action=n,this.dueTime=r,this.comparer=i||Jt,this.disposable=new cn};ln.prototype.invoke=function(){this.disposable.setDisposable(this.invokeCore())},ln.prototype.compareTo=function(t){return this.comparer(this.dueTime,t.dueTime)},ln.prototype.isCancelled=function(){return this.disposable.isDisposed},ln.prototype.invokeCore=function(){return un(this.action(this.scheduler,this.state))};var dn=It.Scheduler=function(){function t(){}t.isScheduler=function(e){return e instanceof t};var e=t.prototype;return e.schedule=function(t,e){throw new ce},e.scheduleFuture=function(e,n,r){var i=n;return i instanceof Date&&(i-=this.now()),i=t.normalize(i),0===i?this.schedule(e,r):this._scheduleFuture(e,i,r)},e._scheduleFuture=function(t,e,n){throw new ce},t.now=Kt,t.prototype.now=Kt,t.normalize=function(t){return 0>t&&(t=0),t},t}(),_n=dn.normalize,bn=dn.isScheduler;!function(t){function e(t,e){function n(e){function r(t,e){return s?o.remove(c):u=!0,i(e,n),rn}var s=!1,u=!1,c=t.schedule(e,r);u||(o.add(c),s=!0)}var r=e[0],i=e[1],o=new Ze;return i(r,n),o}function n(t,e){function n(e,r){function s(t,e){return u?o.remove(h):c=!0,i(e,n),rn}var u=!1,c=!1,h=t.scheduleFuture(e,r,s);c||(o.add(h),u=!0)}var r=e[0],i=e[1],o=new Ze;return i(r,n),o}t.scheduleRecursive=function(t,n){return this.schedule([t,n],e)},t.scheduleRecursiveFuture=function(t,e,r){return this.scheduleFuture([t,r],e,n)}}(dn.prototype),function(t){t.schedulePeriodic=function(t,e,n){if("undefined"==typeof zt.setInterval)throw new ue;e=_n(e);var r=t,i=zt.setInterval(function(){r=n(r)},e);return nn(function(){zt.clearInterval(i)})}}(dn.prototype),function(t){t.catchError=t["catch"]=function(t){return new On(this,t)}}(dn.prototype);var vn,yn,wn=It.internals.SchedulePeriodicRecursive=function(){function t(t){return function(e,n){n(0,t._period);var r=Yt(t._action)(t._state);r===Xt&&(t._cancel.dispose(),i(r.e)),t._state=r}}function e(t,e,n,r){this._scheduler=t,this._state=e,this._period=n,this._action=r}return e.prototype.start=function(){var e=new cn;return this._cancel=e,e.setDisposable(this._scheduler.scheduleRecursiveFuture(0,this._period,t(this))),e},e}(),mn=function(t){function e(){t.call(this)}return Qe(e,t),e.prototype.schedule=function(t,e){return un(e(this,t))},e}(dn),En=dn.immediate=new mn,Cn=function(t){function e(){for(;r.length>0;){var t=r.dequeue();!t.isCancelled()&&t.invoke()}}function n(){t.call(this)}var r;return Qe(n,t),n.prototype.schedule=function(t,n){var o=new ln(this,t,n,this.now());if(r)r.enqueue(o);else{r=new Xe(4),r.enqueue(o);var s=Yt(e)();r=null,s===Xt&&i(s.e)}return o.disposable},n.prototype.scheduleRequired=function(){return!r},n}(dn),gn=dn.currentThread=new Cn,xn=function(){var t,e=Bt;if(zt.setTimeout)t=zt.setTimeout,e=zt.clearTimeout;else{if(!zt.WScript)throw new ue;t=function(t,e){zt.WScript.Sleep(e),t()}}return{setTimeout:t,clearTimeout:e}}(),Nn=xn.setTimeout,Dn=xn.clearTimeout;!function(){function t(e){if(o)Nn(function(){t(e)},0);else{var n=r[e];if(n){o=!0;var s=Yt(n)();yn(e),o=!1,s===Xt&&i(s.e)}}}function e(){if(!zt.postMessage||zt.importScripts)return!1;var t=!1,e=zt.onmessage;return zt.onmessage=function(){t=!0},zt.postMessage("","*"),zt.onmessage=e,t}var n=1,r={},o=!1;yn=function(t){delete r[t]};var s=new RegExp("^"+String(toString).replace(/[.*+?^${}()|[\]\\]/g,"\\$&").replace(/toString| for [^\]]+/g,".*?")+"$"),u="function"==typeof(u=Mt&&Vt&&Mt.setImmediate)&&!s.test(u)&&u;if(Gt(u))vn=function(e){var i=n++;return r[i]=e,u(function(){t(i)}),i};else if("undefined"!=typeof process&&"[object process]"==={}.toString.call(process))vn=function(e){var i=n++;return r[i]=e,process.nextTick(function(){t(i)}),i};else if(e()){var c="ms.rx.schedule"+Math.random(),h=function(e){"string"==typeof e.data&&e.data.substring(0,c.length)===c&&t(e.data.substring(c.length))};zt.addEventListener("message",h,!1),vn=function(t){var e=n++;return r[e]=t,zt.postMessage(c+e,"*"),e}}else if(zt.MessageChannel){var a=new zt.MessageChannel;a.port1.onmessage=function(e){t(e.data)},vn=function(t){var e=n++;return r[e]=t,a.port2.postMessage(e),e}}else vn="document"in zt&&"onreadystatechange"in zt.document.createElement("script")?function(e){var i=zt.document.createElement("script"),o=n++;return r[o]=e,i.onreadystatechange=function(){t(o),i.onreadystatechange=null,i.parentNode.removeChild(i),i=null},zt.document.documentElement.appendChild(i),o}:function(e){var i=n++;return r[i]=e,Nn(function(){t(i)},0),i}}();var An=function(t){function e(){t.call(this)}function n(t,e,n,r){return function(){t.setDisposable(en._fixup(e(n,r)))}}function r(t){this._id=t,this.isDisposed=!1}function i(t){this._id=t,this.isDisposed=!1}return Qe(e,t),r.prototype.dispose=function(){this.isDisposed||(this.isDisposed=!0,yn(this._id))},i.prototype.dispose=function(){this.isDisposed||(this.isDisposed=!0,Dn(this._id))},e.prototype.schedule=function(t,e){var i=new cn,o=vn(n(i,e,this,t));return new an(i,new r(o))},e.prototype._scheduleFuture=function(t,e,r){if(0===e)return this.schedule(t,r);var o=new cn,s=Nn(n(o,r,this,t),e);return new an(o,new i(s))},e}(dn),Sn=dn["default"]=dn.async=new An,On=function(t){function e(e,n){this._scheduler=e,this._handler=n,this._recursiveOriginal=null,this._recursiveWrapper=null,t.call(this)}return Qe(e,t),e.prototype.schedule=function(t,e){return this._scheduler.schedule(t,this._wrap(e))},e.prototype._scheduleFuture=function(t,e,n){return this._scheduler.schedule(t,e,this._wrap(n))},e.prototype.now=function(){return this._scheduler.now()},e.prototype._clone=function(t){return new e(t,this._handler)},e.prototype._wrap=function(t){var e=this;return function(n,r){var o=Yt(t)(e._getRecursiveWrapper(n),r);return o===Xt?(e._handler(o.e)||i(o.e),rn):un(o)}},e.prototype._getRecursiveWrapper=function(t){if(this._recursiveOriginal!==t){this._recursiveOriginal=t;var e=this._clone(t);e._recursiveOriginal=t,e._recursiveWrapper=e,this._recursiveWrapper=e}return this._recursiveWrapper},e.prototype.schedulePeriodic=function(t,e,n){var r=this,o=!1,s=new cn;return s.setDisposable(this._scheduler.schedulePeriodic(t,e,function(t){if(o)return null;var e=Yt(n)(t);return e===Xt?(o=!0,r._handler(e.e)||i(e.e),s.dispose(),null):e})),s},e}(dn),qn=It.Notification=function(){function t(){}return t.prototype._accept=function(t,e,n){throw new ce},t.prototype._acceptObserver=function(t,e,n){throw new ce},t.prototype.accept=function(t,e,n){return t&&"object"==typeof t?this._acceptObserver(t):this._accept(t,e,n)},t.prototype.toObservable=function(t){var e=this;return bn(t)||(t=En),new xs(function(n){return t.schedule(e,function(t,e){e._acceptObserver(n),"N"===e.kind&&n.onCompleted()})})},t}(),kn=function(t){function e(t){this.value=t,this.kind="N"}return Qe(e,t),e.prototype._accept=function(t){return t(this.value)},e.prototype._acceptObserver=function(t){return t.onNext(this.value)},e.prototype.toString=function(){return"OnNext("+this.value+")"},e}(qn),jn=function(t){function e(t){this.error=t,this.kind="E"}return Qe(e,t),e.prototype._accept=function(t,e){return e(this.error)},e.prototype._acceptObserver=function(t){return t.onError(this.error)},e.prototype.toString=function(){return"OnError("+this.error+")"},e}(qn),Fn=function(t){function e(){this.kind="C"}return Qe(e,t),e.prototype._accept=function(t,e,n){return n()},e.prototype._acceptObserver=function(t){return t.onCompleted()},e.prototype.toString=function(){return"OnCompleted()"},e}(qn),Rn=qn.createOnNext=function(t){return new kn(t)},Tn=qn.createOnError=function(t){return new jn(t)},Mn=qn.createOnCompleted=function(){return new Fn},Pn=It.Observer=function(){};Pn.prototype.toNotifier=function(){var t=this;return function(e){return e.accept(t)}},Pn.prototype.asObserver=function(){var t=this;return new zn(function(e){t.onNext(e)},function(e){t.onError(e)},function(){t.onCompleted()})},Pn.prototype.checked=function(){return new In(this)};var Ln=Pn.create=function(t,e,n){return t||(t=Bt),e||(e=Qt),n||(n=Bt),new zn(t,e,n)};Pn.fromNotifier=function(t,e){var n=de(t,e,1);return new zn(function(t){return n(Rn(t))},function(t){return n(Tn(t))},function(){return n(Mn())})},Pn.prototype.notifyOn=function(t){return new Un(t,this)},Pn.prototype.makeSafe=function(t){return new AnonymousSafeObserver(this._onNext,this._onError,this._onCompleted,t)};var Vn,Wn=It.internals.AbstractObserver=function(t){function e(){this.isStopped=!1}return Qe(e,t),e.prototype.next=he,e.prototype.error=he,e.prototype.completed=he,e.prototype.onNext=function(t){!this.isStopped&&this.next(t)},e.prototype.onError=function(t){this.isStopped||(this.isStopped=!0,this.error(t))},e.prototype.onCompleted=function(){
this.isStopped||(this.isStopped=!0,this.completed())},e.prototype.dispose=function(){this.isStopped=!0},e.prototype.fail=function(t){return this.isStopped?!1:(this.isStopped=!0,this.error(t),!0)},e}(Pn),zn=It.AnonymousObserver=function(t){function e(e,n,r){t.call(this),this._onNext=e,this._onError=n,this._onCompleted=r}return Qe(e,t),e.prototype.next=function(t){this._onNext(t)},e.prototype.error=function(t){this._onError(t)},e.prototype.completed=function(){this._onCompleted()},e}(Wn),In=function(t){function e(e){t.call(this),this._observer=e,this._state=0}Qe(e,t);var n=e.prototype;return n.onNext=function(t){this.checkAccess();var e=Yt(this._observer.onNext).call(this._observer,t);this._state=0,e===Xt&&i(e.e)},n.onError=function(t){this.checkAccess();var e=Yt(this._observer.onError).call(this._observer,t);this._state=2,e===Xt&&i(e.e)},n.onCompleted=function(){this.checkAccess();var t=Yt(this._observer.onCompleted).call(this._observer);this._state=2,t===Xt&&i(t.e)},n.checkAccess=function(){if(1===this._state)throw new Error("Re-entrancy detected");if(2===this._state)throw new Error("Observer completed");0===this._state&&(this._state=1)},e}(Pn),Bn=It.internals.ScheduledObserver=function(t){function e(e,n){t.call(this),this.scheduler=e,this.observer=n,this.isAcquired=!1,this.hasFaulted=!1,this.queue=[],this.disposable=new hn}function n(t,e){return function(){t.onNext(e)}}function r(t,e){return function(){t.onError(e)}}function o(t){return function(){t.onCompleted()}}function s(t,e){var n;if(!(t.queue.length>0))return void(t.isAcquired=!1);n=t.queue.shift();var r=Yt(n)();return r===Xt?(t.queue=[],t.hasFaulted=!0,i(r.e)):void e(t)}return Qe(e,t),e.prototype.next=function(t){this.queue.push(n(this.observer,t))},e.prototype.error=function(t){this.queue.push(r(this.observer,t))},e.prototype.completed=function(){this.queue.push(o(this.observer))},e.prototype.ensureActive=function(){var t=!1;!this.hasFaulted&&this.queue.length>0&&(t=!this.isAcquired,this.isAcquired=!0),t&&this.disposable.setDisposable(this.scheduler.scheduleRecursive(this,s))},e.prototype.dispose=function(){t.prototype.dispose.call(this),this.disposable.dispose()},e}(Wn),Un=function(t){function e(e,n,r){t.call(this,e,n),this._cancel=r}return Qe(e,t),e.prototype.next=function(e){t.prototype.next.call(this,e),this.ensureActive()},e.prototype.error=function(e){t.prototype.error.call(this,e),this.ensureActive()},e.prototype.completed=function(){t.prototype.completed.call(this),this.ensureActive()},e.prototype.dispose=function(){t.prototype.dispose.call(this),this._cancel&&this._cancel.dispose(),this._cancel=null},e}(Bn),Kn=It.Observable=function(){function t(t,e){return function(n){var r=n.onError;return n.onError=function(e){o(e,t),r.call(n,e)},e.call(t,n)}}function e(){if(It.config.longStackSupport&&Zt){var e=this._subscribe,n=Yt(i)(new Error).e;this.stack=n.stack.substring(n.stack.indexOf("\n")+1),this._subscribe=t(this,e)}}return Vn=e.prototype,e.isObservable=function(t){return t&&Gt(t.subscribe)},Vn.subscribe=Vn.forEach=function(t,e,n){return this._subscribe("object"==typeof t?t:Ln(t,e,n))},Vn.subscribeOnNext=function(t,e){return this._subscribe(Ln("undefined"!=typeof e?function(n){t.call(e,n)}:t))},Vn.subscribeOnError=function(t,e){return this._subscribe(Ln(null,"undefined"!=typeof e?function(n){t.call(e,n)}:t))},Vn.subscribeOnCompleted=function(t,e){return this._subscribe(Ln(null,null,"undefined"!=typeof e?function(){t.call(e)}:t))},e}(),Hn=It.ObservableBase=function(t){function e(t){return t&&Gt(t.dispose)?t:Gt(t)?nn(t):rn}function n(t,n){var r=n[0],o=n[1],s=Yt(o.subscribeCore).call(o,r);s!==Xt||r.fail(Xt.e)||i(Xt.e),r.setDisposable(e(s))}function r(){t.call(this)}return Qe(r,t),r.prototype._subscribe=function(t){var e=new Ns(t),r=[e,this];return gn.scheduleRequired()?gn.schedule(r,n):n(null,r),e},r.prototype.subscribeCore=he,r}(Kn),Jn=It.FlatMapObservable=function(t){function e(e,n,r,i){this.resultSelector=Gt(r)?r:null,this.selector=de(Gt(n)?n:function(){return n},i,3),this.source=e,t.call(this)}function n(t,e,n,r){this.i=0,this.selector=e,this.resultSelector=n,this.source=r,this.o=t,Wn.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new n(t,this.selector,this.resultSelector,this))},Qe(n,Wn),n.prototype._wrapResult=function(t,e,n){return this.resultSelector?t.map(function(t,r){return this.resultSelector(e,t,n,r)},this):t},n.prototype.next=function(t){var e=this.i++,n=Yt(this.selector)(t,e,this.source);return n===Xt?this.o.onError(n.e):($t(n)&&(n=ir(n)),(le(n)||fe(n))&&(n=Kn.from(n)),void this.o.onNext(this._wrapResult(n,t,e)))},n.prototype.error=function(t){this.o.onError(t)},n.prototype.completed=function(){this.o.onCompleted()},e}(Hn),Qn=It.internals.Enumerable=function(){};x.prototype.dispose=function(){this.isDisposed||(this.isDisposed=!0,this._s.isDisposed=!0)};var $n=function(t){function e(e){this.sources=e,t.call(this)}function n(t,e){if(!t.isDisposed){var n=Yt(t.e.next).call(t.e);if(n===Xt)return t.o.onError(n.e);if(n.done)return t.o.onCompleted();var i=n.value;$t(i)&&(i=ir(i));var o=new cn;t.subscription.setDisposable(o),o.setDisposable(i.subscribe(new r(t,e)))}}function r(t,e){this._state=t,this._recurse=e,Wn.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){var e=new hn,r={isDisposed:!1,o:t,subscription:e,e:this.sources[ae]()},i=gn.scheduleRecursive(r,n);return new pn([e,i,new x(r)])},Qe(r,Wn),r.prototype.next=function(t){this._state.o.onNext(t)},r.prototype.error=function(t){this._state.o.onError(t)},r.prototype.completed=function(){this._recurse(this._state)},e}(Hn);Qn.prototype.concat=function(){return new $n(this)};var Gn=function(t){function e(e){this.sources=e,t.call(this)}function n(t,e){if(!t.isDisposed){var n=Yt(t.e.next).call(t.e);if(n===Xt)return t.o.onError(n.e);if(n.done)return null!==t.lastError?t.o.onError(t.lastError):t.o.onCompleted();var i=n.value;$t(i)&&(i=ir(i));var o=new cn;t.subscription.setDisposable(o),o.setDisposable(i.subscribe(new r(t,e)))}}function r(t,e){this._state=t,this._recurse=e,Wn.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){var e=new hn,r={isDisposed:!1,e:this.sources[ae](),subscription:e,lastError:null,o:t},i=gn.scheduleRecursive(r,n);return new pn([e,i,new x(r)])},Qe(r,Wn),r.prototype.next=function(t){this._state.o.onNext(t)},r.prototype.error=function(t){this._state.lastError=t,this._recurse(this._state)},r.prototype.completed=function(){this._state.o.onCompleted()},e}(Hn);Qn.prototype.catchError=function(){return new Gn(this)};var Xn=function(t){function e(t,e){this.v=t,this.c=null==e?-1:e}function n(t){this.v=t.v,this.l=t.c}return Qe(e,t),e.prototype[ae]=function(){return new n(this)},n.prototype.next=function(){return 0===this.l?pe:(this.l>0&&this.l--,{done:!1,value:this.v})},e}(Qn),Yn=Qn.repeat=function(t,e){return new Xn(t,e)},Zn=function(t){function e(t,e,n){this.s=t,this.fn=e?de(e,n,3):null}function n(t){this.i=-1,this.s=t.s,this.l=this.s.length,this.fn=t.fn}return Qe(e,t),e.prototype[ae]=function(){return new n(this)},n.prototype.next=function(){return++this.i<this.l?{done:!1,value:this.fn?this.fn(this.s[this.i],this.i,this.s):this.s[this.i]}:pe},e}(Qn),tr=Qn.of=function(t,e,n){return new Zn(t,e,n)},er=function(t){function e(e,n){this.source=e,this._s=n,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Un(this._s,t))},e}(Hn);Vn.observeOn=function(t){return new er(this,t)};var nr=function(t){function e(e,n){this.source=e,this._s=n,t.call(this)}function n(t,e){var n=e[0],r=e[1],i=e[2];r.setDisposable(new C(t,n.subscribe(i)))}return Qe(e,t),e.prototype.subscribeCore=function(t){var e=new cn,r=new hn;return r.setDisposable(e),e.setDisposable(this._s.schedule([this.source,r,t],n)),r},e}(Hn);Vn.subscribeOn=function(t){return new nr(this,t)};var rr=function(t){function e(e,n){this._p=e,this._s=n,t.call(this)}function n(t,e){var n=e[0],r=e[1];n.onNext(r),n.onCompleted()}function r(t,e){var n=e[0],r=e[1];n.onError(r)}return Qe(e,t),e.prototype.subscribeCore=function(t){var e=new cn,i=this;return this._p.then(function(r){e.setDisposable(i._s.schedule([t,r],n))},function(n){e.setDisposable(i._s.schedule([t,n],r))}),e},e}(Hn),ir=Kn.fromPromise=function(t,e){return e||(e=Sn),new rr(t,e)};Vn.toPromise=function(t){if(t||(t=It.config.Promise),!t)throw new ue("Promise type not provided nor in Rx.config.Promise");var e=this;return new t(function(t,n){var r;e.subscribe(function(t){r=t},n,function(){t(r)})})};var or=function(t){function e(e){this.source=e,t.call(this)}function n(t){this.o=t,this.a=[],Wn.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new n(t))},Qe(n,Wn),n.prototype.next=function(t){this.a.push(t)},n.prototype.error=function(t){this.o.onError(t)},n.prototype.completed=function(){this.o.onNext(this.a),this.o.onCompleted()},e}(Hn);Vn.toArray=function(){return new or(this)},Kn.create=function(t,e){return new xs(t,e)};var sr=function(t){function e(e){this._f=e,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){var e=Yt(this._f)();return e===Xt?Nr(e.e).subscribe(t):($t(e)&&(e=ir(e)),e.subscribe(t))},e}(Hn),ur=Kn.defer=function(t){return new sr(t)},cr=function(t){function e(e){this.scheduler=e,t.call(this)}function n(t,e){this.observer=t,this.scheduler=e}function r(t,e){return e.onCompleted(),rn}return Qe(e,t),e.prototype.subscribeCore=function(t){var e=new n(t,this.scheduler);return e.run()},n.prototype.run=function(){var t=this.observer;return this.scheduler===En?r(null,t):this.scheduler.schedule(t,r)},e}(Hn),hr=new cr(En),ar=Kn.empty=function(t){return bn(t)||(t=En),t===En?hr:new cr(t)},pr=function(t){function e(e,n,r){this._iterable=e,this._fn=n,this._scheduler=r,t.call(this)}function n(t,e,n){return function(r,i){var o=Yt(e.next).call(e);if(o===Xt)return t.onError(o.e);if(o.done)return t.onCompleted();var s=o.value;return Gt(n)&&(s=Yt(n)(s,r),s===Xt)?t.onError(s.e):(t.onNext(s),void i(r+1))}}return Qe(e,t),e.prototype.subscribeCore=function(t){var e=Object(this._iterable),r=q(e);return this._scheduler.scheduleRecursive(0,n(t,r,this._fn))},e}(Hn),fr=Math.pow(2,53)-1;N.prototype[ae]=function(){return new D(this._s)},D.prototype[ae]=function(){return this},D.prototype.next=function(){return this._i<this._l?{done:!1,value:this._s.charAt(this._i++)}:pe},A.prototype[ae]=function(){return new S(this._a)},S.prototype[ae]=function(){return this},S.prototype.next=function(){return this._i<this._l?{done:!1,value:this._a[this._i++]}:pe};var lr=Kn.from=function(t,e,n,r){if(null==t)throw new Error("iterable cannot be null.");if(e&&!Gt(e))throw new Error("mapFn when provided must be a function");if(e)var i=de(e,n,2);return bn(r)||(r=gn),new pr(t,i,r)},dr=function(t){function e(e,n){this._args=e,this._scheduler=n,t.call(this)}function n(t,e){var n=e.length;return function(r,i){n>r?(t.onNext(e[r]),i(r+1)):t.onCompleted()}}return Qe(e,t),e.prototype.subscribeCore=function(t){return this._scheduler.scheduleRecursive(0,n(t,this._args))},e}(Hn),_r=Kn.fromArray=function(t,e){return bn(e)||(e=gn),new dr(t,e)},br=function(t){function e(e,n,r,i,o){this._initialState=e,this._cndFn=n,this._itrFn=r,this._resFn=i,this._s=o,t.call(this)}function n(t,e){if(t.first)t.first=!1;else if(t.newState=Yt(t.self._itrFn)(t.newState),t.newState===Xt)return t.o.onError(t.newState.e);var n=Yt(t.self._cndFn)(t.newState);if(n===Xt)return t.o.onError(n.e);if(n){var r=Yt(t.self._resFn)(t.newState);if(r===Xt)return t.o.onError(r.e);t.o.onNext(r),e(t)}else t.o.onCompleted()}return Qe(e,t),e.prototype.subscribeCore=function(t){var e={o:t,self:this,first:!0,newState:this._initialState};return this._s.scheduleRecursive(e,n)},e}(Hn);Kn.generate=function(t,e,n,r,i){return bn(i)||(i=gn),new br(t,e,n,r,i)},Kn.of=function(){for(var t=arguments.length,e=new Array(t),n=0;t>n;n++)e[n]=arguments[n];return new dr(e,gn)},Kn.ofWithScheduler=function(t){for(var e=arguments.length,n=new Array(e-1),r=1;e>r;r++)n[r-1]=arguments[r];return new dr(n,t)},Kn.ofArrayChanges=function(t){if(!Array.isArray(t))throw new TypeError("Array.observe only accepts arrays.");if("function"!=typeof Array.observe&&"function"!=typeof Array.unobserve)throw new TypeError("Array.observe is not supported on your platform");return new xs(function(e){function n(t){for(var n=0,r=t.length;r>n;n++)e.onNext(t[n])}return Array.observe(t,n),function(){Array.unobserve(t,n)}})},Kn.ofObjectChanges=function(t){if(null==t)throw new TypeError("object must not be null or undefined.");if("function"!=typeof Object.observe&&"function"!=typeof Object.unobserve)throw new TypeError("Object.observe is not supported on your platform");return new xs(function(e){function n(t){for(var n=0,r=t.length;r>n;n++)e.onNext(t[n])}return Object.observe(t,n),function(){Object.unobserve(t,n)}})};var vr=function(t){function e(){t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return rn},e}(Hn),yr=new vr,wr=Kn.never=function(){return yr},mr=function(t){function e(e,n){this._o=e,this._keys=Object.keys(e),this._scheduler=n,t.call(this)}function n(t,e,n){return function(r,i){if(r<n.length){var o=n[r];t.onNext([o,e[o]]),i(r+1)}else t.onCompleted()}}return Qe(e,t),e.prototype.subscribeCore=function(t){return this._scheduler.scheduleRecursive(0,n(t,this._o,this._keys))},e}(Hn);Kn.pairs=function(t,e){return e||(e=gn),new mr(t,e)};var Er=function(t){function e(e,n,r){this.start=e,this.rangeCount=n,this.scheduler=r,t.call(this)}function n(t,e,n){return function(r,i){e>r?(n.onNext(t+r),i(r+1)):n.onCompleted()}}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.scheduler.scheduleRecursive(0,n(this.start,this.rangeCount,t))},e}(Hn);Kn.range=function(t,e,n){return bn(n)||(n=gn),new Er(t,e,n)};var Cr=function(t){function e(e,n,r){this.value=e,this.repeatCount=null==n?-1:n,this.scheduler=r,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){var e=new R(t,this);return e.run()},e}(Hn);R.prototype.run=function(){function t(t,r){return(-1===t||t>0)&&(e.onNext(n),t>0&&t--),0===t?e.onCompleted():void r(t)}var e=this.observer,n=this.parent.value;return this.parent.scheduler.scheduleRecursive(this.parent.repeatCount,t)},Kn.repeat=function(t,e,n){return bn(n)||(n=gn),new Cr(t,e,n)};var gr=function(t){function e(e,n){this._value=e,this._scheduler=n,t.call(this)}function n(t,e){var n=e[0],r=e[1];return r.onNext(n),r.onCompleted(),rn}return Qe(e,t),e.prototype.subscribeCore=function(t){var e=[this._value,t];return this._scheduler===En?n(null,e):this._scheduler.schedule(e,n)},e}(Hn),xr=(Kn["return"]=Kn.just=function(t,e){return bn(e)||(e=En),new gr(t,e)},function(t){function e(e,n){this._error=e,this._scheduler=n,t.call(this)}function n(t,e){var n=e[0],r=e[1];return r.onError(n),rn}return Qe(e,t),e.prototype.subscribeCore=function(t){var e=[this._error,t];return this._scheduler===En?n(null,e):this._scheduler.schedule(e,n)},e}(Hn)),Nr=Kn["throw"]=function(t,e){return bn(e)||(e=En),new xr(t,e)},Dr=function(t){function e(e,n){this._resFn=e,this._obsFn=n,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){var e=rn,n=Yt(this._resFn)();if(n===Xt)return new an(Nr(n.e).subscribe(t),e);n&&(e=n);var r=Yt(this._obsFn)(n);return r===Xt?new an(Nr(r.e).subscribe(t),e):new an(r.subscribe(t),e)},e}(Hn);Kn.using=function(t,e){return new Dr(t,e)},Vn.amb=function(t){var e=this;return new xs(function(n){function r(){o||(o=s,h.dispose())}function i(){o||(o=u,c.dispose())}var o,s="L",u="R",c=new cn,h=new cn;$t(t)&&(t=ir(t));var a=Ln(function(t){r(),o===s&&n.onNext(t)},function(t){r(),o===s&&n.onError(t)},function(){r(),o===s&&n.onCompleted()}),p=Ln(function(t){i(),o===u&&n.onNext(t)},function(t){i(),o===u&&n.onError(t)},function(){i(),o===u&&n.onCompleted()});return c.setDisposable(e.subscribe(a)),h.setDisposable(t.subscribe(p)),new an(c,h)})},Kn.amb=function(){var t,e=wr();if(Array.isArray(arguments[0]))t=arguments[0];else{var n=arguments.length;t=new Array(t);for(var r=0;n>r;r++)t[r]=arguments[r]}for(var r=0,n=t.length;n>r;r++)e=T(e,t[r]);return e};var Ar=function(t){function e(e,n){this.source=e,this._fn=n,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){var e=new cn,n=new hn;return n.setDisposable(e),e.setDisposable(this.source.subscribe(new Sr(t,n,this._fn))),n},e}(Hn),Sr=function(t){function e(e,n,r){this._o=e,this._s=n,this._fn=r,t.call(this)}return Qe(e,t),e.prototype.next=function(t){this._o.onNext(t)},e.prototype.completed=function(){return this._o.onCompleted()},e.prototype.error=function(t){var e=Yt(this._fn)(t);if(e===Xt)return this._o.onError(e.e);$t(e)&&(e=ir(e));var n=new cn;this._s.setDisposable(n),n.setDisposable(e.subscribe(this._o))},e}(Wn);Vn["catch"]=function(t){return Gt(t)?new Ar(this,t):Or([this,t])};var Or=Kn["catch"]=function(){var t;if(Array.isArray(arguments[0]))t=arguments[0];else{var e=arguments.length;t=new Array(e);for(var n=0;e>n;n++)t[n]=arguments[n]}return tr(t).catchError()};Vn.combineLatest=function(){for(var t=arguments.length,e=new Array(t),n=0;t>n;n++)e[n]=arguments[n];return Array.isArray(e[0])?e[0].unshift(this):e.unshift(this),jr.apply(this,e)};var qr=function(t){function e(e,n){this._params=e,this._cb=n,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){for(var e=this._params.length,n=new Array(e),r={hasValue:m(e,M),hasValueAll:!1,isDone:m(e,M),values:new Array(e)},i=0;e>i;i++){var o=this._params[i],s=new cn;n[i]=s,$t(o)&&(o=ir(o)),s.setDisposable(o.subscribe(new kr(t,i,this._cb,r)))}return new pn(n)},e}(Hn),kr=function(t){function e(e,n,r,i){this._o=e,this._i=n,this._cb=r,this._state=i,t.call(this)}function n(t){return function(e,n){return n!==t}}return Qe(e,t),e.prototype.next=function(t){if(this._state.values[this._i]=t,this._state.hasValue[this._i]=!0,this._state.hasValueAll||(this._state.hasValueAll=this._state.hasValue.every(Ut))){var e=Yt(this._cb).apply(null,this._state.values);if(e===Xt)return this._o.onError(e.e);this._o.onNext(e)}else this._state.isDone.filter(n(this._i)).every(Ut)&&this._o.onCompleted()},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._state.isDone[this._i]=!0,this._state.isDone.every(Ut)&&this._o.onCompleted()},e}(Wn),jr=Kn.combineLatest=function(){for(var t=arguments.length,e=new Array(t),n=0;t>n;n++)e[n]=arguments[n];var r=Gt(e[t-1])?e.pop():P;return Array.isArray(e[0])&&(e=e[0]),new qr(e,r)};Vn.concat=function(){for(var t=[],e=0,n=arguments.length;n>e;e++)t.push(arguments[e]);return t.unshift(this),Tr.apply(null,t)};var Fr=function(t){function e(e,n){this._s=e,this._fn=n,t.call(this)}return Qe(e,t),e.prototype.next=function(t){this._s.o.onNext(t)},e.prototype.error=function(t){this._s.o.onError(t)},e.prototype.completed=function(){this._s.i++,this._fn(this._s)},e}(Wn),Rr=function(t){function e(e){this._sources=e,t.call(this)}function n(t,e){if(!t.disposable.isDisposed){if(t.i===t.sources.length)return t.o.onCompleted();var n=t.sources[t.i];$t(n)&&(n=ir(n));var r=new cn;t.subscription.setDisposable(r),r.setDisposable(n.subscribe(new Fr(t,e)))}}return Qe(e,t),e.prototype.subscribeCore=function(t){var e=new hn,r=nn(Bt),i={o:t,i:0,subscription:e,disposable:r,sources:this._sources},o=En.scheduleRecursive(i,n);return new pn([e,r,o])},e}(Hn),Tr=Kn.concat=function(){var t;if(Array.isArray(arguments[0]))t=arguments[0];else{t=new Array(arguments.length);for(var e=0,n=arguments.length;n>e;e++)t[e]=arguments[e]}return new Rr(t)};Vn.concatAll=function(){return this.merge(1)};var Mr=function(t){function e(e,n){this.source=e,this.maxConcurrent=n,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){var e=new Ze;return e.add(this.source.subscribe(new Pr(t,this.maxConcurrent,e))),e},e}(Hn),Pr=function(t){function e(e,n,r){this.o=e,this.max=n,this.g=r,this.done=!1,this.q=[],this.activeCount=0,t.call(this)}function n(e,n){this.parent=e,this.sad=n,t.call(this)}return Qe(e,t),e.prototype.handleSubscribe=function(t){var e=new cn;this.g.add(e),$t(t)&&(t=ir(t)),e.setDisposable(t.subscribe(new n(this,e)))},e.prototype.next=function(t){this.activeCount<this.max?(this.activeCount++,this.handleSubscribe(t)):this.q.push(t)},e.prototype.error=function(t){this.o.onError(t)},e.prototype.completed=function(){this.done=!0,0===this.activeCount&&this.o.onCompleted()},Qe(n,t),n.prototype.next=function(t){this.parent.o.onNext(t)},n.prototype.error=function(t){this.parent.o.onError(t)},n.prototype.completed=function(){this.parent.g.remove(this.sad),this.parent.q.length>0?this.parent.handleSubscribe(this.parent.q.shift()):(this.parent.activeCount--,this.parent.done&&0===this.parent.activeCount&&this.parent.o.onCompleted())},e}(Wn);Vn.merge=function(t){return"number"!=typeof t?Lr(this,t):new Mr(this,t)};var Lr=Kn.merge=function(){var t,e,n=[],r=arguments.length;if(arguments[0])if(bn(arguments[0]))for(t=arguments[0],e=1;r>e;e++)n.push(arguments[e]);else for(t=En,e=0;r>e;e++)n.push(arguments[e]);else for(t=En,e=1;r>e;e++)n.push(arguments[e]);return Array.isArray(n[0])&&(n=n[0]),F(t,n).mergeAll()},Vr=function(t){function e(e){this.source=e,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){var e=new Ze,n=new cn;return e.add(n),n.setDisposable(this.source.subscribe(new Wr(t,e))),e},e}(Hn),Wr=function(t){function e(e,n){this.o=e,this.g=n,this.done=!1,t.call(this)}function n(e,n){this.parent=e,this.sad=n,t.call(this)}return Qe(e,t),e.prototype.next=function(t){var e=new cn;this.g.add(e),$t(t)&&(t=ir(t)),e.setDisposable(t.subscribe(new n(this,e)))},e.prototype.error=function(t){this.o.onError(t)},e.prototype.completed=function(){this.done=!0,1===this.g.length&&this.o.onCompleted()},Qe(n,t),n.prototype.next=function(t){this.parent.o.onNext(t)},n.prototype.error=function(t){this.parent.o.onError(t)},n.prototype.completed=function(){this.parent.g.remove(this.sad),this.parent.done&&1===this.parent.g.length&&this.parent.o.onCompleted()},e}(Wn);Vn.mergeAll=function(){return new Vr(this)};var zr=It.CompositeError=function(t){this.innerErrors=t,this.message="This contains multiple errors. Check the innerErrors",Error.call(this)};zr.prototype=Object.create(Error.prototype),zr.prototype.name="CompositeError";var Ir=function(t){function e(e){this.source=e,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){var e=new Ze,n=new cn,r={isStopped:!1,errors:[],o:t};return e.add(n),n.setDisposable(this.source.subscribe(new Br(e,r))),e},e}(Hn),Br=function(t){function e(e,n){this._group=e,this._state=n,t.call(this)}function n(t,e){0===e.length?t.onCompleted():1===e.length?t.onError(e[0]):t.onError(new zr(e))}function r(e,n,r){this._inner=e,this._group=n,this._state=r,t.call(this)}return Qe(e,t),e.prototype.next=function(t){var e=new cn;this._group.add(e),$t(t)&&(t=ir(t)),e.setDisposable(t.subscribe(new r(e,this._group,this._state)))},e.prototype.error=function(t){this._state.errors.push(t),this._state.isStopped=!0,1===this._group.length&&n(this._state.o,this._state.errors)},e.prototype.completed=function(){this._state.isStopped=!0,1===this._group.length&&n(this._state.o,this._state.errors)},Qe(r,t),r.prototype.next=function(t){this._state.o.onNext(t)},r.prototype.error=function(t){this._state.errors.push(t),this._group.remove(this._inner),this._state.isStopped&&1===this._group.length&&n(this._state.o,this._state.errors)},r.prototype.completed=function(){this._group.remove(this._inner),this._state.isStopped&&1===this._group.length&&n(this._state.o,this._state.errors)},e}(Wn);Kn.mergeDelayError=function(){var t;if(Array.isArray(arguments[0]))t=arguments[0];else{var e=arguments.length;t=new Array(e);for(var n=0;e>n;n++)t[n]=arguments[n]}var r=F(null,t);return new Ir(r)},Vn.onErrorResumeNext=function(t){if(!t)throw new Error("Second observable is required");return Hr([this,t])};var Ur=function(t){function e(e){this.sources=e,t.call(this)}function n(t,e){if(t.pos<t.sources.length){var n=t.sources[t.pos++];$t(n)&&(n=ir(n));var r=new cn;t.subscription.setDisposable(r),r.setDisposable(n.subscribe(new Kr(t,e)))}else t.o.onCompleted()}return Qe(e,t),e.prototype.subscribeCore=function(t){var e=new hn,r={pos:0,subscription:e,o:t,sources:this.sources},i=En.scheduleRecursive(r,n);return new an(e,i)},e}(Hn),Kr=function(t){function e(e,n){this._state=e,this._recurse=n,t.call(this)}return Qe(e,t),e.prototype.next=function(t){this._state.o.onNext(t)},e.prototype.error=function(){this._recurse(this._state)},e.prototype.completed=function(){this._recurse(this._state)},e}(Wn),Hr=Kn.onErrorResumeNext=function(){var t=[];if(Array.isArray(arguments[0]))t=arguments[0];else{var e=arguments.length;t=new Array(e);for(var n=0;e>n;n++)t[n]=arguments[n]}return new Ur(t)},Jr=function(t){function e(e,n){this._s=e,this._o=$t(n)?ir(n):n,this._open=!1,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){var e=new cn;e.setDisposable(this._s.subscribe(new Qr(t,this))),$t(this._o)&&(this._o=ir(this._o));var n=new cn;return n.setDisposable(this._o.subscribe(new $r(t,this,n))),new an(e,n)},e}(Hn),Qr=function(t){function e(e,n){this._o=e,this._p=n,t.call(this)}return Qe(e,t),e.prototype.next=function(t){this._p._open&&this._o.onNext(t)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.onCompleted=function(){this._p._open&&this._o.onCompleted()},e}(Wn),$r=function(t){function e(e,n,r){this._o=e,this._p=n,this._r=r,t.call(this)}return Qe(e,t),e.prototype.next=function(){this._p._open=!0,this._r.dispose()},e.prototype.error=function(t){this._o.onError(t)},e.prototype.onCompleted=function(){this._r.dispose()},e}(Wn);Vn.skipUntil=function(t){return new Jr(this,t)};var Gr=function(t){function e(e){this.source=e,t.call(this)}function n(t,e){this.o=t,this.inner=e,this.stopped=!1,this.latest=0,this.hasLatest=!1,Wn.call(this)}function r(t,e){this.parent=t,this.id=e,Wn.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){var e=new hn,r=this.source.subscribe(new n(t,e));return new an(r,e)},Qe(n,Wn),n.prototype.next=function(t){var e=new cn,n=++this.latest;this.hasLatest=!0,this.inner.setDisposable(e),$t(t)&&(t=ir(t)),e.setDisposable(t.subscribe(new r(this,n)))},n.prototype.error=function(t){this.o.onError(t)},n.prototype.completed=function(){this.stopped=!0,!this.hasLatest&&this.o.onCompleted()},Qe(r,Wn),r.prototype.next=function(t){this.parent.latest===this.id&&this.parent.o.onNext(t)},r.prototype.error=function(t){this.parent.latest===this.id&&this.parent.o.onError(t)},r.prototype.completed=function(){this.parent.latest===this.id&&(this.parent.hasLatest=!1,this.parent.stopped&&this.parent.o.onCompleted())},e}(Hn);Vn["switch"]=Vn.switchLatest=function(){return new Gr(this)};var Xr=function(t){function e(e,n){this.source=e,this.other=$t(n)?ir(n):n,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return new an(this.source.subscribe(t),this.other.subscribe(new Yr(t)))},e}(Hn),Yr=function(t){function e(e){this._o=e,t.call(this)}return Qe(e,t),e.prototype.next=function(){this._o.onCompleted()},e.prototype.error=function(t){this._o.onError(t)},e.prototype.onCompleted=Bt,e}(Wn);Vn.takeUntil=function(t){return new Xr(this,t)};var Zr=function(t){function e(e,n,r){this._s=e,this._ss=n,this._cb=r,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){for(var e=this._ss.length,n={hasValue:m(e,M),hasValueAll:!1,values:new Array(e)},r=this._ss.length,i=new Array(r+1),o=0;r>o;o++){var s=this._ss[o],u=new cn;$t(s)&&(s=ir(s)),u.setDisposable(s.subscribe(new ti(t,o,n))),i[o]=u}var c=new cn;return c.setDisposable(this._s.subscribe(new ei(t,this._cb,n))),i[r]=c,new pn(i)},e}(Hn),ti=function(t){function e(e,n,r){this._o=e,this._i=n,this._state=r,t.call(this)}return Qe(e,t),e.prototype.next=function(t){this._state.values[this._i]=t,this._state.hasValue[this._i]=!0,this._state.hasValueAll=this._state.hasValue.every(Ut)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=Bt,e}(Wn),ei=function(t){function e(e,n,r){this._o=e,this._cb=n,this._state=r,t.call(this)}return Qe(e,t),e.prototype.next=function(t){var e=[t].concat(this._state.values);if(this._state.hasValueAll){var n=Yt(this._cb).apply(null,e);return n===Xt?this._o.onError(n.e):void this._o.onNext(n)}},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(Wn);Vn.withLatestFrom=function(){if(0===arguments.length)throw new Error("invalid arguments");for(var t=arguments.length,e=new Array(t),n=0;t>n;n++)e[n]=arguments[n];var r=Gt(e[t-1])?e.pop():P;return Array.isArray(e[0])&&(e=e[0]),new Zr(this,e,r)};var ni=function(t){function e(e,n){this._s=e,this._cb=n,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){for(var e=this._s.length,n=new Array(e),r=m(e,M),i=m(e,L),o=0;e>o;o++){var s=this._s[o],u=new cn;n[o]=u,$t(s)&&(s=ir(s)),u.setDisposable(s.subscribe(new ri(t,o,this,i,r)))}return new pn(n)},e}(Hn),ri=function(t){function e(e,n,r,i,o){this._o=e,this._i=n,this._p=r,this._q=i,this._d=o,t.call(this)}function n(t){return t.length>0}function r(t){return t.shift()}function i(t){return function(e,n){return n!==t}}return Qe(e,t),e.prototype.next=function(t){if(this._q[this._i].push(t),this._q.every(n)){var e=this._q.map(r),o=Yt(this._p._cb).apply(null,e);if(o===Xt)return this._o.onError(o.e);this._o.onNext(o)}else this._d.filter(i(this._i)).every(Ut)&&this._o.onCompleted()},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._d[this._i]=!0,this._d.every(Ut)&&this._o.onCompleted()},e}(Wn);Vn.zip=function(){if(0===arguments.length)throw new Error("invalid arguments");for(var t=arguments.length,e=new Array(t),n=0;t>n;n++)e[n]=arguments[n];var r=Gt(e[t-1])?e.pop():P;Array.isArray(e[0])&&(e=e[0]);var i=this;return e.unshift(i),new ni(e,r)},Kn.zip=function(){for(var t=arguments.length,e=new Array(t),n=0;t>n;n++)e[n]=arguments[n];Array.isArray(e[0])&&(e=Gt(e[1])?e[0].concat(e[1]):e[0]);var r=e.shift();return r.zip.apply(r,e)};var ii=function(t){function e(e,n){this.sources=e,this._cb=n,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){for(var e=this.sources,n=e.length,r=new Array(n),i={q:m(n,L),done:m(n,M),cb:this._cb,o:t},o=0;n>o;o++)!function(t){var n=e[t],o=new cn;(le(n)||fe(n))&&(n=lr(n)),r[t]=o,o.setDisposable(n.subscribe(new oi(i,t)))}(o);return new pn(r)},e}(Hn),oi=function(t){function e(e,n){this._s=e,this._i=n,t.call(this)}function n(t){return t.length>0}function r(t){return t.shift()}function i(t){return function(e,n){return n!==t}}return Qe(e,t),e.prototype.next=function(t){if(this._s.q[this._i].push(t),this._s.q.every(n)){var e=this._s.q.map(r),o=Yt(this._s.cb).apply(null,e);if(o===Xt)return this._s.o.onError(o.e);this._s.o.onNext(o)}else this._s.done.filter(i(this._i)).every(Ut)&&this._s.o.onCompleted()},e.prototype.error=function(t){this._s.o.onError(t)},e.prototype.completed=function(){this._s.done[this._i]=!0,this._s.done.every(Ut)&&this._s.o.onCompleted()},e}(Wn);Vn.zipIterable=function(){if(0===arguments.length)throw new Error("invalid arguments");for(var t=arguments.length,e=new Array(t),n=0;t>n;n++)e[n]=arguments[n];var r=Gt(e[t-1])?e.pop():P,i=this;return e.unshift(i),new ii(e,r)},Vn.asObservable=function(){return new xs(V(this),this)},Vn.bufferWithCount=function(t,e){return"number"!=typeof e&&(e=t),this.windowWithCount(t,e).flatMap(W).filter(z)};var si=function(t){function e(e){this.source=e,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new ui(t))},e}(Hn),ui=function(t){function e(e){this._o=e,t.call(this)}return Qe(e,t),e.prototype.next=function(t){t.accept(this._o)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(Wn);Vn.dematerialize=function(){return new si(this)};var ci=function(t){function e(e,n,r){this.source=e,this.keyFn=n,this.comparer=r,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new hi(t,this.keyFn,this.comparer))},e}(Hn),hi=function(t){function e(e,n,r){this.o=e,this.keyFn=n,this.comparer=r,this.hasCurrentKey=!1,this.currentKey=null,
t.call(this)}return Qe(e,t),e.prototype.next=function(t){var e,n=t;return Gt(this.keyFn)&&(n=Yt(this.keyFn)(t),n===Xt)?this.o.onError(n.e):this.hasCurrentKey&&(e=Yt(this.comparer)(this.currentKey,n),e===Xt)?this.o.onError(e.e):void(this.hasCurrentKey&&e||(this.hasCurrentKey=!0,this.currentKey=n,this.o.onNext(t)))},e.prototype.error=function(t){this.o.onError(t)},e.prototype.completed=function(){this.o.onCompleted()},e}(Wn);Vn.distinctUntilChanged=function(t,e){return e||(e=Ht),new ci(this,t,e)};var ai=function(t){function e(e,n,r,i){this.source=e,this._oN=n,this._oE=r,this._oC=i,t.call(this)}function n(t,e){this.o=t,this.t=!e._oN||Gt(e._oN)?Ln(e._oN||Bt,e._oE||Bt,e._oC||Bt):e._oN,this.isStopped=!1,Wn.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new n(t,this))},Qe(n,Wn),n.prototype.next=function(t){var e=Yt(this.t.onNext).call(this.t,t);e===Xt&&this.o.onError(e.e),this.o.onNext(t)},n.prototype.error=function(t){var e=Yt(this.t.onError).call(this.t,t);return e===Xt?this.o.onError(e.e):void this.o.onError(t)},n.prototype.completed=function(){var t=Yt(this.t.onCompleted).call(this.t);return t===Xt?this.o.onError(t.e):void this.o.onCompleted()},e}(Hn);Vn["do"]=Vn.tap=Vn.doAction=function(t,e,n){return new ai(this,t,e,n)},Vn.doOnNext=Vn.tapOnNext=function(t,e){return this.tap("undefined"!=typeof e?function(n){t.call(e,n)}:t)},Vn.doOnError=Vn.tapOnError=function(t,e){return this.tap(Bt,"undefined"!=typeof e?function(n){t.call(e,n)}:t)},Vn.doOnCompleted=Vn.tapOnCompleted=function(t,e){return this.tap(Bt,null,"undefined"!=typeof e?function(){t.call(e)}:t)};var pi=function(t){function e(e,n,r){this.source=e,this._fn=de(n,r,0),t.call(this)}function n(t,e){this.isDisposed=!1,this._s=t,this._fn=e}return Qe(e,t),e.prototype.subscribeCore=function(t){var e=Yt(this.source.subscribe).call(this.source,t);return e===Xt&&(this._fn(),i(e.e)),new n(e,this._fn)},n.prototype.dispose=function(){if(!this.isDisposed){var t=Yt(this._s.dispose).call(this._s);this._fn(),t===Xt&&i(t.e)}},e}(Hn);Vn["finally"]=function(t,e){return new pi(this,t,e)};var fi=function(t){function e(e){this.source=e,t.call(this)}function n(t){this.o=t,this.isStopped=!1}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new n(t))},n.prototype.onNext=Bt,n.prototype.onError=function(t){this.isStopped||(this.isStopped=!0,this.o.onError(t))},n.prototype.onCompleted=function(){this.isStopped||(this.isStopped=!0,this.o.onCompleted())},n.prototype.dispose=function(){this.isStopped=!0},n.prototype.fail=function(t){return this.isStopped?!1:(this.isStopped=!0,this.observer.onError(t),!0)},e}(Hn);Vn.ignoreElements=function(){return new fi(this)};var li=function(t){function e(e,n){this.source=e,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new di(t))},e}(Hn),di=function(t){function e(e){this._o=e,t.call(this)}return Qe(e,t),e.prototype.next=function(t){this._o.onNext(Rn(t))},e.prototype.error=function(t){this._o.onNext(Tn(t)),this._o.onCompleted()},e.prototype.completed=function(){this._o.onNext(Mn()),this._o.onCompleted()},e}(Wn);Vn.materialize=function(){return new li(this)},Vn.repeat=function(t){return Yn(this,t).concat()},Vn.retry=function(t){return Yn(this,t).catchError()};var _i=function(t){function e(t){return{isDisposed:!1,dispose:function(){this.isDisposed||(this.isDisposed=!0,t.isDisposed=!0)}}}function n(e,n){this.source=e,this._notifier=n,t.call(this)}return Qe(n,t),n.prototype.subscribeCore=function(t){var n,r=new Ss,i=new Ss,o=this._notifier(r),s=o.subscribe(i),u=this.source["@@iterator"](),c={isDisposed:!1},h=new hn,a=gn.scheduleRecursive(null,function(e,o){if(!c.isDisposed){var s=u.next();if(s.done)return void(n?t.onError(n):t.onCompleted());var a=s.value;$t(a)&&(a=ir(a));var p=new cn,f=new cn;h.setDisposable(new an(f,p)),p.setDisposable(a.subscribe(function(e){t.onNext(e)},function(e){f.setDisposable(i.subscribe(o,function(e){t.onError(e)},function(){t.onCompleted()})),r.onNext(e),p.dispose()},function(){t.onCompleted()}))}});return new pn([s,h,a,e(c)])},n}(Hn);Vn.retryWhen=function(t){return new _i(I(this),t)};var bi=function(t){function e(t){return{isDisposed:!1,dispose:function(){this.isDisposed||(this.isDisposed=!0,t.isDisposed=!0)}}}function n(e,n){this.source=e,this._notifier=n,t.call(this)}return Qe(n,t),n.prototype.subscribeCore=function(t){var n,r=new Ss,i=new Ss,o=this._notifier(r),s=o.subscribe(i),u=this.source["@@iterator"](),c={isDisposed:!1},h=new hn,a=gn.scheduleRecursive(null,function(e,o){if(!c.isDisposed){var s=u.next();if(s.done)return void(n?t.onError(n):t.onCompleted());var a=s.value;$t(a)&&(a=ir(a));var p=new cn,f=new cn;h.setDisposable(new an(f,p)),p.setDisposable(a.subscribe(function(e){t.onNext(e)},function(e){t.onError(e)},function(){f.setDisposable(i.subscribe(o,function(e){t.onError(e)},function(){t.onCompleted()})),r.onNext(null),p.dispose()}))}});return new pn([s,h,a,e(c)])},n}(Hn);Vn.repeatWhen=function(t){return new bi(I(this),t)};var vi=function(t){function e(e,n,r,i){this.source=e,this.accumulator=n,this.hasSeed=r,this.seed=i,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new yi(t,this))},e}(Hn),yi=function(t){function e(e,n){this._o=e,this._p=n,this._fn=n.accumulator,this._hs=n.hasSeed,this._s=n.seed,this._ha=!1,this._a=null,this._hv=!1,this._i=0,t.call(this)}return Qe(e,t),e.prototype.next=function(t){return!this._hv&&(this._hv=!0),this._ha?this._a=Yt(this._fn)(this._a,t,this._i,this._p):(this._a=this._hs?Yt(this._fn)(this._s,t,this._i,this._p):t,this._ha=!0),this._a===Xt?this._o.onError(this._a.e):(this._o.onNext(this._a),void this._i++)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){!this._hv&&this._hs&&this._o.onNext(this._s),this._o.onCompleted()},e}(Wn);Vn.scan=function(){var t,e=!1,n=arguments[0];return 2===arguments.length&&(e=!0,t=arguments[1]),new vi(this,n,e,t)};var wi=function(t){function e(e,n){this.source=e,this._c=n,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new mi(t,this._c))},e}(Hn),mi=function(t){function e(e,n){this._o=e,this._c=n,this._q=[],t.call(this)}return Qe(e,t),e.prototype.next=function(t){this._q.push(t),this._q.length>this._c&&this._o.onNext(this._q.shift())},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(Wn);Vn.skipLast=function(t){if(0>t)throw new se;return new wi(this,t)},Vn.startWith=function(){var t,e=0;arguments.length&&bn(arguments[0])?(t=arguments[0],e=1):t=En;for(var n=[],r=e,i=arguments.length;i>r;r++)n.push(arguments[r]);return tr([_r(n,t),this]).concat()};var Ei=function(t){function e(e,n){this._o=e,this._c=n,this._q=[],t.call(this)}return Qe(e,t),e.prototype.next=function(t){this._q.push(t),this._q.length>this._c&&this._q.shift()},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){for(;this._q.length>0;)this._o.onNext(this._q.shift());this._o.onCompleted()},e}(Wn);Vn.takeLast=function(t){if(0>t)throw new se;var e=this;return new xs(function(n){return e.subscribe(new Ei(n,t))},e)};var Ci=function(t){function e(e,n){this._o=e,this._c=n,this._q=[],t.call(this)}return Qe(e,t),e.prototype.next=function(t){this._q.push(t),this._q.length>this._c&&this._q.shift()},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(this._q),this._o.onCompleted()},e}(Wn);Vn.takeLastBuffer=function(t){if(0>t)throw new se;var e=this;return new xs(function(n){return e.subscribe(new Ci(n,t))},e)},Vn.windowWithCount=function(t,e){var n=this;if(+t||(t=0),Math.abs(t)===1/0&&(t=0),0>=t)throw new se;if(null==e&&(e=t),+e||(e=0),Math.abs(e)===1/0&&(e=0),0>=e)throw new se;return new xs(function(r){function i(){var t=new Ss;c.push(t),r.onNext(Ge(t,s))}var o=new cn,s=new fn(o),u=0,c=[];return i(),o.setDisposable(n.subscribe(function(n){for(var r=0,o=c.length;o>r;r++)c[r].onNext(n);var s=u-t+1;s>=0&&s%e===0&&c.shift().onCompleted(),++u%e===0&&i()},function(t){for(;c.length>0;)c.shift().onError(t);r.onError(t)},function(){for(;c.length>0;)c.shift().onCompleted();r.onCompleted()})),s},n)},Vn.selectConcat=Vn.concatMap=function(t,e,n){return Gt(t)&&Gt(e)?this.concatMap(function(n,r){var i=t(n,r);return $t(i)&&(i=ir(i)),(le(i)||fe(i))&&(i=lr(i)),i.map(function(t,i){return e(n,t,r,i)})}):Gt(t)?B(this,t,n):B(this,function(){return t})},Vn.concatMapObserver=Vn.selectConcatObserver=function(t,e,n,r){var i=this,o=de(t,r,2),s=de(e,r,1),u=de(n,r,0);return new xs(function(t){var e=0;return i.subscribe(function(n){var r;try{r=o(n,e++)}catch(i){return void t.onError(i)}$t(r)&&(r=ir(r)),t.onNext(r)},function(e){var n;try{n=s(e)}catch(r){return void t.onError(r)}$t(n)&&(n=ir(n)),t.onNext(n),t.onCompleted()},function(){var e;try{e=u()}catch(n){return void t.onError(n)}$t(e)&&(e=ir(e)),t.onNext(e),t.onCompleted()})},this).concatAll()};var gi=function(t){function e(e,n){this._o=e,this._d=n,this._f=!1,t.call(this)}return Qe(e,t),e.prototype.next=function(t){this._f=!0,this._o.onNext(t)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){!this._f&&this._o.onNext(this._d),this._o.onCompleted()},e}(Wn);Vn.defaultIfEmpty=function(e){var n=this;return e===t&&(e=null),new xs(function(t){return n.subscribe(new gi(t,e))},n)},K.prototype.push=function(t){var e=-1===U(this.set,t,this.comparer);return e&&this.set.push(t),e};var xi=function(t){function e(e,n,r){this.source=e,this._keyFn=n,this._cmpFn=r,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Ni(t,this._keyFn,this._cmpFn))},e}(Hn),Ni=function(t){function e(e,n,r){this._o=e,this._keyFn=n,this._h=new K(r),t.call(this)}return Qe(e,t),e.prototype.next=function(t){var e=t;return Gt(this._keyFn)&&(e=Yt(this._keyFn)(t),e===Xt)?this._o.onError(e.e):void(this._h.push(e)&&this._o.onNext(t))},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(Wn);Vn.distinct=function(t,e){return e||(e=Ht),new xi(this,t,e)},Vn.groupBy=function(t,e){return this.groupByUntil(t,e,wr)},Vn.groupByUntil=function(e,n,r){var i=this;return new xs(function(o){var s=new zo,u=new Ze,c=new fn(u),h=function(t){return function(e){e.onError(t)}};return u.add(i.subscribe(function(i){var a=Yt(e)(i);if(a===Xt)return s.forEach(h(a.e)),o.onError(a.e);var p=!1,f=s.get(a);if(f===t&&(f=new Ss,s.set(a,f),p=!0),p){var l=new As(a,f,c),d=new As(a,f),_=Yt(r)(d);if(_===Xt)return s.forEach(h(_.e)),o.onError(_.e);o.onNext(l);var b=new cn;u.add(b),b.setDisposable(_.take(1).subscribe(Bt,function(t){s.forEach(h(t)),o.onError(t)},function(){s["delete"](a)&&f.onCompleted(),u.remove(b)}))}var v=i;return Gt(n)&&(v=Yt(n)(i),v===Xt)?(s.forEach(h(v.e)),o.onError(v.e)):void f.onNext(v)},function(t){s.forEach(h(t)),o.onError(t)},function(){s.forEach(function(t){t.onCompleted()}),o.onCompleted()})),c},i)};var Di=function(t){function e(e,n,r){this.source=e,this.selector=de(n,r,3),t.call(this)}function n(t,e){return function(n,r,i){return t.call(this,e.selector(n,r,i),r,i)}}function r(t,e,n){this.o=t,this.selector=e,this.source=n,this.i=0,Wn.call(this)}return Qe(e,t),e.prototype.internalMap=function(t,r){return new e(this.source,n(t,this),r)},e.prototype.subscribeCore=function(t){return this.source.subscribe(new r(t,this.selector,this))},Qe(r,Wn),r.prototype.next=function(t){var e=Yt(this.selector)(t,this.i++,this.source);return e===Xt?this.o.onError(e.e):void this.o.onNext(e)},r.prototype.error=function(t){this.o.onError(t)},r.prototype.completed=function(){this.o.onCompleted()},e}(Hn);Vn.map=Vn.select=function(t,e){var n="function"==typeof t?t:function(){return t};return this instanceof Di?this.internalMap(n,e):new Di(this,n,e)},Vn.pluck=function(){var t=arguments.length,e=new Array(t);if(0===t)throw new Error("List of properties cannot be empty.");for(var n=0;t>n;n++)e[n]=arguments[n];return this.map(H(e,t))},Vn.flatMap=Vn.selectMany=function(t,e,n){return new Jn(this,t,e,n).mergeAll()},Vn.flatMapObserver=Vn.selectManyObserver=function(t,e,n,r){var i=this;return new xs(function(o){var s=0;return i.subscribe(function(e){var n;try{n=t.call(r,e,s++)}catch(i){return void o.onError(i)}$t(n)&&(n=ir(n)),o.onNext(n)},function(t){var n;try{n=e.call(r,t)}catch(i){return void o.onError(i)}$t(n)&&(n=ir(n)),o.onNext(n),o.onCompleted()},function(){var t;try{t=n.call(r)}catch(e){return void o.onError(e)}$t(t)&&(t=ir(t)),o.onNext(t),o.onCompleted()})},i).mergeAll()},It.Observable.prototype.flatMapLatest=function(t,e,n){return new Jn(this,t,e,n).switchLatest()};var Ai=function(t){function e(e,n){this.source=e,this._count=n,t.call(this)}function n(t,e){this._o=t,this._r=e,Wn.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new n(t,this._count))},Qe(n,Wn),n.prototype.next=function(t){this._r<=0?this._o.onNext(t):this._r--},n.prototype.error=function(t){this._o.onError(t)},n.prototype.completed=function(){this._o.onCompleted()},e}(Hn);Vn.skip=function(t){if(0>t)throw new se;return new Ai(this,t)};var Si=function(t){function e(e,n){this.source=e,this._fn=n,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Oi(t,this))},e}(Hn),Oi=function(t){function e(e,n){this._o=e,this._p=n,this._i=0,this._r=!1,t.call(this)}return Qe(e,t),e.prototype.next=function(t){if(!this._r){var e=Yt(this._p._fn)(t,this._i++,this._p);if(e===Xt)return this._o.onError(e.e);this._r=!e}this._r&&this._o.onNext(t)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(Wn);Vn.skipWhile=function(t,e){var n=de(t,e,3);return new Si(this,n)};var qi=function(t){function e(e,n){this.source=e,this._count=n,t.call(this)}function n(t,e){this._o=t,this._c=e,this._r=e,Wn.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new n(t,this._count))},Qe(n,Wn),n.prototype.next=function(t){this._r-- >0&&(this._o.onNext(t),this._r<=0&&this._o.onCompleted())},n.prototype.error=function(t){this._o.onError(t)},n.prototype.completed=function(){this._o.onCompleted()},e}(Hn);Vn.take=function(t,e){if(0>t)throw new se;return 0===t?ar(e):new qi(this,t)};var ki=function(t){function e(e,n){this.source=e,this._fn=n,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new ji(t,this))},e}(Hn),ji=function(t){function e(e,n){this._o=e,this._p=n,this._i=0,this._r=!0,t.call(this)}return Qe(e,t),e.prototype.next=function(t){return this._r&&(this._r=Yt(this._p._fn)(t,this._i++,this._p),this._r===Xt)?this._o.onError(this._r.e):void(this._r?this._o.onNext(t):this._o.onCompleted())},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(Wn);Vn.takeWhile=function(t,e){var n=de(t,e,3);return new ki(this,n)};var Fi=function(t){function e(e,n,r){this.source=e,this.predicate=de(n,r,3),t.call(this)}function n(t,e){return function(n,r,i){return e.predicate(n,r,i)&&t.call(this,n,r,i)}}function r(t,e,n){this.o=t,this.predicate=e,this.source=n,this.i=0,Wn.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new r(t,this.predicate,this))},e.prototype.internalFilter=function(t,r){return new e(this.source,n(t,this),r)},Qe(r,Wn),r.prototype.next=function(t){var e=Yt(this.predicate)(t,this.i++,this.source);return e===Xt?this.o.onError(e.e):void(e&&this.o.onNext(t))},r.prototype.error=function(t){this.o.onError(t)},r.prototype.completed=function(){this.o.onCompleted()},e}(Hn);Vn.filter=Vn.where=function(t,e){return this instanceof Fi?this.internalFilter(t,e):new Fi(this,t,e)};var Ri=function(t){function e(e,n,r){this.source=e,this._k=n,this._c=r,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Ti(t,this._k,this._c))},e}(Hn),Ti=function(t){function e(e,n,r){this._o=e,this._k=n,this._c=r,this._v=null,this._hv=!1,this._l=[],t.call(this)}return Qe(e,t),e.prototype.next=function(t){var e=Yt(this._k)(t);if(e===Xt)return this._o.onError(e.e);var n=0;if(this._hv){if(n=Yt(this._c)(e,this._v),n===Xt)return this._o.onError(n.e)}else this._hv=!0,this._v=e;n>0&&(this._v=e,this._l=[]),n>=0&&this._l.push(t)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(this._l),this._o.onCompleted()},e}(Wn),Mi=function(t){function e(e,n,r,i){this.source=e,this.accumulator=n,this.hasSeed=r,this.seed=i,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Pi(t,this))},e}(Hn),Pi=function(t){function e(e,n){this._o=e,this._p=n,this._fn=n.accumulator,this._hs=n.hasSeed,this._s=n.seed,this._ha=!1,this._a=null,this._hv=!1,this._i=0,t.call(this)}return Qe(e,t),e.prototype.next=function(t){return!this._hv&&(this._hv=!0),this._ha?this._a=Yt(this._fn)(this._a,t,this._i,this._p):(this._a=this._hs?Yt(this._fn)(this._s,t,this._i,this._p):t,this._ha=!0),this._a===Xt?this._o.onError(this._a.e):void this._i++},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._hv&&this._o.onNext(this._a),!this._hv&&this._hs&&this._o.onNext(this._s),!this._hv&&!this._hs&&this._o.onError(new ie),this._o.onCompleted()},e}(Wn);Vn.reduce=function(){var t,e=!1,n=arguments[0];return 2===arguments.length&&(e=!0,t=arguments[1]),new Mi(this,n,e,t)};var Li=function(t){function e(e,n){this.source=e,this._fn=n,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Vi(t,this._fn,this.source))},e}(Hn),Vi=function(t){function e(e,n,r){this._o=e,this._fn=n,this._s=r,this._i=0,t.call(this)}return Qe(e,t),e.prototype.next=function(t){var e=Yt(this._fn)(t,this._i++,this._s);return e===Xt?this._o.onError(e.e):void(Boolean(e)&&(this._o.onNext(!0),this._o.onCompleted()))},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(!1),this._o.onCompleted()},e}(Wn);Vn.some=function(t,e){var n=de(t,e,3);return new Li(this,n)};var Wi=function(t){function e(e){this.source=e,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new zi(t))},e}(Hn),zi=function(t){function e(e){this._o=e,t.call(this)}return Qe(e,t),e.prototype.next=function(){this._o.onNext(!1),this._o.onCompleted()},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(!0),this._o.onCompleted()},e}(Wn);Vn.isEmpty=function(){return new Wi(this)};var Ii=function(t){function e(e,n){this.source=e,this._fn=n,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Bi(t,this._fn,this.source))},e}(Hn),Bi=function(t){function e(e,n,r){this._o=e,this._fn=n,this._s=r,this._i=0,t.call(this)}return Qe(e,t),e.prototype.next=function(t){var e=Yt(this._fn)(t,this._i++,this._s);return e===Xt?this._o.onError(e.e):void(Boolean(e)||(this._o.onNext(!1),this._o.onCompleted()))},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(!0),this._o.onCompleted()},e}(Wn);Vn.every=function(t,e){var n=de(t,e,3);return new Ii(this,n)};var Ui=function(t){function e(e,n,r){var i=+r||0;Math.abs(i)===1/0&&(i=0),this.source=e,this._elem=n,this._n=i,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this._n<0?(t.onNext(!1),t.onCompleted(),rn):this.source.subscribe(new Ki(t,this._elem,this._n))},e}(Hn),Ki=function(t){function e(e,n,r){this._o=e,this._elem=n,this._n=r,this._i=0,t.call(this)}function n(t,e){return 0===t&&0===e||t===e||isNaN(t)&&isNaN(e)}return Qe(e,t),e.prototype.next=function(t){this._i++>=this._n&&n(t,this._elem)&&(this._o.onNext(!0),this._o.onCompleted())},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(!1),this._o.onCompleted()},e}(Wn);Vn.includes=function(t,e){return new Ui(this,t,e)};var Hi=function(t){function e(e,n){this.source=e,this._fn=n,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Ji(t,this._fn,this.source))},e}(Hn),Ji=function(t){function e(e,n,r){this._o=e,this._fn=n,this._s=r,this._i=0,this._c=0,t.call(this)}return Qe(e,t),e.prototype.next=function(t){if(this._fn){var e=Yt(this._fn)(t,this._i++,this._s);if(e===Xt)return this._o.onError(e.e);Boolean(e)&&this._c++}else this._c++},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(this._c),this._o.onCompleted()},e}(Wn);Vn.count=function(t,e){var n=de(t,e,3);return new Hi(this,n)};var Qi=function(t){function e(e,n,r){this.source=e,this._e=n,this._n=r,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this._n<0?(t.onNext(-1),t.onCompleted(),rn):this.source.subscribe(new $i(t,this._e,this._n))},e}(Hn),$i=function(t){function e(e,n,r){this._o=e,this._e=n,this._n=r,this._i=0,t.call(this)}return Qe(e,t),e.prototype.next=function(t){this._i>=this._n&&t===this._e&&(this._o.onNext(this._i),this._o.onCompleted()),this._i++},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(-1),this._o.onCompleted()},e}(Wn);Vn.indexOf=function(t,e){var n=+e||0;return Math.abs(n)===1/0&&(n=0),new Qi(this,t,n)};var Gi=function(t){function e(e,n){this.source=e,this._fn=n,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Xi(t,this._fn,this.source))},e}(Hn),Xi=function(t){function e(e,n,r){this._o=e,this._fn=n,this._s=r,this._i=0,this._c=0,t.call(this)}return Qe(e,t),e.prototype.next=function(t){if(this._fn){var e=Yt(this._fn)(t,this._i++,this._s);if(e===Xt)return this._o.onError(e.e);this._c+=e}else this._c+=t},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(this._c),this._o.onCompleted()},e}(Wn);Vn.sum=function(t,e){var n=de(t,e,3);return new Gi(this,n)},Vn.minBy=function(t,e){return e||(e=Jt),new Ri(this,t,function(t,n){return-1*e(t,n)})},Vn.min=function(t){return this.minBy(Ut,t).map(J)},Vn.maxBy=function(t,e){return e||(e=Jt),new Ri(this,t,e)},Vn.max=function(t){return this.maxBy(Ut,t).map(J)};var Yi=function(t){function e(e,n){this.source=e,this._fn=n,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Zi(t,this._fn,this.source))},e}(Hn),Zi=function(t){function e(e,n,r){this._o=e,this._fn=n,this._s=r,this._c=0,this._t=0,t.call(this)}return Qe(e,t),e.prototype.next=function(t){if(this._fn){var e=Yt(this._fn)(t,this._c++,this._s);if(e===Xt)return this._o.onError(e.e);this._t+=e}else this._c++,this._t+=t},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){return 0===this._c?this._o.onError(new ie):(this._o.onNext(this._t/this._c),void this._o.onCompleted())},e}(Wn);Vn.average=function(t,e){var n,r=this;return Gt(t)&&(n=de(t,e,3)),new Yi(r,n)},Vn.sequenceEqual=function(t,e){var n=this;return e||(e=Ht),new xs(function(r){var i=!1,o=!1,s=[],u=[],c=n.subscribe(function(t){if(u.length>0){var n=u.shift(),i=Yt(e)(n,t);if(i===Xt)return r.onError(i.e);i||(r.onNext(!1),r.onCompleted())}else o?(r.onNext(!1),r.onCompleted()):s.push(t)},function(t){r.onError(t)},function(){i=!0,0===s.length&&(u.length>0?(r.onNext(!1),r.onCompleted()):o&&(r.onNext(!0),r.onCompleted()))});(le(t)||fe(t))&&(t=lr(t)),$t(t)&&(t=ir(t));var h=t.subscribe(function(t){if(s.length>0){var n=s.shift(),o=Yt(e)(n,t);if(o===Xt)return r.onError(o.e);o||(r.onNext(!1),r.onCompleted())}else i?(r.onNext(!1),r.onCompleted()):u.push(t)},function(t){r.onError(t)},function(){o=!0,0===u.length&&(s.length>0?(r.onNext(!1),r.onCompleted()):i&&(r.onNext(!0),r.onCompleted()))});return new an(c,h)},n)};var to=function(t){function e(e,n,r){this.source=e,this._i=n,this._d=r,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new eo(t,this._i,this._d))},e}(Hn),eo=function(e){function n(t,n,r){this._o=t,this._i=n,this._d=r,e.call(this)}return Qe(n,e),n.prototype.next=function(t){0===this._i--&&(this._o.onNext(t),this._o.onCompleted())},n.prototype.error=function(t){this._o.onError(t)},n.prototype.completed=function(){this._d===t?this._o.onError(new se):(this._o.onNext(this._d),this._o.onCompleted())},n}(Wn);Vn.elementAt=function(t,e){if(0>t)throw new se;return new to(this,t,e)};var no=function(e){function n(t,n,r){this._o=t,this._obj=n,this._s=r,this._i=0,this._hv=!1,this._v=null,e.call(this)}return Qe(n,e),n.prototype.next=function(t){var e=!1;if(this._obj.predicate){var n=Yt(this._obj.predicate)(t,this._i++,this._s);if(n===Xt)return this._o.onError(n.e);Boolean(n)&&(e=!0)}else this._obj.predicate||(e=!0);if(e){if(this._hv)return this._o.onError(new Error("Sequence contains more than one matching element"));this._hv=!0,this._v=t}},n.prototype.error=function(t){this._o.onError(t)},n.prototype.completed=function(){this._hv?(this._o.onNext(this._v),this._o.onCompleted()):this._obj.defaultValue===t?this._o.onError(new ie):(this._o.onNext(this._obj.defaultValue),this._o.onCompleted())},n}(Wn);Vn.single=function(t,e){var n={},r=this;if(n="object"==typeof arguments[0]?arguments[0]:{predicate:arguments[0],thisArg:arguments[1],defaultValue:arguments[2]},Gt(n.predicate)){var i=n.predicate;n.predicate=de(i,n.thisArg,3)}return new xs(function(t){return r.subscribe(new no(t,n,r))},r)};var ro=function(t){function e(e,n){this.source=e,this._obj=n,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new io(t,this._obj,this.source))},e}(Hn),io=function(e){function n(t,n,r){this._o=t,this._obj=n,this._s=r,this._i=0,e.call(this)}return Qe(n,e),n.prototype.next=function(t){if(this._obj.predicate){var e=Yt(this._obj.predicate)(t,this._i++,this._s);if(e===Xt)return this._o.onError(e.e);Boolean(e)&&(this._o.onNext(t),this._o.onCompleted())}else this._obj.predicate||(this._o.onNext(t),this._o.onCompleted())},n.prototype.error=function(t){this._o.onError(t)},n.prototype.completed=function(){this._obj.defaultValue===t?this._o.onError(new ie):(this._o.onNext(this._obj.defaultValue),this._o.onCompleted())},n}(Wn);Vn.first=function(){var t={};if(t="object"==typeof arguments[0]?arguments[0]:{predicate:arguments[0],thisArg:arguments[1],defaultValue:arguments[2]},Gt(t.predicate)){var e=t.predicate;t.predicate=de(e,t.thisArg,3)}return new ro(this,t)};var oo=function(t){function e(e,n){this.source=e,this._obj=n,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new so(t,this._obj,this.source))},e}(Hn),so=function(e){function n(t,n,r){this._o=t,this._obj=n,this._s=r,this._i=0,this._hv=!1,this._v=null,e.call(this)}return Qe(n,e),n.prototype.next=function(t){var e=!1;if(this._obj.predicate){var n=Yt(this._obj.predicate)(t,this._i++,this._s);if(n===Xt)return this._o.onError(n.e);Boolean(n)&&(e=!0)}else this._obj.predicate||(e=!0);e&&(this._hv=!0,this._v=t)},n.prototype.error=function(t){this._o.onError(t)},n.prototype.completed=function(){this._hv?(this._o.onNext(this._v),this._o.onCompleted()):this._obj.defaultValue===t?this._o.onError(new ie):(this._o.onNext(this._obj.defaultValue),this._o.onCompleted())},n}(Wn);Vn.last=function(){var t={};if(t="object"==typeof arguments[0]?arguments[0]:{predicate:arguments[0],thisArg:arguments[1],defaultValue:arguments[2]},Gt(t.predicate)){var e=t.predicate;t.predicate=de(e,t.thisArg,3)}return new oo(this,t)};var uo=function(t){function e(e,n,r,i){this._o=e,this._s=n,this._cb=r,this._y=i,this._i=0,t.call(this)}return Qe(e,t),e.prototype.next=function(t){var e=Yt(this._cb)(t,this._i,this._s);return e===Xt?this._o.onError(e.e):void(e?(this._o.onNext(this._y?this._i:t),this._o.onCompleted()):this._i++)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._y&&this._o.onNext(-1),this._o.onCompleted()},e}(Wn);Vn.find=function(t,e){return Q(this,t,e,!1)},Vn.findIndex=function(t,e){return Q(this,t,e,!0)};var co=function(t){function e(e){this.source=e,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new ho(t))},e}(Hn),ho=function(t){function e(e){this._o=e,this._s=new zt.Set,t.call(this)}return Qe(e,t),e.prototype.next=function(t){this._s.add(t)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(this._s),this._o.onCompleted()},e}(Wn);Vn.toSet=function(){if("undefined"==typeof zt.Set)throw new TypeError;return new co(this)};var ao=function(t){function e(e,n,r){this.source=e,this._k=n,this._e=r,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new po(t,this._k,this._e))},e}(Hn),po=function(t){function e(e,n,r){this._o=e,this._k=n,this._e=r,this._m=new zt.Map,t.call(this)}return Qe(e,t),e.prototype.next=function(t){var e=Yt(this._k)(t);if(e===Xt)return this._o.onError(e.e);var n=t;return this._e&&(n=Yt(this._e)(t),n===Xt)?this._o.onError(n.e):void this._m.set(e,n)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(this._m),this._o.onCompleted()},e}(Wn);Vn.toMap=function(t,e){if("undefined"==typeof zt.Map)throw new TypeError;return new ao(this,t,e)};var fo=function(t){function e(e,n,r){this.source=e,this._b=n,this._e=r,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new lo(t,this._b,this._e))},e}(Hn),lo=function(t){function e(e,n,r){this._o=e,this._b=n,this._e=r,this._i=0,t.call(this)}return Qe(e,t),e.prototype.next=function(t){this._i>=this._b&&(this._e===this._i?this._o.onCompleted():this._o.onNext(t)),this._i++},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(Wn);Vn.slice=function(t,e){var n=t||0;if(0>n)throw new It.ArgumentOutOfRangeError;if("number"==typeof e&&n>e)throw new It.ArgumentOutOfRangeError;return new fo(this,n,e)};var _o=function(t){function e(e,n,r){this.source=e,this._e=n,this._n=r,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this._n<0?(t.onNext(-1),t.onCompleted(),rn):this.source.subscribe(new bo(t,this._e,this._n))},e}(Hn),bo=function(t){function e(e,n,r){this._o=e,this._e=n,this._n=r,this._v=0,this._hv=!1,this._i=0,t.call(this)}return Qe(e,t),e.prototype.next=function(t){this._i>=this._n&&t===this._e&&(this._hv=!0,this._v=this._i),this._i++},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._hv?this._o.onNext(this._v):this._o.onNext(-1),this._o.onCompleted()},e}(Wn);Vn.lastIndexOf=function(t,e){var n=+e||0;return Math.abs(n)===1/0&&(n=0),new _o(this,t,n)},Kn.wrap=function(t){function e(){return Kn.spawn.call(this,t.apply(this,arguments))}return e.__generatorFunction__=t,e};var vo=Kn.spawn=function(){for(var t=arguments[0],e=this,n=[],r=1,i=arguments.length;i>r;r++)n.push(arguments[r]);return new xs(function(r){function i(e){var n=Yt(t.next).call(t,e);return n===Xt?r.onError(n.e):void s(n)}function o(e){var n=Yt(t.next).call(t,e);return n===Xt?r.onError(n.e):void s(n)}function s(t){if(t.done)return r.onNext(t.value),void r.onCompleted();var n=$.call(e,t.value),s=null,c=!1;Kn.isObservable(n)?u.add(n.subscribe(function(t){c=!0,s=t},o,function(){c&&i(s)})):o(new TypeError("type not supported"))}var u=new Ze;return Gt(t)&&(t=t.apply(e,n)),t&&Gt(t.next)?(i(),u):(r.onNext(t),r.onCompleted())})};Kn.start=function(t,e,n){return yo(t,e,n)()};var yo=Kn.toAsync=function(t,e,n){return bn(n)||(n=Sn),function(){var r=arguments,i=new Os;return n.schedule(null,function(){var n;try{n=t.apply(e,r)}catch(o){return void i.onError(o)}i.onNext(n),i.onCompleted()}),i.asObservable()}};Kn.fromCallback=function(t,e,n){return function(){"undefined"==typeof e&&(e=this);for(var r=arguments.length,i=new Array(r),o=0;r>o;o++)i[o]=arguments[o];return nt(t,e,n,i)}},Kn.fromNodeCallback=function(t,e,n){return function(){"undefined"==typeof e&&(e=this);
for(var r=arguments.length,i=new Array(r),o=0;r>o;o++)i[o]=arguments[o];return it(t,e,n,i)}},ut.prototype.dispose=function(){this.isDisposed||(this._e.removeEventListener(this._n,this._fn,!1),this.isDisposed=!0)},It.config.useNativeEvents=!1;var wo=function(t){function e(e,n,r){this._el=e,this._n=n,this._fn=r,t.call(this)}function n(t,e){return function(){var n=arguments[0];return Gt(e)&&(n=Yt(e).apply(null,arguments),n===Xt)?t.onError(n.e):void t.onNext(n)}}return Qe(e,t),e.prototype.subscribeCore=function(t){return ct(this._el,this._n,n(t,this._fn))},e}(Hn);Kn.fromEvent=function(t,e,n){return t.addListener?Eo(function(n){t.addListener(e,n)},function(n){t.removeListener(e,n)},n):It.config.useNativeEvents||"function"!=typeof t.on||"function"!=typeof t.off?new wo(t,e,n).publish().refCount():Eo(function(n){t.on(e,n)},function(n){t.off(e,n)},n)};var mo=function(t){function e(e,n,r){this._add=e,this._del=n,this._fn=r,t.call(this)}function n(t,e){return function(){var n=arguments[0];return Gt(e)&&(n=Yt(e).apply(null,arguments),n===Xt)?t.onError(n.e):void t.onNext(n)}}function r(t,e,n){this._del=t,this._fn=e,this._ret=n,this.isDisposed=!1}return Qe(e,t),e.prototype.subscribeCore=function(t){var e=n(t,this._fn),i=this._add(e);return new r(this._del,e,i)},r.prototype.dispose=function(){this.isDisposed||(Gt(this._del)&&this._del(this._fn,this._ret),this.isDisposed=!0)},e}(Hn),Eo=Kn.fromEventPattern=function(t,e,n){return new mo(t,e,n).publish().refCount()};Kn.startAsync=function(t){var e=Yt(t)();return e===Xt?Nr(e.e):ir(e)};var Co=function(t){function e(e,n){this.source=e,this.controller=new Ss,n&&n.subscribe?this.pauser=this.controller.merge(n):this.pauser=this.controller,t.call(this)}return Qe(e,t),e.prototype._subscribe=function(t){var e=this.source.publish(),n=e.subscribe(t),r=rn,i=this.pauser.distinctUntilChanged().subscribe(function(t){t?r=e.connect():(r.dispose(),r=rn)});return new pn([n,r,i])},e.prototype.pause=function(){this.controller.onNext(!1)},e.prototype.resume=function(){this.controller.onNext(!0)},e}(Kn);Vn.pausable=function(t){return new Co(this,t)};var go=function(e){function n(t,n){this.source=t,this.controller=new Ss,n&&n.subscribe?this.pauser=this.controller.merge(n):this.pauser=this.controller,e.call(this)}return Qe(n,e),n.prototype._subscribe=function(e){function n(){for(;i.length>0;)e.onNext(i.shift())}var r,i=[],o=ht(this.source,this.pauser.startWith(!1).distinctUntilChanged(),function(t,e){return{data:t,shouldFire:e}}).subscribe(function(o){r!==t&&o.shouldFire!==r?(r=o.shouldFire,o.shouldFire&&n()):(r=o.shouldFire,o.shouldFire?e.onNext(o.data):i.push(o.data))},function(t){n(),e.onError(t)},function(){n(),e.onCompleted()});return o},n.prototype.pause=function(){this.controller.onNext(!1)},n.prototype.resume=function(){this.controller.onNext(!0)},n}(Kn);Vn.pausableBuffered=function(t){return new go(this,t)};var xo=function(t){function e(e,n,r){t.call(this),this.subject=new No(n,r),this.source=e.multicast(this.subject).refCount()}return Qe(e,t),e.prototype._subscribe=function(t){return this.source.subscribe(t)},e.prototype.request=function(t){return this.subject.request(null==t?-1:t)},e}(Kn),No=function(t){function e(e,n){null==e&&(e=!0),t.call(this),this.subject=new Ss,this.enableQueue=e,this.queue=e?[]:null,this.requestedCount=0,this.requestedDisposable=null,this.error=null,this.hasFailed=!1,this.hasCompleted=!1,this.scheduler=n||gn}return Qe(e,t),$e(e.prototype,Pn,{_subscribe:function(t){return this.subject.subscribe(t)},onCompleted:function(){this.hasCompleted=!0,this.enableQueue&&0!==this.queue.length?this.queue.push(qn.createOnCompleted()):(this.subject.onCompleted(),this.disposeCurrentRequest())},onError:function(t){this.hasFailed=!0,this.error=t,this.enableQueue&&0!==this.queue.length?this.queue.push(qn.createOnError(t)):(this.subject.onError(t),this.disposeCurrentRequest())},onNext:function(t){this.requestedCount<=0?this.enableQueue&&this.queue.push(qn.createOnNext(t)):(0===this.requestedCount--&&this.disposeCurrentRequest(),this.subject.onNext(t))},_processRequest:function(t){if(this.enableQueue)for(;this.queue.length>0&&(t>0||"N"!==this.queue[0].kind);){var e=this.queue.shift();e.accept(this.subject),"N"===e.kind?t--:(this.disposeCurrentRequest(),this.queue=[])}return t},request:function(t){this.disposeCurrentRequest();var e=this;return this.requestedDisposable=this.scheduler.schedule(t,function(t,n){var r=e._processRequest(n),i=e.hasCompleted||e.hasFailed;return!i&&r>0?(e.requestedCount=r,nn(function(){e.requestedCount=0})):void 0}),this.requestedDisposable},disposeCurrentRequest:function(){this.requestedDisposable&&(this.requestedDisposable.dispose(),this.requestedDisposable=null)}}),e}(Kn);Vn.controlled=function(t,e){return t&&bn(t)&&(e=t,t=!0),null==t&&(t=!0),new xo(this,t,e)};var Do=function(t){function e(e){t.call(this),this.source=e}function n(t,e){e.source.request(1)}Qe(e,t),e.prototype._subscribe=function(t){return this.subscription=this.source.subscribe(new r(t,this,this.subscription)),new an(this.subscription,Sn.schedule(this,n))};var r=function(t){function n(e,n,r){t.call(this),this.observer=e,this.observable=n,this.cancel=r,this.scheduleDisposable=null}function r(t,e){e.observable.source.request(1)}return Qe(n,t),n.prototype.completed=function(){this.observer.onCompleted(),this.dispose()},n.prototype.error=function(t){this.observer.onError(t),this.dispose()},n.prototype.next=function(t){this.observer.onNext(t),this.scheduleDisposable=Sn.schedule(this,r)},e.dispose=function(){this.observer=null,this.cancel&&(this.cancel.dispose(),this.cancel=null),this.scheduleDisposable&&(this.scheduleDisposable.dispose(),this.scheduleDisposable=null),t.prototype.dispose.call(this)},n}(Wn);return e}(Kn);xo.prototype.stopAndWait=function(){return new Do(this)};var Ao=function(t){function e(e,n){t.call(this),this.source=e,this.windowSize=n}function n(t,e){e.source.request(e.windowSize)}Qe(e,t),e.prototype._subscribe=function(t){return this.subscription=this.source.subscribe(new r(t,this,this.subscription)),new an(this.subscription,Sn.schedule(this,n))};var r=function(t){function e(e,n,r){this.observer=e,this.observable=n,this.cancel=r,this.received=0,this.scheduleDisposable=null,t.call(this)}function n(t,e){e.observable.source.request(e.observable.windowSize)}return Qe(e,t),e.prototype.completed=function(){this.observer.onCompleted(),this.dispose()},e.prototype.error=function(t){this.observer.onError(t),this.dispose()},e.prototype.next=function(t){this.observer.onNext(t),this.received=++this.received%this.observable.windowSize,0===this.received&&(this.scheduleDisposable=Sn.schedule(this,n))},e.prototype.dispose=function(){this.observer=null,this.cancel&&(this.cancel.dispose(),this.cancel=null),this.scheduleDisposable&&(this.scheduleDisposable.dispose(),this.scheduleDisposable=null),t.prototype.dispose.call(this)},e}(Wn);return e}(Kn);xo.prototype.windowed=function(t){return new Ao(this,t)},Vn.pipe=function(t){function e(){n.resume()}var n=this.pausableBuffered();return t.addListener("drain",e),n.subscribe(function(e){!t.write(String(e))&&n.pause()},function(e){t.emit("error",e)},function(){!t._isStdio&&t.end(),t.removeListener("drain",e)}),n.resume(),t};var So=function(t){function e(e,n,r){this.source=e,this._fn1=n,this._fn2=r,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){var e=this.source.multicast(this._fn1());return new an(this._fn2(e).subscribe(t),e.connect())},e}(Hn);Vn.multicast=function(t,e){return Gt(t)?new So(this,t,e):new ko(this,t)},Vn.publish=function(t){return t&&Gt(t)?this.multicast(function(){return new Ss},t):this.multicast(new Ss)},Vn.share=function(){return this.publish().refCount()},Vn.publishLast=function(t){return t&&Gt(t)?this.multicast(function(){return new Os},t):this.multicast(new Os)},Vn.publishValue=function(t,e){return 2===arguments.length?this.multicast(function(){return new qs(e)},t):this.multicast(new qs(t))},Vn.shareValue=function(t){return this.publishValue(t).refCount()},Vn.replay=function(t,e,n,r){return t&&Gt(t)?this.multicast(function(){return new ks(e,n,r)},t):this.multicast(new ks(e,n,r))},Vn.shareReplay=function(t,e,n){return this.replay(null,t,e,n).refCount()};var Oo=function(t,e){this._s=t,this._o=e};Oo.prototype.dispose=function(){if(!this._s.isDisposed&&null!==this._o){var t=this._s.observers.indexOf(this._o);this._s.observers.splice(t,1),this._o=null}};var qo=function(t){function e(e){this.source=e,this._count=0,this._connectableSubscription=null,t.call(this)}function n(t,e){this._p=t,this._s=e,this.isDisposed=!1}return Qe(e,t),e.prototype.subscribeCore=function(t){var e=this.source.subscribe(t);return 1===++this._count&&(this._connectableSubscription=this.source.connect()),new n(this,e)},n.prototype.dispose=function(){this.isDisposed||(this.isDisposed=!0,this._s.dispose(),0===--this._p._count&&this._p._connectableSubscription.dispose())},e}(Hn),ko=It.ConnectableObservable=function(t){function e(e,n){this.source=e,this._connection=null,this._source=e.asObservable(),this._subject=n,t.call(this)}function n(t,e){this._p=t,this._s=e}return Qe(e,t),n.prototype.dispose=function(){this._s&&(this._s.dispose(),this._s=null,this._p._connection=null)},e.prototype.connect=function(){if(!this._connection){var t=this._source.subscribe(this._subject);this._connection=new n(this,t)}return this._connection},e.prototype._subscribe=function(t){return this._subject.subscribe(t)},e.prototype.refCount=function(){return new qo(this)},e}(Kn);Vn.singleInstance=function(){function t(){return r||(r=!0,e=n["finally"](function(){r=!1}).publish().refCount()),e}var e,n=this,r=!1;return new xs(function(e){return t().subscribe(e)})},Vn.join=function(t,e,n,r){var i=this;return new xs(function(o){var s=new Ze,u=!1,c=!1,h=0,a=0,p=new zo,f=new zo,l=function(t){o.onError(t)};return s.add(i.subscribe(function(t){var n=h++,i=new cn;p.set(n,t),s.add(i);var c=Yt(e)(t);return c===Xt?o.onError(c.e):(i.setDisposable(c.take(1).subscribe(Bt,l,function(){p["delete"](n)&&0===p.size&&u&&o.onCompleted(),s.remove(i)})),void f.forEach(function(e){var n=Yt(r)(t,e);return n===Xt?o.onError(n.e):void o.onNext(n)}))},l,function(){u=!0,(c||0===p.size)&&o.onCompleted()})),s.add(t.subscribe(function(t){var e=a++,i=new cn;f.set(e,t),s.add(i);var u=Yt(n)(t);return u===Xt?o.onError(u.e):(i.setDisposable(u.take(1).subscribe(Bt,l,function(){f["delete"](e)&&0===f.size&&c&&o.onCompleted(),s.remove(i)})),void p.forEach(function(e){var n=Yt(r)(e,t);return n===Xt?o.onError(n.e):void o.onNext(n)}))},l,function(){c=!0,(u||0===f.size)&&o.onCompleted()})),s},i)},Vn.groupJoin=function(t,e,n,r){var i=this;return new xs(function(o){function s(t){}var u=new Ze,c=new fn(u),h=new zo,a=new zo,p=0,f=0,s=function(t){return function(e){e.onError(t)}};return u.add(i.subscribe(function(t){var n=new Ss,i=p++;h.set(i,n);var f=Yt(r)(t,Ge(n,c));if(f===Xt)return h.forEach(s(f.e)),o.onError(f.e);o.onNext(f),a.forEach(function(t){n.onNext(t)});var l=new cn;u.add(l);var d=Yt(e)(t);return d===Xt?(h.forEach(s(d.e)),o.onError(d.e)):void l.setDisposable(d.take(1).subscribe(Bt,function(t){h.forEach(s(t)),o.onError(t)},function(){h["delete"](i)&&n.onCompleted(),u.remove(l)}))},function(t){h.forEach(s(t)),o.onError(t)},function(){o.onCompleted()})),u.add(t.subscribe(function(t){var e=f++;a.set(e,t);var r=new cn;u.add(r);var i=Yt(n)(t);return i===Xt?(h.forEach(s(i.e)),o.onError(i.e)):(r.setDisposable(i.take(1).subscribe(Bt,function(t){h.forEach(s(t)),o.onError(t)},function(){a["delete"](e),u.remove(r)})),void h.forEach(function(e){e.onNext(t)}))},function(t){h.forEach(s(t)),o.onError(t)})),c},i)},Vn.buffer=function(){return this.window.apply(this,arguments).flatMap(W)},Vn.window=function(t,e){return 1===arguments.length&&"function"!=typeof arguments[0]?pt.call(this,t):"function"==typeof t?ft.call(this,t):at.call(this,t,e)};var jo=function(t){function e(e){this.source=e,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Fo(t))},e}(Hn),Fo=function(t){function e(e){this._o=e,this._p=null,this._hp=!1,t.call(this)}return Qe(e,t),e.prototype.next=function(t){this._hp?this._o.onNext([this._p,t]):this._hp=!0,this._p=t},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(Wn);Vn.pairwise=function(){return new jo(this)},Vn.partition=function(t,e){var n=de(t,e,3);return[this.filter(t,e),this.filter(function(t,e,r){return!n(t,e,r)})]};var Ro=function(t){function e(t,e){this.c=t,this.s=e}return Qe(e,t),e.prototype[ae]=function(){var t=this;return{next:function(){return t.c()?{done:!1,value:t.s}:{done:!0,value:void 0}}}},e}(Qn);Vn.letBind=Vn.let=function(t){return t(this)},Kn["if"]=function(t,e,n){return ur(function(){return n||(n=ar()),$t(e)&&(e=ir(e)),$t(n)&&(n=ir(n)),"function"==typeof n.now&&(n=ar(n)),t()?e:n})},Kn["for"]=Kn.forIn=function(t,e,n){return tr(t,e,n).concat()};var To=Kn["while"]=Kn.whileDo=function(t,e){return $t(e)&&(e=ir(e)),lt(t,e).concat()};Vn.doWhile=function(t){return Tr([this,To(t,this)])},Kn["case"]=function(t,e,n){return ur(function(){$t(n)&&(n=ir(n)),n||(n=ar()),bn(n)&&(n=ar(n));var r=e[t()];return $t(r)&&(r=ir(r)),r||n})};var Mo=function(t){function e(e,n,r){this.source=e,this._fn=n,this._scheduler=r,t.call(this)}function n(t,e){var n,r=t[0],i=t[1];if(!(r.q.length>0))return void(r.isAcquired=!1);n=r.q.shift();var o=new cn;r.d.add(o),o.setDisposable(n.subscribe(new Po(r,i,o))),e([r,i])}return Qe(e,t),e.prototype._ensureActive=function(t){var e=!1;t.q.length>0&&(e=!t.isAcquired,t.isAcquired=!0),e&&t.m.setDisposable(this._scheduler.scheduleRecursive([t,this],n))},e.prototype.subscribeCore=function(t){var e=new hn,n=new Ze(e),r={q:[],m:e,d:n,activeCount:0,isAcquired:!1,o:t};return r.q.push(this.source),r.activeCount++,this._ensureActive(r),n},e}(Hn),Po=function(t){function e(e,n,r){this._s=e,this._p=n,this._m1=r,t.call(this)}return Qe(e,t),e.prototype.next=function(t){this._s.o.onNext(t);var e=Yt(this._p._fn)(t);return e===Xt?this._s.o.onError(e.e):(this._s.q.push(e),this._s.activeCount++,void this._p._ensureActive(this._s))},e.prototype.error=function(t){this._s.o.onError(t)},e.prototype.completed=function(){this._s.d.remove(this._m1),this._s.activeCount--,0===this._s.activeCount&&this._s.o.onCompleted()},e}(Wn);Vn.expand=function(t,e){return bn(e)||(e=gn),new Mo(this,t,e)};var Lo=function(t){function e(e,n){this._sources=e,this._cb=n,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){if(0===this._sources.length)return t.onCompleted(),rn;for(var e=this._sources.length,n={finished:!1,hasResults:new Array(e),hasCompleted:new Array(e),results:new Array(e)},r=new Ze,i=0,o=this._sources.length;o>i;i++){var s=this._sources[i];$t(s)&&(s=ir(s)),r.add(s.subscribe(new Vo(t,n,i,this._cb,r)))}return r},e}(Hn),Vo=function(t){function e(e,n,r,i,o){this._o=e,this._s=n,this._i=r,this._cb=i,this._subs=o,t.call(this)}return Qe(e,t),e.prototype.next=function(t){this._s.finished||(this._s.hasResults[this._i]=!0,this._s.results[this._i]=t)},e.prototype.error=function(t){this._s.finished=!0,this._o.onError(t),this._subs.dispose()},e.prototype.completed=function(){if(!this._s.finished){if(!this._s.hasResults[this._i])return this._o.onCompleted();this._s.hasCompleted[this._i]=!0;for(var t=0;t<this._s.results.length;t++)if(!this._s.hasCompleted[t])return;this._s.finished=!0;var e=Yt(this._cb).apply(null,this._s.results);if(e===Xt)return this._o.onError(e.e);this._o.onNext(e),this._o.onCompleted()}},e}(Wn);Kn.forkJoin=function(){for(var t=arguments.length,e=new Array(t),n=0;t>n;n++)e[n]=arguments[n];var r=Gt(e[t-1])?e.pop():P;return Array.isArray(e[0])&&(e=e[0]),new Lo(e,r)},Vn.forkJoin=function(){for(var t=arguments.length,e=new Array(t),n=0;t>n;n++)e[n]=arguments[n];return Array.isArray(e[0])?e[0].unshift(this):e.unshift(this),Kn.forkJoin.apply(null,e)},Vn.manySelect=Vn.extend=function(t,e){bn(e)||(e=It.Scheduler.immediate);var n=this;return ur(function(){var r;return n.map(function(t){var e=new Wo(t);return r&&r.onNext(t),r=e,e}).tap(Bt,function(t){r&&r.onError(t)},function(){r&&r.onCompleted()}).observeOn(e).map(t)},n)};var Wo=function(t){function e(e){t.call(this),this.head=e,this.tail=new Os}return Qe(e,t),$e(e.prototype,Pn,{_subscribe:function(t){var e=new Ze;return e.add(gn.schedule(this,function(n,r){t.onNext(r.head),e.add(r.tail.mergeAll().subscribe(t))})),e},onCompleted:function(){this.onNext(Kn.empty())},onError:function(t){this.onNext(Kn["throw"](t))},onNext:function(t){this.tail.onNext(t),this.tail.onCompleted()}}),e}(Kn),zo=zt.Map||function(){function e(){this.size=0,this._values=[],this._keys=[]}return e.prototype["delete"]=function(t){var e=this._keys.indexOf(t);return-1===e?!1:(this._values.splice(e,1),this._keys.splice(e,1),this.size--,!0)},e.prototype.get=function(e){var n=this._keys.indexOf(e);return-1===n?t:this._values[n]},e.prototype.set=function(t,e){var n=this._keys.indexOf(t);return-1===n?(this._keys.push(t),this._values.push(e),this.size++):this._values[n]=e,this},e.prototype.forEach=function(t,e){for(var n=0;n<this.size;n++)t.call(e,this._values[n],this._keys[n])},e}();dt.prototype.and=function(t){return new dt(this.patterns.concat(t))},dt.prototype.thenDo=function(t){return new _t(this,t)},_t.prototype.activate=function(t,e,n){for(var r=[],i=bt(e),o=0,s=this.expression.patterns.length;s>o;o++)r.push(yt(t,this.expression.patterns[o],i));var u=new wt(r,vt(this,e),function(){for(var t=0,e=r.length;e>t;t++)r[t].removeActivePlan(u);n(u)});for(o=0,s=r.length;s>o;o++)r[o].addActivePlan(u);return u},wt.prototype.dequeue=function(){this.joinObservers.forEach(function(t){t.queue.shift()})},wt.prototype.match=function(){var t,e,n=!0;for(t=0,e=this.joinObserverArray.length;e>t;t++)if(0===this.joinObserverArray[t].queue.length){n=!1;break}if(n){var r=[],i=!1;for(t=0,e=this.joinObserverArray.length;e>t;t++)r.push(this.joinObserverArray[t].queue[0]),"C"===this.joinObserverArray[t].queue[0].kind&&(i=!0);if(i)this.onCompleted();else{this.dequeue();var o=[];for(t=0,e=r.length;t<r.length;t++)o.push(r[t].value);this.onNext.apply(this,o)}}};var Io=function(t){function e(e,n){t.call(this),this.source=e,this.onError=n,this.queue=[],this.activePlans=[],this.subscription=new cn,this.isDisposed=!1}Qe(e,t);var n=e.prototype;return n.next=function(t){if(!this.isDisposed){if("E"===t.kind)return this.onError(t.error);this.queue.push(t);for(var e=this.activePlans.slice(0),n=0,r=e.length;r>n;n++)e[n].match()}},n.error=Bt,n.completed=Bt,n.addActivePlan=function(t){this.activePlans.push(t)},n.subscribe=function(){this.subscription.setDisposable(this.source.materialize().subscribe(this))},n.removeActivePlan=function(t){this.activePlans.splice(this.activePlans.indexOf(t),1),0===this.activePlans.length&&this.dispose()},n.dispose=function(){t.prototype.dispose.call(this),this.isDisposed||(this.isDisposed=!0,this.subscription.dispose())},e}(Wn);Vn.and=function(t){return new dt([this,t])},Vn.thenDo=function(t){return new dt([this]).thenDo(t)},Kn.when=function(){var t,e=arguments.length;if(Array.isArray(arguments[0]))t=arguments[0];else{t=new Array(e);for(var n=0;e>n;n++)t[n]=arguments[n]}return new xs(function(e){var n=[],r=new zo,i=Ln(function(t){e.onNext(t)},function(t){r.forEach(function(e){e.onError(t)}),e.onError(t)},function(t){e.onCompleted()});try{for(var o=0,s=t.length;s>o;o++)n.push(t[o].activate(r,i,function(t){var r=n.indexOf(t);n.splice(r,1),0===n.length&&e.onCompleted()}))}catch(u){return Nr(u).subscribe(e)}var c=new Ze;return r.forEach(function(t){t.subscribe(),c.add(t)}),c})};var Bo=function(t){function e(e,n){this._dt=e,this._s=n,t.call(this)}function n(t,e){e.onNext(0),e.onCompleted()}return Qe(e,t),e.prototype.subscribeCore=function(t){return this._s.scheduleFuture(t,this._dt,n)},e}(Hn),Uo=Kn.interval=function(t,e){return Ct(t,t,bn(e)?e:Sn)};Kn.timer=function(e,n,r){var i;return bn(r)||(r=Sn),null!=n&&"number"==typeof n?i=n:bn(n)&&(r=n),(e instanceof Date||"number"==typeof e)&&i===t?mt(e,r):e instanceof Date&&i!==t?Et(e,n,r):Ct(e,i,r)};Vn.delay=function(){var t=arguments[0];if("number"==typeof t||t instanceof Date){var e=t,n=arguments[1];return bn(n)||(n=Sn),e instanceof Date?xt(this,e,n):gt(this,e,n)}if(Kn.isObservable(t)||Gt(t))return Nt(this,t,arguments[1]);throw new Error("Invalid arguments")};var Ko=function(t){function e(e,n,r){bn(r)||(r=Sn),this.source=e,this._dt=n,this._s=r,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){var e=new hn;return new an(this.source.subscribe(new Ho(t,this._dt,this._s,e)),e)},e}(Hn),Ho=function(t){function e(e,n,r,i){this._o=e,this._d=n,this._scheduler=r,this._c=i,this._v=null,this._hv=!1,this._id=0,t.call(this)}return Qe(e,t),e.prototype.next=function(t){this._hv=!0,this._v=t;var e=++this._id,n=new cn;this._c.setDisposable(n),n.setDisposable(this._scheduler.scheduleFuture(this,this._d,function(n,r){r._hv&&r._id===e&&r._o.onNext(t),r._hv=!1}))},e.prototype.error=function(t){this._c.dispose(),this._o.onError(t),this._hv=!1,this._id++},e.prototype.completed=function(){this._c.dispose(),this._hv&&this._o.onNext(this._v),this._o.onCompleted(),this._hv=!1,this._id++},e}(Wn);Vn.debounce=function(){if(Gt(arguments[0]))return Dt(this,arguments[0]);if("number"==typeof arguments[0])return new Ko(this,arguments[0],arguments[1]);throw new Error("Invalid arguments")},Vn.windowWithTime=function(t,e,n){var r,i=this;return null==e&&(r=t),bn(n)||(n=Sn),"number"==typeof e?r=e:bn(e)&&(r=t,n=e),new xs(function(e){function o(){var t=new cn,i=!1,s=!1;p.setDisposable(t),h===c?(i=!0,s=!0):c>h?i=!0:s=!0;var l=i?h:c,d=l-f;f=l,i&&(h+=r),s&&(c+=r),t.setDisposable(n.scheduleFuture(null,d,function(){if(s){var t=new Ss;a.push(t),e.onNext(Ge(t,u))}i&&a.shift().onCompleted(),o()}))}var s,u,c=r,h=t,a=[],p=new hn,f=0;return s=new Ze(p),u=new fn(s),a.push(new Ss),e.onNext(Ge(a[0],u)),o(),s.add(i.subscribe(function(t){for(var e=0,n=a.length;n>e;e++)a[e].onNext(t)},function(t){for(var n=0,r=a.length;r>n;n++)a[n].onError(t);e.onError(t)},function(){for(var t=0,n=a.length;n>t;t++)a[t].onCompleted();e.onCompleted()})),u},i)},Vn.windowWithTimeOrCount=function(t,e,n){var r=this;return bn(n)||(n=Sn),new xs(function(i){function o(e){var r=new cn;s.setDisposable(r),r.setDisposable(n.scheduleFuture(null,t,function(){if(e===a){h=0;var t=++a;p.onCompleted(),p=new Ss,i.onNext(Ge(p,c)),o(t)}}))}var s=new hn,u=new Ze(s),c=new fn(u),h=0,a=0,p=new Ss;return i.onNext(Ge(p,c)),o(0),u.add(r.subscribe(function(t){var n=0,r=!1;p.onNext(t),++h===e&&(r=!0,h=0,n=++a,p.onCompleted(),p=new Ss,i.onNext(Ge(p,c))),r&&o(n)},function(t){p.onError(t),i.onError(t)},function(){p.onCompleted(),i.onCompleted()})),c},r)},Vn.bufferWithTime=function(t,e,n){return this.windowWithTime(t,e,n).flatMap(W)},Vn.bufferWithTimeOrCount=function(t,e,n){return this.windowWithTimeOrCount(t,e,n).flatMap(W)};var Jo=function(t){function e(e,n){this.source=e,this._s=n,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Qo(t,this._s))},e}(Hn),Qo=function(t){function e(e,n){this._o=e,this._s=n,this._l=n.now(),t.call(this)}return Qe(e,t),e.prototype.next=function(t){var e=this._s.now(),n=e-this._l;this._l=e,this._o.onNext({value:t,interval:n})},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(Wn);Vn.timeInterval=function(t){return bn(t)||(t=Sn),new Jo(this,t)};var $o=function(t){function e(e,n){this.source=e,this._s=n,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Go(t,this._s))},e}(Hn),Go=function(t){function e(e,n){this._o=e,this._s=n,t.call(this)}return Qe(e,t),e.prototype.next=function(t){this._o.onNext({value:t,timestamp:this._s.now()})},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(Wn);Vn.timestamp=function(t){return bn(t)||(t=Sn),new $o(this,t)};var Xo=function(t){function e(e,n){this.source=e,this._sampler=n,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){var e={o:t,atEnd:!1,value:null,hasValue:!1,sourceSubscription:new cn};return e.sourceSubscription.setDisposable(this.source.subscribe(new Zo(e))),new an(e.sourceSubscription,this._sampler.subscribe(new Yo(e)))},e}(Hn),Yo=function(t){function e(e){this._s=e,t.call(this)}return Qe(e,t),e.prototype._handleMessage=function(){this._s.hasValue&&(this._s.hasValue=!1,this._s.o.onNext(this._s.value)),this._s.atEnd&&this._s.o.onCompleted()},e.prototype.next=function(){this._handleMessage()},e.prototype.error=function(t){this._s.onError(t)},e.prototype.completed=function(){this._handleMessage()},e}(Wn),Zo=function(t){function e(e){this._s=e,t.call(this)}return Qe(e,t),e.prototype.next=function(t){this._s.hasValue=!0,this._s.value=t},e.prototype.error=function(t){this._s.o.onError(t)},e.prototype.completed=function(){this._s.atEnd=!0,this._s.sourceSubscription.dispose()},e}(Wn);Vn.sample=function(t,e){return bn(e)||(e=Sn),"number"==typeof t?new Xo(this,Uo(t,e)):new Xo(this,t)};var ts=It.TimeoutError=function(t){this.message=t||"Timeout has occurred",this.name="TimeoutError",Error.call(this)};ts.prototype=Object.create(Error.prototype),Vn.timeout=function(){var t=arguments[0];if(t instanceof Date||"number"==typeof t)return St(this,t,arguments[1],arguments[2]);if(Kn.isObservable(t)||Gt(t))return At(this,t,arguments[1],arguments[2]);throw new Error("Invalid arguments")};var es=function(t){function e(e,n,r,i,o,s){this._state=e,this._cndFn=n,this._itrFn=r,this._resFn=i,this._timeFn=o,this._s=s,t.call(this)}function n(t,e){if(t.hasResult&&t.o.onNext(t.result),t.first)t.first=!1;else if(t.newState=Yt(t.self._itrFn)(t.newState),t.newState===Xt)return t.o.onError(t.newState.e);if(t.hasResult=Yt(t.self._cndFn)(t.newState),t.hasResult===Xt)return t.o.onError(t.hasResult.e);if(t.hasResult){if(t.result=Yt(t.self._resFn)(t.newState),t.result===Xt)return t.o.onError(t.result.e);var n=Yt(t.self._timeFn)(t.newState);if(n===Xt)return t.o.onError(n.e);e(t,n)}else t.o.onCompleted()}return Qe(e,t),e.prototype.subscribeCore=function(t){var e={o:t,self:this,newState:this._state,first:!0,hasResult:!1};return this._s.scheduleRecursiveFuture(e,new Date(this._s.now()),n)},e}(Hn);Kn.generateWithAbsoluteTime=function(t,e,n,r,i,o){return bn(o)||(o=Sn),new es(t,e,n,r,i,o)};var ns=function(t){function e(e,n,r,i,o,s){this._state=e,this._cndFn=n,this._itrFn=r,this._resFn=i,this._timeFn=o,this._s=s,t.call(this)}function n(t,e){if(t.hasResult&&t.o.onNext(t.result),t.first)t.first=!1;else if(t.newState=Yt(t.self._itrFn)(t.newState),t.newState===Xt)return t.o.onError(t.newState.e);if(t.hasResult=Yt(t.self._cndFn)(t.newState),t.hasResult===Xt)return t.o.onError(t.hasResult.e);if(t.hasResult){if(t.result=Yt(t.self._resFn)(t.newState),t.result===Xt)return t.o.onError(t.result.e);var n=Yt(t.self._timeFn)(t.newState);if(n===Xt)return t.o.onError(n.e);e(t,n)}else t.o.onCompleted()}return Qe(e,t),e.prototype.subscribeCore=function(t){var e={o:t,self:this,newState:this._state,first:!0,hasResult:!1};return this._s.scheduleRecursiveFuture(e,0,n)},e}(Hn);Kn.generateWithRelativeTime=function(t,e,n,r,i,o){return bn(o)||(o=Sn),new ns(t,e,n,r,i,o)};var rs=function(t){function e(e,n,r){this.source=e,this._dt=n,this._s=r,t.call(this)}function n(t,e){var n=e[0],r=e[1],i=e[2];i.setDisposable(n.subscribe(r))}return Qe(e,t),e.prototype.subscribeCore=function(t){var e=new hn;return e.setDisposable(this._s.scheduleFuture([this.source,t,e],this._dt,n)),e},e}(Hn);Vn.delaySubscription=function(t,e){return bn(e)||(e=Sn),new rs(this,t,e)};var is=function(t){function e(e,n,r){this.source=e,this._d=n,this._s=r,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new os(t,this))},e}(Hn),os=function(t){function e(e,n){this._o=e,this._s=n._s,this._d=n._d,this._q=[],t.call(this)}return Qe(e,t),e.prototype.next=function(t){var e=this._s.now();for(this._q.push({interval:e,value:t});this._q.length>0&&e-this._q[0].interval>=this._d;)this._o.onNext(this._q.shift().value)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){for(var t=this._s.now();this._q.length>0&&t-this._q[0].interval>=this._d;)this._o.onNext(this._q.shift().value);this._o.onCompleted()},e}(Wn);Vn.skipLastWithTime=function(t,e){return bn(e)||(e=Sn),new is(this,t,e)};var ss=function(t){function e(e,n,r){this.source=e,this._d=n,this._s=r,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new us(t,this._d,this._s))},e}(Hn),us=function(t){function e(e,n,r){this._o=e,this._d=n,this._s=r,this._q=[],t.call(this)}return Qe(e,t),e.prototype.next=function(t){var e=this._s.now();for(this._q.push({interval:e,value:t});this._q.length>0&&e-this._q[0].interval>=this._d;)this._q.shift()},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){for(var t=this._s.now();this._q.length>0;){var e=this._q.shift();t-e.interval<=this._d&&this._o.onNext(e.value)}this._o.onCompleted()},e}(Wn);Vn.takeLastWithTime=function(t,e){return bn(e)||(e=Sn),new ss(this,t,e)},Vn.takeLastBufferWithTime=function(t,e){var n=this;return bn(e)||(e=Sn),new xs(function(r){var i=[];return n.subscribe(function(n){var r=e.now();for(i.push({interval:r,value:n});i.length>0&&r-i[0].interval>=t;)i.shift()},function(t){r.onError(t)},function(){for(var n=e.now(),o=[];i.length>0;){var s=i.shift();n-s.interval<=t&&o.push(s.value)}r.onNext(o),r.onCompleted()})},n)};var cs=function(t){function e(e,n,r){this.source=e,this._d=n,this._s=r,t.call(this)}function n(t,e){e.onCompleted()}return Qe(e,t),e.prototype.subscribeCore=function(t){return new an(this._s.scheduleFuture(t,this._d,n),this.source.subscribe(t))},e}(Hn);Vn.takeWithTime=function(t,e){return bn(e)||(e=Sn),new cs(this,t,e)};var hs=function(t){function e(e,n,r){this.source=e,this._d=n,this._s=r,this._open=!1,t.call(this)}function n(t,e){e._open=!0}return Qe(e,t),e.prototype.subscribeCore=function(t){return new an(this._s.scheduleFuture(this,this._d,n),this.source.subscribe(new as(t,this)))},e}(Hn),as=function(t){function e(e,n){this._o=e,this._p=n,t.call(this)}return Qe(e,t),e.prototype.next=function(t){this._p._open&&this._o.onNext(t)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(Wn);Vn.skipWithTime=function(t,e){return bn(e)||(e=Sn),new hs(this,t,e)};var ps=function(t){function e(e,n,r){this.source=e,this._st=n,this._s=r,t.call(this)}function n(t,e){e._open=!0}return Qe(e,t),e.prototype.subscribeCore=function(t){return this._open=!1,new an(this._s.scheduleFuture(this,this._st,n),this.source.subscribe(new fs(t,this)))},e}(Hn),fs=function(t){function e(e,n){this._o=e,this._p=n,t.call(this)}return Qe(e,t),e.prototype.next=function(t){this._p._open&&this._o.onNext(t)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(Wn);Vn.skipUntilWithTime=function(t,e){return bn(e)||(e=Sn),new ps(this,t,e)},Vn.takeUntilWithTime=function(t,e){bn(e)||(e=Sn);var n=this;return new xs(function(r){return new an(e.scheduleFuture(r,t,function(t,e){e.onCompleted()}),n.subscribe(r))},n)},Vn.throttle=function(t,e){bn(e)||(e=Sn);var n=+t||0;if(0>=n)throw new RangeError("windowDuration cannot be less or equal zero.");var r=this;return new xs(function(t){var i=0;return r.subscribe(function(r){var o=e.now();(0===i||o-i>=n)&&(i=o,t.onNext(r))},function(e){t.onError(e)},function(){t.onCompleted()})},r)};var ls=function(t){function e(e,n){this._o=e,this._xform=n,t.call(this)}return Qe(e,t),e.prototype.next=function(t){var e=Yt(this._xform["@@transducer/step"]).call(this._xform,this._o,t);e===Xt&&this._o.onError(e.e)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._xform["@@transducer/result"](this._o)},e}(Wn);Vn.transduce=function(t){var e=this;return new xs(function(n){var r=t(Ot(n));return e.subscribe(new ls(n,r))},e)};var ds=function(t){function e(e){this.source=e,t.call(this)}return Qe(e,t),
e.prototype.subscribeCore=function(t){var e=new cn,n=new Ze,r={hasCurrent:!1,isStopped:!1,o:t,g:n};return n.add(e),e.setDisposable(this.source.subscribe(new _s(r))),n},e}(Hn),_s=function(t){function e(e){this._s=e,t.call(this)}function n(e,n){this._s=e,this._i=n,t.call(this)}return Qe(e,t),e.prototype.next=function(t){if(!this._s.hasCurrent){this._s.hasCurrent=!0,$t(t)&&(t=ir(t));var e=new cn;this._s.g.add(e),e.setDisposable(t.subscribe(new n(this._s,e)))}},e.prototype.error=function(t){this._s.o.onError(t)},e.prototype.completed=function(){this._s.isStopped=!0,!this._s.hasCurrent&&1===this._s.g.length&&this._s.o.onCompleted()},Qe(n,t),n.prototype.next=function(t){this._s.o.onNext(t)},n.prototype.error=function(t){this._s.o.onError(t)},n.prototype.completed=function(){this._s.g.remove(this._i),this._s.hasCurrent=!1,this._s.isStopped&&1===this._s.g.length&&this._s.o.onCompleted()},e}(Wn);Vn.switchFirst=function(){return new ds(this)},Vn.flatMapFirst=Vn.selectManyFirst=function(t,e,n){return new Jn(this,t,e,n).switchFirst()},It.Observable.prototype.flatMapWithMaxConcurrent=function(t,e,n,r){return new Jn(this,e,n,r).merge(t)};var bs=It.VirtualTimeScheduler=function(t){function e(e,n){this.clock=e,this.comparer=n,this.isEnabled=!1,this.queue=new Xe(1024),t.call(this)}Qe(e,t);var n=e.prototype;return n.now=function(){return this.toAbsoluteTime(this.clock)},n.schedule=function(t,e){return this.scheduleAbsolute(t,this.clock,e)},n.scheduleFuture=function(t,e,n){var r=e instanceof Date?this.toRelativeTime(e-this.now()):this.toRelativeTime(e);return this.scheduleRelative(t,r,n)},n.add=he,n.toAbsoluteTime=he,n.toRelativeTime=he,n.schedulePeriodic=function(t,e,n){var r=new wn(this,t,e,n);return r.start()},n.scheduleRelative=function(t,e,n){var r=this.add(this.clock,e);return this.scheduleAbsolute(t,r,n)},n.start=function(){if(!this.isEnabled){this.isEnabled=!0;do{var t=this.getNext();null!==t?(this.comparer(t.dueTime,this.clock)>0&&(this.clock=t.dueTime),t.invoke()):this.isEnabled=!1}while(this.isEnabled)}},n.stop=function(){this.isEnabled=!1},n.advanceTo=function(t){var e=this.comparer(this.clock,t);if(this.comparer(this.clock,t)>0)throw new se;if(0!==e&&!this.isEnabled){this.isEnabled=!0;do{var n=this.getNext();null!==n&&this.comparer(n.dueTime,t)<=0?(this.comparer(n.dueTime,this.clock)>0&&(this.clock=n.dueTime),n.invoke()):this.isEnabled=!1}while(this.isEnabled);this.clock=t}},n.advanceBy=function(t){var e=this.add(this.clock,t),n=this.comparer(this.clock,e);if(n>0)throw new se;0!==n&&this.advanceTo(e)},n.sleep=function(t){var e=this.add(this.clock,t);if(this.comparer(this.clock,e)>=0)throw new se;this.clock=e},n.getNext=function(){for(;this.queue.length>0;){var t=this.queue.peek();if(!t.isCancelled())return t;this.queue.dequeue()}return null},n.scheduleAbsolute=function(t,e,n){function r(t,e){return i.queue.remove(o),n(t,e)}var i=this,o=new ln(this,t,r,e,this.comparer);return this.queue.enqueue(o),o.disposable},e}(dn);It.HistoricalScheduler=function(t){function e(e,n){var r=null==e?0:e,i=n||Jt;t.call(this,r,i)}Qe(e,t);var n=e.prototype;return n.add=function(t,e){return t+e},n.toAbsoluteTime=function(t){return new Date(t).getTime()},n.toRelativeTime=function(t){return t},e}(It.VirtualTimeScheduler),qt.prototype.equals=function(t){return t===this?!0:null==t?!1:"N"!==t.kind?!1:this.predicate(t.value)},kt.prototype.equals=function(t){return t===this?!0:null==t?!1:"E"!==t.kind?!1:this.predicate(t.error)};var vs=It.ReactiveTest={created:100,subscribed:200,disposed:1e3,onNext:function(t,e){return"function"==typeof e?new ys(t,new qt(e)):new ys(t,qn.createOnNext(e))},onError:function(t,e){return"function"==typeof e?new ys(t,new kt(e)):new ys(t,qn.createOnError(e))},onCompleted:function(t){return new ys(t,qn.createOnCompleted())},subscribe:function(t,e){return new ws(t,e)}},ys=It.Recorded=function(t,e,n){this.time=t,this.value=e,this.comparer=n||Ht};ys.prototype.equals=function(t){return this.time===t.time&&this.comparer(this.value,t.value)},ys.prototype.toString=function(){return this.value.toString()+"@"+this.time};var ws=It.Subscription=function(t,e){this.subscribe=t,this.unsubscribe=e||Number.MAX_VALUE};ws.prototype.equals=function(t){return this.subscribe===t.subscribe&&this.unsubscribe===t.unsubscribe},ws.prototype.toString=function(){return"("+this.subscribe+", "+(this.unsubscribe===Number.MAX_VALUE?"Infinite":this.unsubscribe)+")"};var ms=It.MockDisposable=function(t){this.scheduler=t,this.disposes=[],this.disposes.push(this.scheduler.clock)};ms.prototype.dispose=function(){this.disposes.push(this.scheduler.clock)};var Es=function(t){function e(e){t.call(this),this.scheduler=e,this.messages=[]}Qe(e,t);var n=e.prototype;return n.onNext=function(t){this.messages.push(new ys(this.scheduler.clock,qn.createOnNext(t)))},n.onError=function(t){this.messages.push(new ys(this.scheduler.clock,qn.createOnError(t)))},n.onCompleted=function(){this.messages.push(new ys(this.scheduler.clock,qn.createOnCompleted()))},e}(Pn);jt.prototype.then=function(e,n){var r=this;this.subscriptions.push(new ws(this.scheduler.clock));var i,o=this.subscriptions.length-1,s=It.Observer.create(function(n){var u=e(n);if(u&&"function"==typeof u.then)i=u;else{var c=r.scheduler.clock;i=new jt(r.scheduler,[It.ReactiveTest.onNext(c,t),It.ReactiveTest.onCompleted(c)])}var h=r.observers.indexOf(s);r.observers.splice(h,1),r.subscriptions[o]=new ws(r.subscriptions[o].subscribe,r.scheduler.clock)},function(t){n(t);var e=r.observers.indexOf(s);r.observers.splice(e,1),r.subscriptions[o]=new ws(r.subscriptions[o].subscribe,r.scheduler.clock)});return this.observers.push(s),i||new jt(this.scheduler,this.messages)};var Cs=function(t){function e(e,n){t.call(this);var r,i,o=this;this.scheduler=e,this.messages=n,this.subscriptions=[],this.observers=[];for(var s=0,u=this.messages.length;u>s;s++)r=this.messages[s],i=r.value,function(t){e.scheduleAbsolute(null,r.time,function(){for(var e=o.observers.slice(0),n=0,r=e.length;r>n;n++)t.accept(e[n]);return rn})}(i)}return Qe(e,t),e.prototype._subscribe=function(t){var e=this;this.observers.push(t),this.subscriptions.push(new ws(this.scheduler.clock));var n=this.subscriptions.length-1;return nn(function(){var r=e.observers.indexOf(t);e.observers.splice(r,1),e.subscriptions[n]=new ws(e.subscriptions[n].subscribe,e.scheduler.clock)})},e}(Kn),gs=function(t){function e(e,n){t.call(this),this.scheduler=e,this.messages=n,this.subscriptions=[]}return Qe(e,t),e.prototype._subscribe=function(t){var e,n,r=this;this.subscriptions.push(new ws(this.scheduler.clock));for(var i=this.subscriptions.length-1,o=new Ze,s=0,u=this.messages.length;u>s;s++)e=this.messages[s],n=e.value,function(n){o.add(r.scheduler.scheduleRelative(null,e.time,function(){return n.accept(t),rn}))}(n);return nn(function(){r.subscriptions[i]=new ws(r.subscriptions[i].subscribe,r.scheduler.clock),o.dispose()})},e}(Kn);It.TestScheduler=function(t){function e(t,e){return t>e?1:e>t?-1:0}function n(){t.call(this,0,e)}return Qe(n,t),n.prototype.scheduleAbsolute=function(e,n,r){return n<=this.clock&&(n=this.clock+1),t.prototype.scheduleAbsolute.call(this,e,n,r)},n.prototype.add=function(t,e){return t+e},n.prototype.toAbsoluteTime=function(t){return new Date(t).getTime()},n.prototype.toRelativeTime=function(t){return t},n.prototype.startScheduler=function(t,e){e||(e={}),null==e.created&&(e.created=vs.created),null==e.subscribed&&(e.subscribed=vs.subscribed),null==e.disposed&&(e.disposed=vs.disposed);var n,r,i=this.createObserver();return this.scheduleAbsolute(null,e.created,function(){return n=t(),rn}),this.scheduleAbsolute(null,e.subscribed,function(){return r=n.subscribe(i),rn}),this.scheduleAbsolute(null,e.disposed,function(){return r.dispose(),rn}),this.start(),i},n.prototype.createHotObservable=function(){var t,e=arguments.length;if(Array.isArray(arguments[0]))t=arguments[0];else{t=new Array(e);for(var n=0;e>n;n++)t[n]=arguments[n]}return new Cs(this,t)},n.prototype.createColdObservable=function(){var t,e=arguments.length;if(Array.isArray(arguments[0]))t=arguments[0];else{t=new Array(e);for(var n=0;e>n;n++)t[n]=arguments[n]}return new gs(this,t)},n.prototype.createResolvedPromise=function(t,e){return new jt(this,[It.ReactiveTest.onNext(t,e),It.ReactiveTest.onCompleted(t)])},n.prototype.createRejectedPromise=function(t,e){return new jt(this,[It.ReactiveTest.onError(t,e)])},n.prototype.createObserver=function(){return new Es(this)},n}(bs);var xs=It.AnonymousObservable=function(t){function e(t){return t&&Gt(t.dispose)?t:Gt(t)?nn(t):rn}function n(t,n){var r=n[0],o=n[1],s=Yt(o.__subscribe).call(o,r);s!==Xt||r.fail(Xt.e)||i(Xt.e),r.setDisposable(e(s))}function r(e,n){this.source=n,this.__subscribe=e,t.call(this)}return Qe(r,t),r.prototype._subscribe=function(t){var e=new Ns(t),r=[e,this];return gn.scheduleRequired()?gn.schedule(r,n):n(null,r),e},r}(Kn),Ns=function(t){function e(e){t.call(this),this.observer=e,this.m=new cn}Qe(e,t);var n=e.prototype;return n.next=function(t){var e=Yt(this.observer.onNext).call(this.observer,t);e===Xt&&(this.dispose(),i(e.e))},n.error=function(t){var e=Yt(this.observer.onError).call(this.observer,t);this.dispose(),e===Xt&&i(e.e)},n.completed=function(){var t=Yt(this.observer.onCompleted).call(this.observer);this.dispose(),t===Xt&&i(t.e)},n.setDisposable=function(t){this.m.setDisposable(t)},n.getDisposable=function(){return this.m.getDisposable()},n.dispose=function(){t.prototype.dispose.call(this),this.m.dispose()},e}(Wn),Ds=function(t){function e(e,n){this._m=e,this._u=n,t.call(this)}return Qe(e,t),e.prototype.subscribeCore=function(t){return new an(this._m.getDisposable(),this._u.subscribe(t))},e}(Hn),As=function(t){function e(e,n,r){t.call(this),this.key=e,this.underlyingObservable=r?new Ds(r,n):n}return Qe(e,t),e.prototype._subscribe=function(t){return this.underlyingObservable.subscribe(t)},e}(Kn),Ss=It.Subject=function(t){function e(){t.call(this),this.isDisposed=!1,this.isStopped=!1,this.observers=[],this.hasError=!1}return Qe(e,t),$e(e.prototype,Pn.prototype,{_subscribe:function(t){return sn(this),this.isStopped?this.hasError?(t.onError(this.error),rn):(t.onCompleted(),rn):(this.observers.push(t),new Oo(this,t))},hasObservers:function(){return sn(this),this.observers.length>0},onCompleted:function(){if(sn(this),!this.isStopped){this.isStopped=!0;for(var t=0,e=n(this.observers),r=e.length;r>t;t++)e[t].onCompleted();this.observers.length=0}},onError:function(t){if(sn(this),!this.isStopped){this.isStopped=!0,this.error=t,this.hasError=!0;for(var e=0,r=n(this.observers),i=r.length;i>e;e++)r[e].onError(t);this.observers.length=0}},onNext:function(t){if(sn(this),!this.isStopped)for(var e=0,r=n(this.observers),i=r.length;i>e;e++)r[e].onNext(t)},dispose:function(){this.isDisposed=!0,this.observers=null}}),e.create=function(t,e){return new js(t,e)},e}(Kn),Os=It.AsyncSubject=function(t){function e(){t.call(this),this.isDisposed=!1,this.isStopped=!1,this.hasValue=!1,this.observers=[],this.hasError=!1}return Qe(e,t),$e(e.prototype,Pn.prototype,{_subscribe:function(t){return sn(this),this.isStopped?(this.hasError?t.onError(this.error):this.hasValue?(t.onNext(this.value),t.onCompleted()):t.onCompleted(),rn):(this.observers.push(t),new Oo(this,t))},hasObservers:function(){return sn(this),this.observers.length>0},onCompleted:function(){var t,e;if(sn(this),!this.isStopped){this.isStopped=!0;var r=n(this.observers),e=r.length;if(this.hasValue)for(t=0;e>t;t++){var i=r[t];i.onNext(this.value),i.onCompleted()}else for(t=0;e>t;t++)r[t].onCompleted();this.observers.length=0}},onError:function(t){if(sn(this),!this.isStopped){this.isStopped=!0,this.hasError=!0,this.error=t;for(var e=0,r=n(this.observers),i=r.length;i>e;e++)r[e].onError(t);this.observers.length=0}},onNext:function(t){sn(this),this.isStopped||(this.value=t,this.hasValue=!0)},dispose:function(){this.isDisposed=!0,this.observers=null,this.error=null,this.value=null}}),e}(Kn),qs=It.BehaviorSubject=function(t){function e(e){t.call(this),this.value=e,this.observers=[],this.isDisposed=!1,this.isStopped=!1,this.hasError=!1}return Qe(e,t),$e(e.prototype,Pn.prototype,{_subscribe:function(t){return sn(this),this.isStopped?(this.hasError?t.onError(this.error):t.onCompleted(),rn):(this.observers.push(t),t.onNext(this.value),new Oo(this,t))},getValue:function(){return sn(this),this.hasError&&i(this.error),this.value},hasObservers:function(){return sn(this),this.observers.length>0},onCompleted:function(){if(sn(this),!this.isStopped){this.isStopped=!0;for(var t=0,e=n(this.observers),r=e.length;r>t;t++)e[t].onCompleted();this.observers.length=0}},onError:function(t){if(sn(this),!this.isStopped){this.isStopped=!0,this.hasError=!0,this.error=t;for(var e=0,r=n(this.observers),i=r.length;i>e;e++)r[e].onError(t);this.observers.length=0}},onNext:function(t){if(sn(this),!this.isStopped){this.value=t;for(var e=0,r=n(this.observers),i=r.length;i>e;e++)r[e].onNext(t)}},dispose:function(){this.isDisposed=!0,this.observers=null,this.value=null,this.error=null}}),e}(Kn),ks=It.ReplaySubject=function(t){function e(t,e){return nn(function(){e.dispose(),!t.isDisposed&&t.observers.splice(t.observers.indexOf(e),1)})}function r(e,n,r){this.bufferSize=null==e?i:e,this.windowSize=null==n?i:n,this.scheduler=r||gn,this.q=[],this.observers=[],this.isStopped=!1,this.isDisposed=!1,this.hasError=!1,this.error=null,t.call(this)}var i=Math.pow(2,53)-1;return Qe(r,t),$e(r.prototype,Pn.prototype,{_subscribe:function(t){sn(this);var n=new Bn(this.scheduler,t),r=e(this,n);this._trim(this.scheduler.now()),this.observers.push(n);for(var i=0,o=this.q.length;o>i;i++)n.onNext(this.q[i].value);return this.hasError?n.onError(this.error):this.isStopped&&n.onCompleted(),n.ensureActive(),r},hasObservers:function(){return sn(this),this.observers.length>0},_trim:function(t){for(;this.q.length>this.bufferSize;)this.q.shift();for(;this.q.length>0&&t-this.q[0].interval>this.windowSize;)this.q.shift()},onNext:function(t){if(sn(this),!this.isStopped){var e=this.scheduler.now();this.q.push({interval:e,value:t}),this._trim(e);for(var r=0,i=n(this.observers),o=i.length;o>r;r++){var s=i[r];s.onNext(t),s.ensureActive()}}},onError:function(t){if(sn(this),!this.isStopped){this.isStopped=!0,this.error=t,this.hasError=!0;var e=this.scheduler.now();this._trim(e);for(var r=0,i=n(this.observers),o=i.length;o>r;r++){var s=i[r];s.onError(t),s.ensureActive()}this.observers.length=0}},onCompleted:function(){if(sn(this),!this.isStopped){this.isStopped=!0;var t=this.scheduler.now();this._trim(t);for(var e=0,r=n(this.observers),i=r.length;i>e;e++){var o=r[e];o.onCompleted(),o.ensureActive()}this.observers.length=0}},dispose:function(){this.isDisposed=!0,this.observers=null}}),r}(Kn),js=It.AnonymousSubject=function(t){function e(e,n){this.observer=e,this.observable=n,t.call(this)}return Qe(e,t),$e(e.prototype,Pn.prototype,{_subscribe:function(t){return this.observable.subscribe(t)},onCompleted:function(){this.observer.onCompleted()},onError:function(t){this.observer.onError(t)},onNext:function(t){this.observer.onNext(t)}}),e}(Kn);It.Pauser=function(t){function e(){t.call(this)}return Qe(e,t),e.prototype.pause=function(){this.onNext(!1)},e.prototype.resume=function(){this.onNext(!0)},e}(Ss),"function"==typeof define&&"object"==typeof define.amd&&define.amd?(zt.Rx=It,define(function(){return It})):Rt&&Tt?Vt?(Tt.exports=It).Rx=It:Rt.Rx=It:zt.Rx=It;var Fs=h()}).call(this);

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":15}],65:[function(require,module,exports){
var lowerCase=require("lower-case"),NON_WORD_REGEXP=require("./vendor/non-word-regexp"),CAMEL_CASE_REGEXP=require("./vendor/camel-case-regexp"),TRAILING_DIGIT_REGEXP=require("./vendor/trailing-digit-regexp");module.exports=function(e,r,n){function E(e,r,E){return 0===r||r===E.length-e.length?"":n}return null==e?"":(n=n||" ",e=String(e).replace(CAMEL_CASE_REGEXP,"$1 $2").replace(TRAILING_DIGIT_REGEXP,"$1 $2").replace(NON_WORD_REGEXP,E),lowerCase(e,r))};

},{"./vendor/camel-case-regexp":66,"./vendor/non-word-regexp":67,"./vendor/trailing-digit-regexp":68,"lower-case":59}],66:[function(require,module,exports){
module.exports=/([\u0061-\u007A\u00B5\u00DF-\u00F6\u00F8-\u00FF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0561-\u0587\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7FA\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A])([\u0041-\u005A\u00C0-\u00D6\u00D8-\u00DE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA\uFF21-\uFF3A\u0030-\u0039\u00B2\u00B3\u00B9\u00BC-\u00BE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19])/g;

},{}],67:[function(require,module,exports){
module.exports=/[^\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\u0030-\u0039\u00B2\u00B3\u00B9\u00BC-\u00BE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]+/g;

},{}],68:[function(require,module,exports){
module.exports=/([\u0030-\u0039\u00B2\u00B3\u00B9\u00BC-\u00BE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19])([^\u0030-\u0039\u00B2\u00B3\u00B9\u00BC-\u00BE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19])/g;

},{}],69:[function(require,module,exports){
"use strict";module.exports=function(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})};

},{}],70:[function(require,module,exports){
"use strict";function isPattern(t){return"string"==typeof t&&("/"===t.charAt(0)||"*"===t)}function isRouteConfigurationObject(t){if("object"!=typeof t)return!1;for(var n in t)if(t.hasOwnProperty(n))return isPattern(n)}function unprefixed(t,n){return t.split(n)[1]}function matchesWithParams(t,n){var e=t.split("/").filter(function(t){return t.length>0}),r=n.split("/").filter(function(t){return t.length>0}),a=r.map(function(t,n){return null!==t.match(/:\w+/)?e[n]:null}).filter(function(t){return null!==t}),i=r.every(function(t,n){return null!==t.match(/:\w+/)||t===e[n]});return i?a:[]}function validateSwitchPathPreconditions(t,n){if("string"!=typeof t)throw new Error("Invalid source path. We expected to see a string given as the sourcePath (first argument) to switchPath.");if(!isRouteConfigurationObject(n))throw new Error("Invalid routes object. We expected to see a routes configuration object where keys are strings that look like '/foo'. These keys must start with a slash '/'.")}function validatePatternPreconditions(t){if(!isPattern(t))throw new Error("Paths in route configuration must be strings that start with a slash '/'.")}function isNormalPattern(t,n){return!("*"===n||!t.hasOwnProperty(n))}function handleTrailingSlash(t){return isRouteConfigurationObject(t)?t["/"]:t}function getParamsFnValue(t,n){var e=handleTrailingSlash(t);return"function"!=typeof e?e:e.apply(null,n)}function splitPath(t){var n=t.split("/");return""===n[n.length-1]&&n.pop(),n}function validatePath(t,n){if(null===n)return"";var e=splitPath(t),r=splitPath(n),a=e.map(function(t,n){return t!==r[n]?null:t}).filter(function(t){return null!==t}).join("/");return a}function validate(t){var n=t.sourcePath,e=t.matchedPath,r=t.value,a=t.routes,i=validatePath(n,e);if(!i){i=a["*"]?n:null;var u=i?a["*"]:null;return{validPath:i,validValue:u}}return{validPath:i,validValue:r}}function betterMatch(t,n){return null===t?!1:null===n?!0:t.length>=n.length}function switchPath(t,n){validateSwitchPathPreconditions(t,n);var e=null,r=null;for(var a in n)if(isNormalPattern(n,a)){validatePatternPreconditions(a),0===t.search(a)&&betterMatch(a,e)&&(e=a,r=n[a]);var i=matchesWithParams(t,a);if(i.length>0&&betterMatch(t,e)&&(e=t,r=getParamsFnValue(n[a],i)),isRouteConfigurationObject(n[a])&&0===i.length){var u=switchPath(unprefixed(t,a),n[a]),l=a+u.path;null!==u.path&&betterMatch(l,e)&&(e=l,r=u.value)}if(a===t)return{path:a,value:handleTrailingSlash(n[a])}}var o=validate({sourcePath:t,matchedPath:e,value:r,routes:n}),h=o.validPath,s=o.validValue;return{path:h,value:s}}module.exports=switchPath;

},{}],71:[function(require,module,exports){
"use strict";function parser(e,t){if(!e)return createNode(document.createTextNode(""));if("string"==typeof e){var r=domParser.parseFromString(e,"text/html");e=r.body.firstChild?r.body.firstChild:r.head.firstChild&&("TITLE"!==r.head.firstChild.tagName||r.title)?r.head.firstChild:r.firstChild&&"HTML"!==r.firstChild.tagName?r.firstChild:document.createTextNode("")}if("object"!=typeof e||!e||!e.nodeType)throw new Error("invalid dom node",e);return createNode(e,t)}function createNode(e,t){return 3===e.nodeType?createVirtualTextNode(e):1===e.nodeType||9===e.nodeType?createVirtualDomNode(e,t):new VText("")}function createVirtualTextNode(e){return new VText(e.nodeValue)}function createVirtualDomNode(e,t){var r=e.namespaceURI!==HTML_NAMESPACE?e.namespaceURI:null,a=t&&e.getAttribute(t)?e.getAttribute(t):null;return new VNode(e.tagName,createProperties(e),createChildren(e,t),a,r)}function createChildren(e,t){for(var r=[],a=0;a<e.childNodes.length;a++)r.push(createNode(e.childNodes[a],t));return r}function createProperties(e){var t={};if(!e.hasAttributes())return t;var r;e.namespaceURI&&e.namespaceURI!==HTML_NAMESPACE&&(r=e.namespaceURI);for(var a,n=0;n<e.attributes.length;n++)a=r?createPropertyNS(e.attributes[n]):createProperty(e.attributes[n]),a.ns?t[a.name]={namespace:a.ns,value:a.value}:a.isAttr?(t.attributes||(t.attributes={}),t.attributes[a.name]=a.value):t[a.name]=a.value;return t}function createProperty(e){var t,r,a;if(t=propertyMap[e.name]?propertyMap[e.name]:e.name,"style"===t){var n={};e.value.split(";").forEach(function(e){var t=e.indexOf(":");0>t||(n[e.substr(0,t).trim()]=e.substr(t+1).trim())}),r=n}else 0===t.indexOf("data-")?(r=e.value,a=!0):r=e.value;return{name:t,value:r,isAttr:a||!1}}function createPropertyNS(e){return{name:e.name,value:e.value,ns:namespaceMap[e.name]||""}}var VNode=require("virtual-dom/vnode/vnode"),VText=require("virtual-dom/vnode/vtext"),domParser=new DOMParser,propertyMap=require("./property-map"),namespaceMap=require("./namespace-map"),HTML_NAMESPACE="http://www.w3.org/1999/xhtml";module.exports=parser;

},{"./namespace-map":72,"./property-map":73,"virtual-dom/vnode/vnode":98,"virtual-dom/vnode/vtext":100}],72:[function(require,module,exports){
"use strict";var DEFAULT_NAMESPACE=null,EV_NAMESPACE="http://www.w3.org/2001/xml-events",XLINK_NAMESPACE="http://www.w3.org/1999/xlink",XML_NAMESPACE="http://www.w3.org/XML/1998/namespace",namespaces={about:DEFAULT_NAMESPACE,"accent-height":DEFAULT_NAMESPACE,accumulate:DEFAULT_NAMESPACE,additive:DEFAULT_NAMESPACE,"alignment-baseline":DEFAULT_NAMESPACE,alphabetic:DEFAULT_NAMESPACE,amplitude:DEFAULT_NAMESPACE,"arabic-form":DEFAULT_NAMESPACE,ascent:DEFAULT_NAMESPACE,attributeName:DEFAULT_NAMESPACE,attributeType:DEFAULT_NAMESPACE,azimuth:DEFAULT_NAMESPACE,bandwidth:DEFAULT_NAMESPACE,baseFrequency:DEFAULT_NAMESPACE,baseProfile:DEFAULT_NAMESPACE,"baseline-shift":DEFAULT_NAMESPACE,bbox:DEFAULT_NAMESPACE,begin:DEFAULT_NAMESPACE,bias:DEFAULT_NAMESPACE,by:DEFAULT_NAMESPACE,calcMode:DEFAULT_NAMESPACE,"cap-height":DEFAULT_NAMESPACE,"class":DEFAULT_NAMESPACE,clip:DEFAULT_NAMESPACE,"clip-path":DEFAULT_NAMESPACE,"clip-rule":DEFAULT_NAMESPACE,clipPathUnits:DEFAULT_NAMESPACE,color:DEFAULT_NAMESPACE,"color-interpolation":DEFAULT_NAMESPACE,"color-interpolation-filters":DEFAULT_NAMESPACE,"color-profile":DEFAULT_NAMESPACE,"color-rendering":DEFAULT_NAMESPACE,content:DEFAULT_NAMESPACE,contentScriptType:DEFAULT_NAMESPACE,contentStyleType:DEFAULT_NAMESPACE,cursor:DEFAULT_NAMESPACE,cx:DEFAULT_NAMESPACE,cy:DEFAULT_NAMESPACE,d:DEFAULT_NAMESPACE,datatype:DEFAULT_NAMESPACE,defaultAction:DEFAULT_NAMESPACE,descent:DEFAULT_NAMESPACE,diffuseConstant:DEFAULT_NAMESPACE,direction:DEFAULT_NAMESPACE,display:DEFAULT_NAMESPACE,divisor:DEFAULT_NAMESPACE,"dominant-baseline":DEFAULT_NAMESPACE,dur:DEFAULT_NAMESPACE,dx:DEFAULT_NAMESPACE,dy:DEFAULT_NAMESPACE,edgeMode:DEFAULT_NAMESPACE,editable:DEFAULT_NAMESPACE,elevation:DEFAULT_NAMESPACE,"enable-background":DEFAULT_NAMESPACE,end:DEFAULT_NAMESPACE,"ev:event":EV_NAMESPACE,event:DEFAULT_NAMESPACE,exponent:DEFAULT_NAMESPACE,externalResourcesRequired:DEFAULT_NAMESPACE,fill:DEFAULT_NAMESPACE,"fill-opacity":DEFAULT_NAMESPACE,"fill-rule":DEFAULT_NAMESPACE,filter:DEFAULT_NAMESPACE,filterRes:DEFAULT_NAMESPACE,filterUnits:DEFAULT_NAMESPACE,"flood-color":DEFAULT_NAMESPACE,"flood-opacity":DEFAULT_NAMESPACE,focusHighlight:DEFAULT_NAMESPACE,focusable:DEFAULT_NAMESPACE,"font-family":DEFAULT_NAMESPACE,"font-size":DEFAULT_NAMESPACE,"font-size-adjust":DEFAULT_NAMESPACE,"font-stretch":DEFAULT_NAMESPACE,"font-style":DEFAULT_NAMESPACE,"font-variant":DEFAULT_NAMESPACE,"font-weight":DEFAULT_NAMESPACE,format:DEFAULT_NAMESPACE,from:DEFAULT_NAMESPACE,fx:DEFAULT_NAMESPACE,fy:DEFAULT_NAMESPACE,g1:DEFAULT_NAMESPACE,g2:DEFAULT_NAMESPACE,"glyph-name":DEFAULT_NAMESPACE,"glyph-orientation-horizontal":DEFAULT_NAMESPACE,"glyph-orientation-vertical":DEFAULT_NAMESPACE,glyphRef:DEFAULT_NAMESPACE,gradientTransform:DEFAULT_NAMESPACE,gradientUnits:DEFAULT_NAMESPACE,handler:DEFAULT_NAMESPACE,hanging:DEFAULT_NAMESPACE,height:DEFAULT_NAMESPACE,"horiz-adv-x":DEFAULT_NAMESPACE,"horiz-origin-x":DEFAULT_NAMESPACE,"horiz-origin-y":DEFAULT_NAMESPACE,id:DEFAULT_NAMESPACE,ideographic:DEFAULT_NAMESPACE,"image-rendering":DEFAULT_NAMESPACE,"in":DEFAULT_NAMESPACE,in2:DEFAULT_NAMESPACE,initialVisibility:DEFAULT_NAMESPACE,intercept:DEFAULT_NAMESPACE,k:DEFAULT_NAMESPACE,k1:DEFAULT_NAMESPACE,k2:DEFAULT_NAMESPACE,k3:DEFAULT_NAMESPACE,k4:DEFAULT_NAMESPACE,kernelMatrix:DEFAULT_NAMESPACE,kernelUnitLength:DEFAULT_NAMESPACE,kerning:DEFAULT_NAMESPACE,keyPoints:DEFAULT_NAMESPACE,keySplines:DEFAULT_NAMESPACE,keyTimes:DEFAULT_NAMESPACE,lang:DEFAULT_NAMESPACE,lengthAdjust:DEFAULT_NAMESPACE,"letter-spacing":DEFAULT_NAMESPACE,"lighting-color":DEFAULT_NAMESPACE,limitingConeAngle:DEFAULT_NAMESPACE,local:DEFAULT_NAMESPACE,"marker-end":DEFAULT_NAMESPACE,"marker-mid":DEFAULT_NAMESPACE,"marker-start":DEFAULT_NAMESPACE,markerHeight:DEFAULT_NAMESPACE,markerUnits:DEFAULT_NAMESPACE,markerWidth:DEFAULT_NAMESPACE,mask:DEFAULT_NAMESPACE,maskContentUnits:DEFAULT_NAMESPACE,maskUnits:DEFAULT_NAMESPACE,mathematical:DEFAULT_NAMESPACE,max:DEFAULT_NAMESPACE,media:DEFAULT_NAMESPACE,mediaCharacterEncoding:DEFAULT_NAMESPACE,mediaContentEncodings:DEFAULT_NAMESPACE,mediaSize:DEFAULT_NAMESPACE,mediaTime:DEFAULT_NAMESPACE,method:DEFAULT_NAMESPACE,min:DEFAULT_NAMESPACE,mode:DEFAULT_NAMESPACE,name:DEFAULT_NAMESPACE,"nav-down":DEFAULT_NAMESPACE,"nav-down-left":DEFAULT_NAMESPACE,"nav-down-right":DEFAULT_NAMESPACE,"nav-left":DEFAULT_NAMESPACE,"nav-next":DEFAULT_NAMESPACE,"nav-prev":DEFAULT_NAMESPACE,"nav-right":DEFAULT_NAMESPACE,"nav-up":DEFAULT_NAMESPACE,"nav-up-left":DEFAULT_NAMESPACE,"nav-up-right":DEFAULT_NAMESPACE,numOctaves:DEFAULT_NAMESPACE,observer:DEFAULT_NAMESPACE,offset:DEFAULT_NAMESPACE,opacity:DEFAULT_NAMESPACE,operator:DEFAULT_NAMESPACE,order:DEFAULT_NAMESPACE,orient:DEFAULT_NAMESPACE,orientation:DEFAULT_NAMESPACE,origin:DEFAULT_NAMESPACE,overflow:DEFAULT_NAMESPACE,overlay:DEFAULT_NAMESPACE,"overline-position":DEFAULT_NAMESPACE,"overline-thickness":DEFAULT_NAMESPACE,"panose-1":DEFAULT_NAMESPACE,path:DEFAULT_NAMESPACE,pathLength:DEFAULT_NAMESPACE,patternContentUnits:DEFAULT_NAMESPACE,patternTransform:DEFAULT_NAMESPACE,patternUnits:DEFAULT_NAMESPACE,phase:DEFAULT_NAMESPACE,playbackOrder:DEFAULT_NAMESPACE,"pointer-events":DEFAULT_NAMESPACE,points:DEFAULT_NAMESPACE,pointsAtX:DEFAULT_NAMESPACE,pointsAtY:DEFAULT_NAMESPACE,pointsAtZ:DEFAULT_NAMESPACE,preserveAlpha:DEFAULT_NAMESPACE,preserveAspectRatio:DEFAULT_NAMESPACE,primitiveUnits:DEFAULT_NAMESPACE,propagate:DEFAULT_NAMESPACE,property:DEFAULT_NAMESPACE,r:DEFAULT_NAMESPACE,radius:DEFAULT_NAMESPACE,refX:DEFAULT_NAMESPACE,refY:DEFAULT_NAMESPACE,rel:DEFAULT_NAMESPACE,"rendering-intent":DEFAULT_NAMESPACE,repeatCount:DEFAULT_NAMESPACE,repeatDur:DEFAULT_NAMESPACE,requiredExtensions:DEFAULT_NAMESPACE,requiredFeatures:DEFAULT_NAMESPACE,requiredFonts:DEFAULT_NAMESPACE,requiredFormats:DEFAULT_NAMESPACE,resource:DEFAULT_NAMESPACE,restart:DEFAULT_NAMESPACE,result:DEFAULT_NAMESPACE,rev:DEFAULT_NAMESPACE,role:DEFAULT_NAMESPACE,rotate:DEFAULT_NAMESPACE,rx:DEFAULT_NAMESPACE,ry:DEFAULT_NAMESPACE,scale:DEFAULT_NAMESPACE,seed:DEFAULT_NAMESPACE,"shape-rendering":DEFAULT_NAMESPACE,slope:DEFAULT_NAMESPACE,snapshotTime:DEFAULT_NAMESPACE,spacing:DEFAULT_NAMESPACE,specularConstant:DEFAULT_NAMESPACE,specularExponent:DEFAULT_NAMESPACE,spreadMethod:DEFAULT_NAMESPACE,startOffset:DEFAULT_NAMESPACE,stdDeviation:DEFAULT_NAMESPACE,stemh:DEFAULT_NAMESPACE,stemv:DEFAULT_NAMESPACE,stitchTiles:DEFAULT_NAMESPACE,"stop-color":DEFAULT_NAMESPACE,"stop-opacity":DEFAULT_NAMESPACE,"strikethrough-position":DEFAULT_NAMESPACE,"strikethrough-thickness":DEFAULT_NAMESPACE,string:DEFAULT_NAMESPACE,stroke:DEFAULT_NAMESPACE,"stroke-dasharray":DEFAULT_NAMESPACE,"stroke-dashoffset":DEFAULT_NAMESPACE,"stroke-linecap":DEFAULT_NAMESPACE,"stroke-linejoin":DEFAULT_NAMESPACE,"stroke-miterlimit":DEFAULT_NAMESPACE,"stroke-opacity":DEFAULT_NAMESPACE,"stroke-width":DEFAULT_NAMESPACE,surfaceScale:DEFAULT_NAMESPACE,syncBehavior:DEFAULT_NAMESPACE,syncBehaviorDefault:DEFAULT_NAMESPACE,syncMaster:DEFAULT_NAMESPACE,syncTolerance:DEFAULT_NAMESPACE,syncToleranceDefault:DEFAULT_NAMESPACE,systemLanguage:DEFAULT_NAMESPACE,tableValues:DEFAULT_NAMESPACE,target:DEFAULT_NAMESPACE,targetX:DEFAULT_NAMESPACE,targetY:DEFAULT_NAMESPACE,"text-anchor":DEFAULT_NAMESPACE,"text-decoration":DEFAULT_NAMESPACE,"text-rendering":DEFAULT_NAMESPACE,textLength:DEFAULT_NAMESPACE,timelineBegin:DEFAULT_NAMESPACE,title:DEFAULT_NAMESPACE,to:DEFAULT_NAMESPACE,transform:DEFAULT_NAMESPACE,transformBehavior:DEFAULT_NAMESPACE,type:DEFAULT_NAMESPACE,"typeof":DEFAULT_NAMESPACE,u1:DEFAULT_NAMESPACE,u2:DEFAULT_NAMESPACE,"underline-position":DEFAULT_NAMESPACE,"underline-thickness":DEFAULT_NAMESPACE,unicode:DEFAULT_NAMESPACE,"unicode-bidi":DEFAULT_NAMESPACE,"unicode-range":DEFAULT_NAMESPACE,"units-per-em":DEFAULT_NAMESPACE,"v-alphabetic":DEFAULT_NAMESPACE,"v-hanging":DEFAULT_NAMESPACE,"v-ideographic":DEFAULT_NAMESPACE,"v-mathematical":DEFAULT_NAMESPACE,values:DEFAULT_NAMESPACE,version:DEFAULT_NAMESPACE,"vert-adv-y":DEFAULT_NAMESPACE,"vert-origin-x":DEFAULT_NAMESPACE,"vert-origin-y":DEFAULT_NAMESPACE,viewBox:DEFAULT_NAMESPACE,viewTarget:DEFAULT_NAMESPACE,visibility:DEFAULT_NAMESPACE,width:DEFAULT_NAMESPACE,widths:DEFAULT_NAMESPACE,"word-spacing":DEFAULT_NAMESPACE,"writing-mode":DEFAULT_NAMESPACE,x:DEFAULT_NAMESPACE,"x-height":DEFAULT_NAMESPACE,x1:DEFAULT_NAMESPACE,x2:DEFAULT_NAMESPACE,xChannelSelector:DEFAULT_NAMESPACE,"xlink:actuate":XLINK_NAMESPACE,"xlink:arcrole":XLINK_NAMESPACE,"xlink:href":XLINK_NAMESPACE,"xlink:role":XLINK_NAMESPACE,"xlink:show":XLINK_NAMESPACE,"xlink:title":XLINK_NAMESPACE,"xlink:type":XLINK_NAMESPACE,"xml:base":XML_NAMESPACE,"xml:id":XML_NAMESPACE,"xml:lang":XML_NAMESPACE,"xml:space":XML_NAMESPACE,y:DEFAULT_NAMESPACE,y1:DEFAULT_NAMESPACE,y2:DEFAULT_NAMESPACE,yChannelSelector:DEFAULT_NAMESPACE,z:DEFAULT_NAMESPACE,zoomAndPan:DEFAULT_NAMESPACE};module.exports=namespaces;

},{}],73:[function(require,module,exports){
"use strict";var properties={abbr:"abbr",accept:"accept","accept-charset":"acceptCharset",accesskey:"accessKey",action:"action",allowfullscreen:"allowFullScreen",allowtransparency:"allowTransparency",alt:"alt",async:"async",autocomplete:"autoComplete",autofocus:"autoFocus",autoplay:"autoPlay",cellpadding:"cellPadding",cellspacing:"cellSpacing",challenge:"challenge",charset:"charset",checked:"checked",cite:"cite","class":"className",cols:"cols",colspan:"colSpan",command:"command",content:"content",contenteditable:"contentEditable",contextmenu:"contextMenu",controls:"controls",coords:"coords",crossorigin:"crossOrigin",data:"data",datetime:"dateTime","default":"default",defer:"defer",dir:"dir",disabled:"disabled",download:"download",draggable:"draggable",dropzone:"dropzone",enctype:"encType","for":"htmlFor",form:"form",formaction:"formAction",formenctype:"formEncType",formmethod:"formMethod",formnovalidate:"formNoValidate",formtarget:"formTarget",frameBorder:"frameBorder",headers:"headers",height:"height",hidden:"hidden",high:"high",href:"href",hreflang:"hrefLang","http-equiv":"httpEquiv",icon:"icon",id:"id",inputmode:"inputMode",ismap:"isMap",itemid:"itemId",itemprop:"itemProp",itemref:"itemRef",itemscope:"itemScope",itemtype:"itemType",kind:"kind",label:"label",lang:"lang",list:"list",loop:"loop",manifest:"manifest",max:"max",maxlength:"maxLength",media:"media",mediagroup:"mediaGroup",method:"method",min:"min",minlength:"minLength",multiple:"multiple",muted:"muted",name:"name",novalidate:"noValidate",open:"open",optimum:"optimum",pattern:"pattern",ping:"ping",placeholder:"placeholder",poster:"poster",preload:"preload",radiogroup:"radioGroup",readonly:"readOnly",rel:"rel",required:"required",role:"role",rows:"rows",rowspan:"rowSpan",sandbox:"sandbox",scope:"scope",scoped:"scoped",scrolling:"scrolling",seamless:"seamless",selected:"selected",shape:"shape",size:"size",sizes:"sizes",sortable:"sortable",span:"span",spellcheck:"spellCheck",src:"src",srcdoc:"srcDoc",srcset:"srcSet",start:"start",step:"step",style:"style",tabindex:"tabIndex",target:"target",title:"title",translate:"translate",type:"type",typemustmatch:"typeMustMatch",usemap:"useMap",value:"value",width:"width",wmode:"wmode",wrap:"wrap"};module.exports=properties;

},{}],74:[function(require,module,exports){
function createAttribute(e,r,t){if(properties.hasOwnProperty(e)){if(shouldSkip(e,r))return"";e=(attributeNames[e]||e).toLowerCase();var p=properties[e];return p===types.BOOLEAN||p===types.OVERLOADED_BOOLEAN&&r===!0?escape(e):prefixAttribute(e)+escape(r)+'"'}return t?null==r?"":prefixAttribute(e)+escape(r)+'"':null}function shouldSkip(e,r){var t=properties[e];return null==r||t===types.BOOLEAN&&!r||t===types.OVERLOADED_BOOLEAN&&r===!1}function memoizeString(e){var r={};return function(t){return r.hasOwnProperty(t)?r[t]:r[t]=e.call(this,t)}}var escape=require("escape-html"),propConfig=require("./property-config"),types=propConfig.attributeTypes,properties=propConfig.properties,attributeNames=propConfig.attributeNames,prefixAttribute=memoizeString(function(e){return escape(e)+'="'});module.exports=createAttribute;

},{"./property-config":76,"escape-html":31}],75:[function(require,module,exports){
function toHTML(e,r){return e?(isThunk(e)&&(e=e.render()),isWidget(e)&&e.render&&(e=e.render()),isVNode(e)?openTag(e)+tagContent(e)+closeTag(e):isVText(e)?r&&"script"===r.tagName.toLowerCase()?String(e.text):escape(String(e.text)):""):""}function openTag(e){var r=e.properties,t="<"+e.tagName.toLowerCase();for(var i in r){var o=r[i];if(null!=o)if("attributes"!=i){if("style"==i){var a="";o=extend({},o);for(var n in o)a+=paramCase(n)+": "+o[n]+"; ";o=a.trim()}if(o instanceof softHook||o instanceof attrHook)t+=" "+createAttribute(i,o.value,!0);else{var s=createAttribute(i,o);s&&(t+=" "+s)}}else{o=extend({},o);for(var u in o)t+=" "+createAttribute(u,o[u],!0)}}return t+">"}function tagContent(e){var r=e.properties.innerHTML;if(null!=r)return r;var t="";if(e.children&&e.children.length)for(var i=0,o=e.children.length;o>i;i++){var a=e.children[i];t+=toHTML(a,e)}return t}function closeTag(e){var r=e.tagName.toLowerCase();return voidElements[r]?"":"</"+r+">"}var escape=require("escape-html"),extend=require("xtend"),isVNode=require("virtual-dom/vnode/is-vnode"),isVText=require("virtual-dom/vnode/is-vtext"),isThunk=require("virtual-dom/vnode/is-thunk"),isWidget=require("virtual-dom/vnode/is-widget"),softHook=require("virtual-dom/virtual-hyperscript/hooks/soft-set-hook"),attrHook=require("virtual-dom/virtual-hyperscript/hooks/attribute-hook"),paramCase=require("param-case"),createAttribute=require("./create-attribute"),voidElements=require("./void-elements");module.exports=toHTML;

},{"./create-attribute":74,"./void-elements":77,"escape-html":31,"param-case":61,"virtual-dom/virtual-hyperscript/hooks/attribute-hook":86,"virtual-dom/virtual-hyperscript/hooks/soft-set-hook":88,"virtual-dom/vnode/is-thunk":92,"virtual-dom/vnode/is-vnode":94,"virtual-dom/vnode/is-vtext":95,"virtual-dom/vnode/is-widget":96,"xtend":105}],76:[function(require,module,exports){
var types={BOOLEAN:1,OVERLOADED_BOOLEAN:2},properties={accept:!0,acceptCharset:!0,accessKey:!0,action:!0,allowFullScreen:types.BOOLEAN,allowTransparency:!0,alt:!0,async:types.BOOLEAN,autocomplete:!0,autofocus:types.BOOLEAN,autoplay:types.BOOLEAN,cellPadding:!0,cellSpacing:!0,charset:!0,checked:types.BOOLEAN,classID:!0,className:!0,cols:!0,colSpan:!0,content:!0,contentEditable:!0,contextMenu:!0,controls:types.BOOLEAN,coords:!0,crossOrigin:!0,data:!0,dateTime:!0,defer:types.BOOLEAN,dir:!0,disabled:types.BOOLEAN,download:types.OVERLOADED_BOOLEAN,draggable:!0,enctype:!0,form:!0,formAction:!0,formEncType:!0,formMethod:!0,formNoValidate:types.BOOLEAN,formTarget:!0,frameBorder:!0,headers:!0,height:!0,hidden:types.BOOLEAN,href:!0,hreflang:!0,htmlFor:!0,httpEquiv:!0,icon:!0,id:!0,label:!0,lang:!0,list:!0,loop:types.BOOLEAN,manifest:!0,marginHeight:!0,marginWidth:!0,max:!0,maxLength:!0,media:!0,mediaGroup:!0,method:!0,min:!0,multiple:types.BOOLEAN,muted:types.BOOLEAN,name:!0,noValidate:types.BOOLEAN,open:!0,pattern:!0,placeholder:!0,poster:!0,preload:!0,radiogroup:!0,readOnly:types.BOOLEAN,rel:!0,required:types.BOOLEAN,role:!0,rows:!0,rowSpan:!0,sandbox:!0,scope:!0,scrolling:!0,seamless:types.BOOLEAN,selected:types.BOOLEAN,shape:!0,size:!0,sizes:!0,span:!0,spellcheck:!0,src:!0,srcdoc:!0,srcset:!0,start:!0,step:!0,style:!0,tabIndex:!0,target:!0,title:!0,type:!0,useMap:!0,value:!0,width:!0,wmode:!0,autocapitalize:!0,autocorrect:!0,itemProp:!0,itemScope:types.BOOLEAN,itemType:!0,property:!0},attributeNames={acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"};module.exports={attributeTypes:types,properties:properties,attributeNames:attributeNames};

},{}],77:[function(require,module,exports){
module.exports={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0};

},{}],78:[function(require,module,exports){
var diff=require("./vtree/diff.js");module.exports=diff;

},{"./vtree/diff.js":102}],79:[function(require,module,exports){
var patch=require("./vdom/patch.js");module.exports=patch;

},{"./vdom/patch.js":84}],80:[function(require,module,exports){
function applyProperties(o,t,e){for(var r in t){var i=t[r];void 0===i?removeProperty(o,r,i,e):isHook(i)?(removeProperty(o,r,i,e),i.hook&&i.hook(o,r,e?e[r]:void 0)):isObject(i)?patchObject(o,t,e,r,i):o[r]=i}}function removeProperty(o,t,e,r){if(r){var i=r[t];if(isHook(i))i.unhook&&i.unhook(o,t,e);else if("attributes"===t)for(var v in i)o.removeAttribute(v);else if("style"===t)for(var s in i)o.style[s]="";else"string"==typeof i?o[t]="":o[t]=null}}function patchObject(o,t,e,r,i){var v=e?e[r]:void 0;if("attributes"!==r){if(v&&isObject(v)&&getPrototype(v)!==getPrototype(i))return void(o[r]=i);isObject(o[r])||(o[r]={});var s="style"===r?"":void 0;for(var n in i){var p=i[n];o[r][n]=void 0===p?s:p}}else for(var c in i){var u=i[c];void 0===u?o.removeAttribute(c):o.setAttribute(c,u)}}function getPrototype(o){return Object.getPrototypeOf?Object.getPrototypeOf(o):o.__proto__?o.__proto__:o.constructor?o.constructor.prototype:void 0}var isObject=require("is-object"),isHook=require("../vnode/is-vhook.js");module.exports=applyProperties;

},{"../vnode/is-vhook.js":93,"is-object":58}],81:[function(require,module,exports){
function createElement(e,r){var t=r?r.document||document:document,n=r?r.warn:null;if(e=handleThunk(e).a,isWidget(e))return e.init();if(isVText(e))return t.createTextNode(e.text);if(!isVNode(e))return n&&n("Item is not a valid virtual dom node",e),null;var i=null===e.namespace?t.createElement(e.tagName):t.createElementNS(e.namespace,e.tagName),a=e.properties;applyProperties(i,a);for(var d=e.children,l=0;l<d.length;l++){var o=createElement(d[l],r);o&&i.appendChild(o)}return i}var document=require("global/document"),applyProperties=require("./apply-properties"),isVNode=require("../vnode/is-vnode.js"),isVText=require("../vnode/is-vtext.js"),isWidget=require("../vnode/is-widget.js"),handleThunk=require("../vnode/handle-thunk.js");module.exports=createElement;

},{"../vnode/handle-thunk.js":91,"../vnode/is-vnode.js":94,"../vnode/is-vtext.js":95,"../vnode/is-widget.js":96,"./apply-properties":80,"global/document":33}],82:[function(require,module,exports){
function domIndex(n,e,r,i){return r&&0!==r.length?(r.sort(ascending),recurse(n,e,r,i,0)):{}}function recurse(n,e,r,i,t){if(i=i||{},n){indexInRange(r,t,t)&&(i[t]=n);var d=e.children;if(d)for(var u=n.childNodes,o=0;o<e.children.length;o++){t+=1;var c=d[o]||noChild,f=t+(c.count||0);indexInRange(r,t,f)&&recurse(u[o],c,r,i,t),t=f}}return i}function indexInRange(n,e,r){if(0===n.length)return!1;for(var i,t,d=0,u=n.length-1;u>=d;){if(i=(u+d)/2>>0,t=n[i],d===u)return t>=e&&r>=t;if(e>t)d=i+1;else{if(!(t>r))return!0;u=i-1}}return!1}function ascending(n,e){return n>e?1:-1}var noChild={};module.exports=domIndex;

},{}],83:[function(require,module,exports){
function applyPatch(e,r,t){var a=e.type,n=e.vNode,o=e.patch;switch(a){case VPatch.REMOVE:return removeNode(r,n);case VPatch.INSERT:return insertNode(r,o,t);case VPatch.VTEXT:return stringPatch(r,n,o,t);case VPatch.WIDGET:return widgetPatch(r,n,o,t);case VPatch.VNODE:return vNodePatch(r,n,o,t);case VPatch.ORDER:return reorderChildren(r,o),r;case VPatch.PROPS:return applyProperties(r,o,n.properties),r;case VPatch.THUNK:return replaceRoot(r,t.patch(r,o,t));default:return r}}function removeNode(e,r){var t=e.parentNode;return t&&t.removeChild(e),destroyWidget(e,r),null}function insertNode(e,r,t){var a=t.render(r,t);return e&&e.appendChild(a),e}function stringPatch(e,r,t,a){var n;if(3===e.nodeType)e.replaceData(0,e.length,t.text),n=e;else{var o=e.parentNode;n=a.render(t,a),o&&n!==e&&o.replaceChild(n,e)}return n}function widgetPatch(e,r,t,a){var n,o=updateWidget(r,t);n=o?t.update(r,e)||e:a.render(t,a);var d=e.parentNode;return d&&n!==e&&d.replaceChild(n,e),o||destroyWidget(e,r),n}function vNodePatch(e,r,t,a){var n=e.parentNode,o=a.render(t,a);return n&&o!==e&&n.replaceChild(o,e),o}function destroyWidget(e,r){"function"==typeof r.destroy&&isWidget(r)&&r.destroy(e)}function reorderChildren(e,r){for(var t,a,n,o=e.childNodes,d={},i=0;i<r.removes.length;i++)a=r.removes[i],t=o[a.from],a.key&&(d[a.key]=t),e.removeChild(t);for(var c=o.length,p=0;p<r.inserts.length;p++)n=r.inserts[p],t=d[n.key],e.insertBefore(t,n.to>=c++?null:o[n.to])}function replaceRoot(e,r){return e&&r&&e!==r&&e.parentNode&&e.parentNode.replaceChild(r,e),r}var applyProperties=require("./apply-properties"),isWidget=require("../vnode/is-widget.js"),VPatch=require("../vnode/vpatch.js"),updateWidget=require("./update-widget");module.exports=applyPatch;

},{"../vnode/is-widget.js":96,"../vnode/vpatch.js":99,"./apply-properties":80,"./update-widget":85}],84:[function(require,module,exports){
function patch(r,e,t){return t=t||{},t.patch=t.patch&&t.patch!==patch?t.patch:patchRecursive,t.render=t.render||render,t.patch(r,e,t)}function patchRecursive(r,e,t){var a=patchIndices(e);if(0===a.length)return r;var n=domIndex(r,e.a,a),c=r.ownerDocument;t.document||c===document||(t.document=c);for(var p=0;p<a.length;p++){var u=a[p];r=applyPatch(r,n[u],e[u],t)}return r}function applyPatch(r,e,t,a){if(!e)return r;var n;if(isArray(t))for(var c=0;c<t.length;c++)n=patchOp(t[c],e,a),e===r&&(r=n);else n=patchOp(t,e,a),e===r&&(r=n);return r}function patchIndices(r){var e=[];for(var t in r)"a"!==t&&e.push(Number(t));return e}var document=require("global/document"),isArray=require("x-is-array"),render=require("./create-element"),domIndex=require("./dom-index"),patchOp=require("./patch-op");module.exports=patch;

},{"./create-element":81,"./dom-index":82,"./patch-op":83,"global/document":33,"x-is-array":104}],85:[function(require,module,exports){
function updateWidget(i,e){return isWidget(i)&&isWidget(e)?"name"in i&&"name"in e?i.id===e.id:i.init===e.init:!1}var isWidget=require("../vnode/is-widget.js");module.exports=updateWidget;

},{"../vnode/is-widget.js":96}],86:[function(require,module,exports){
"use strict";function AttributeHook(t,e){return this instanceof AttributeHook?(this.namespace=t,void(this.value=e)):new AttributeHook(t,e)}module.exports=AttributeHook,AttributeHook.prototype.hook=function(t,e,o){o&&"AttributeHook"===o.type&&o.value===this.value&&o.namespace===this.namespace||t.setAttributeNS(this.namespace,e,this.value)},AttributeHook.prototype.unhook=function(t,e,o){if(!o||"AttributeHook"!==o.type||o.namespace!==this.namespace){var i=e.indexOf(":"),u=i>-1?e.substr(i+1):e;t.removeAttributeNS(this.namespace,u)}},AttributeHook.prototype.type="AttributeHook";

},{}],87:[function(require,module,exports){
"use strict";function EvHook(o){return this instanceof EvHook?void(this.value=o):new EvHook(o)}var EvStore=require("ev-store");module.exports=EvHook,EvHook.prototype.hook=function(o,t){var e=EvStore(o),r=t.substr(3);e[r]=this.value},EvHook.prototype.unhook=function(o,t){var e=EvStore(o),r=t.substr(3);e[r]=void 0};

},{"ev-store":32}],88:[function(require,module,exports){
"use strict";function SoftSetHook(o){return this instanceof SoftSetHook?void(this.value=o):new SoftSetHook(o)}module.exports=SoftSetHook,SoftSetHook.prototype.hook=function(o,t){o[t]!==this.value&&(o[t]=this.value)};

},{}],89:[function(require,module,exports){
"use strict";function parseTag(s,a){if(!s)return"DIV";var t=!a.hasOwnProperty("id"),e=split(s,classIdSplit),r=null;notClassId.test(e[1])&&(r="DIV");var l,n,i,p;for(p=0;p<e.length;p++)n=e[p],n&&(i=n.charAt(0),r?"."===i?(l=l||[],l.push(n.substring(1,n.length))):"#"===i&&t&&(a.id=n.substring(1,n.length)):r=n);return l&&(a.className&&l.push(a.className),a.className=l.join(" ")),a.namespace?r:r.toUpperCase()}var split=require("browser-split"),classIdSplit=/([\.#]?[a-zA-Z0-9\u007F-\uFFFF_:-]+)/,notClassId=/^\.|#/;module.exports=parseTag;

},{"browser-split":14}],90:[function(require,module,exports){
"use strict";function SVGAttributeNamespace(E){return SVG_PROPERTIES.hasOwnProperty(E)?SVG_PROPERTIES[E]:void 0}var DEFAULT_NAMESPACE=null,EV_NAMESPACE="http://www.w3.org/2001/xml-events",XLINK_NAMESPACE="http://www.w3.org/1999/xlink",XML_NAMESPACE="http://www.w3.org/XML/1998/namespace",SVG_PROPERTIES={about:DEFAULT_NAMESPACE,"accent-height":DEFAULT_NAMESPACE,accumulate:DEFAULT_NAMESPACE,additive:DEFAULT_NAMESPACE,"alignment-baseline":DEFAULT_NAMESPACE,alphabetic:DEFAULT_NAMESPACE,amplitude:DEFAULT_NAMESPACE,"arabic-form":DEFAULT_NAMESPACE,ascent:DEFAULT_NAMESPACE,attributeName:DEFAULT_NAMESPACE,attributeType:DEFAULT_NAMESPACE,azimuth:DEFAULT_NAMESPACE,bandwidth:DEFAULT_NAMESPACE,baseFrequency:DEFAULT_NAMESPACE,baseProfile:DEFAULT_NAMESPACE,"baseline-shift":DEFAULT_NAMESPACE,bbox:DEFAULT_NAMESPACE,begin:DEFAULT_NAMESPACE,bias:DEFAULT_NAMESPACE,by:DEFAULT_NAMESPACE,calcMode:DEFAULT_NAMESPACE,"cap-height":DEFAULT_NAMESPACE,"class":DEFAULT_NAMESPACE,clip:DEFAULT_NAMESPACE,"clip-path":DEFAULT_NAMESPACE,"clip-rule":DEFAULT_NAMESPACE,clipPathUnits:DEFAULT_NAMESPACE,color:DEFAULT_NAMESPACE,"color-interpolation":DEFAULT_NAMESPACE,"color-interpolation-filters":DEFAULT_NAMESPACE,"color-profile":DEFAULT_NAMESPACE,"color-rendering":DEFAULT_NAMESPACE,content:DEFAULT_NAMESPACE,contentScriptType:DEFAULT_NAMESPACE,contentStyleType:DEFAULT_NAMESPACE,cursor:DEFAULT_NAMESPACE,cx:DEFAULT_NAMESPACE,cy:DEFAULT_NAMESPACE,d:DEFAULT_NAMESPACE,datatype:DEFAULT_NAMESPACE,defaultAction:DEFAULT_NAMESPACE,descent:DEFAULT_NAMESPACE,diffuseConstant:DEFAULT_NAMESPACE,direction:DEFAULT_NAMESPACE,display:DEFAULT_NAMESPACE,divisor:DEFAULT_NAMESPACE,"dominant-baseline":DEFAULT_NAMESPACE,dur:DEFAULT_NAMESPACE,dx:DEFAULT_NAMESPACE,dy:DEFAULT_NAMESPACE,edgeMode:DEFAULT_NAMESPACE,editable:DEFAULT_NAMESPACE,elevation:DEFAULT_NAMESPACE,"enable-background":DEFAULT_NAMESPACE,end:DEFAULT_NAMESPACE,"ev:event":EV_NAMESPACE,event:DEFAULT_NAMESPACE,exponent:DEFAULT_NAMESPACE,externalResourcesRequired:DEFAULT_NAMESPACE,fill:DEFAULT_NAMESPACE,"fill-opacity":DEFAULT_NAMESPACE,"fill-rule":DEFAULT_NAMESPACE,filter:DEFAULT_NAMESPACE,filterRes:DEFAULT_NAMESPACE,filterUnits:DEFAULT_NAMESPACE,"flood-color":DEFAULT_NAMESPACE,"flood-opacity":DEFAULT_NAMESPACE,focusHighlight:DEFAULT_NAMESPACE,focusable:DEFAULT_NAMESPACE,"font-family":DEFAULT_NAMESPACE,"font-size":DEFAULT_NAMESPACE,"font-size-adjust":DEFAULT_NAMESPACE,"font-stretch":DEFAULT_NAMESPACE,"font-style":DEFAULT_NAMESPACE,"font-variant":DEFAULT_NAMESPACE,"font-weight":DEFAULT_NAMESPACE,format:DEFAULT_NAMESPACE,from:DEFAULT_NAMESPACE,fx:DEFAULT_NAMESPACE,fy:DEFAULT_NAMESPACE,g1:DEFAULT_NAMESPACE,g2:DEFAULT_NAMESPACE,"glyph-name":DEFAULT_NAMESPACE,"glyph-orientation-horizontal":DEFAULT_NAMESPACE,"glyph-orientation-vertical":DEFAULT_NAMESPACE,glyphRef:DEFAULT_NAMESPACE,gradientTransform:DEFAULT_NAMESPACE,gradientUnits:DEFAULT_NAMESPACE,handler:DEFAULT_NAMESPACE,hanging:DEFAULT_NAMESPACE,height:DEFAULT_NAMESPACE,"horiz-adv-x":DEFAULT_NAMESPACE,"horiz-origin-x":DEFAULT_NAMESPACE,"horiz-origin-y":DEFAULT_NAMESPACE,id:DEFAULT_NAMESPACE,ideographic:DEFAULT_NAMESPACE,"image-rendering":DEFAULT_NAMESPACE,"in":DEFAULT_NAMESPACE,in2:DEFAULT_NAMESPACE,initialVisibility:DEFAULT_NAMESPACE,intercept:DEFAULT_NAMESPACE,k:DEFAULT_NAMESPACE,k1:DEFAULT_NAMESPACE,k2:DEFAULT_NAMESPACE,k3:DEFAULT_NAMESPACE,k4:DEFAULT_NAMESPACE,kernelMatrix:DEFAULT_NAMESPACE,kernelUnitLength:DEFAULT_NAMESPACE,kerning:DEFAULT_NAMESPACE,keyPoints:DEFAULT_NAMESPACE,keySplines:DEFAULT_NAMESPACE,keyTimes:DEFAULT_NAMESPACE,lang:DEFAULT_NAMESPACE,lengthAdjust:DEFAULT_NAMESPACE,"letter-spacing":DEFAULT_NAMESPACE,"lighting-color":DEFAULT_NAMESPACE,limitingConeAngle:DEFAULT_NAMESPACE,local:DEFAULT_NAMESPACE,"marker-end":DEFAULT_NAMESPACE,"marker-mid":DEFAULT_NAMESPACE,"marker-start":DEFAULT_NAMESPACE,markerHeight:DEFAULT_NAMESPACE,markerUnits:DEFAULT_NAMESPACE,markerWidth:DEFAULT_NAMESPACE,mask:DEFAULT_NAMESPACE,maskContentUnits:DEFAULT_NAMESPACE,maskUnits:DEFAULT_NAMESPACE,mathematical:DEFAULT_NAMESPACE,max:DEFAULT_NAMESPACE,media:DEFAULT_NAMESPACE,mediaCharacterEncoding:DEFAULT_NAMESPACE,mediaContentEncodings:DEFAULT_NAMESPACE,mediaSize:DEFAULT_NAMESPACE,mediaTime:DEFAULT_NAMESPACE,method:DEFAULT_NAMESPACE,min:DEFAULT_NAMESPACE,mode:DEFAULT_NAMESPACE,name:DEFAULT_NAMESPACE,"nav-down":DEFAULT_NAMESPACE,"nav-down-left":DEFAULT_NAMESPACE,"nav-down-right":DEFAULT_NAMESPACE,"nav-left":DEFAULT_NAMESPACE,"nav-next":DEFAULT_NAMESPACE,"nav-prev":DEFAULT_NAMESPACE,"nav-right":DEFAULT_NAMESPACE,"nav-up":DEFAULT_NAMESPACE,"nav-up-left":DEFAULT_NAMESPACE,"nav-up-right":DEFAULT_NAMESPACE,numOctaves:DEFAULT_NAMESPACE,observer:DEFAULT_NAMESPACE,offset:DEFAULT_NAMESPACE,opacity:DEFAULT_NAMESPACE,operator:DEFAULT_NAMESPACE,order:DEFAULT_NAMESPACE,orient:DEFAULT_NAMESPACE,orientation:DEFAULT_NAMESPACE,origin:DEFAULT_NAMESPACE,overflow:DEFAULT_NAMESPACE,overlay:DEFAULT_NAMESPACE,"overline-position":DEFAULT_NAMESPACE,"overline-thickness":DEFAULT_NAMESPACE,"panose-1":DEFAULT_NAMESPACE,path:DEFAULT_NAMESPACE,pathLength:DEFAULT_NAMESPACE,patternContentUnits:DEFAULT_NAMESPACE,patternTransform:DEFAULT_NAMESPACE,patternUnits:DEFAULT_NAMESPACE,phase:DEFAULT_NAMESPACE,playbackOrder:DEFAULT_NAMESPACE,"pointer-events":DEFAULT_NAMESPACE,points:DEFAULT_NAMESPACE,pointsAtX:DEFAULT_NAMESPACE,pointsAtY:DEFAULT_NAMESPACE,pointsAtZ:DEFAULT_NAMESPACE,preserveAlpha:DEFAULT_NAMESPACE,preserveAspectRatio:DEFAULT_NAMESPACE,primitiveUnits:DEFAULT_NAMESPACE,propagate:DEFAULT_NAMESPACE,property:DEFAULT_NAMESPACE,r:DEFAULT_NAMESPACE,radius:DEFAULT_NAMESPACE,refX:DEFAULT_NAMESPACE,refY:DEFAULT_NAMESPACE,rel:DEFAULT_NAMESPACE,"rendering-intent":DEFAULT_NAMESPACE,repeatCount:DEFAULT_NAMESPACE,repeatDur:DEFAULT_NAMESPACE,requiredExtensions:DEFAULT_NAMESPACE,requiredFeatures:DEFAULT_NAMESPACE,requiredFonts:DEFAULT_NAMESPACE,requiredFormats:DEFAULT_NAMESPACE,resource:DEFAULT_NAMESPACE,restart:DEFAULT_NAMESPACE,result:DEFAULT_NAMESPACE,rev:DEFAULT_NAMESPACE,role:DEFAULT_NAMESPACE,rotate:DEFAULT_NAMESPACE,rx:DEFAULT_NAMESPACE,ry:DEFAULT_NAMESPACE,scale:DEFAULT_NAMESPACE,seed:DEFAULT_NAMESPACE,"shape-rendering":DEFAULT_NAMESPACE,slope:DEFAULT_NAMESPACE,snapshotTime:DEFAULT_NAMESPACE,spacing:DEFAULT_NAMESPACE,specularConstant:DEFAULT_NAMESPACE,specularExponent:DEFAULT_NAMESPACE,spreadMethod:DEFAULT_NAMESPACE,startOffset:DEFAULT_NAMESPACE,stdDeviation:DEFAULT_NAMESPACE,stemh:DEFAULT_NAMESPACE,stemv:DEFAULT_NAMESPACE,stitchTiles:DEFAULT_NAMESPACE,"stop-color":DEFAULT_NAMESPACE,"stop-opacity":DEFAULT_NAMESPACE,"strikethrough-position":DEFAULT_NAMESPACE,"strikethrough-thickness":DEFAULT_NAMESPACE,string:DEFAULT_NAMESPACE,stroke:DEFAULT_NAMESPACE,"stroke-dasharray":DEFAULT_NAMESPACE,"stroke-dashoffset":DEFAULT_NAMESPACE,"stroke-linecap":DEFAULT_NAMESPACE,"stroke-linejoin":DEFAULT_NAMESPACE,"stroke-miterlimit":DEFAULT_NAMESPACE,"stroke-opacity":DEFAULT_NAMESPACE,"stroke-width":DEFAULT_NAMESPACE,surfaceScale:DEFAULT_NAMESPACE,syncBehavior:DEFAULT_NAMESPACE,syncBehaviorDefault:DEFAULT_NAMESPACE,syncMaster:DEFAULT_NAMESPACE,syncTolerance:DEFAULT_NAMESPACE,syncToleranceDefault:DEFAULT_NAMESPACE,systemLanguage:DEFAULT_NAMESPACE,tableValues:DEFAULT_NAMESPACE,target:DEFAULT_NAMESPACE,targetX:DEFAULT_NAMESPACE,targetY:DEFAULT_NAMESPACE,"text-anchor":DEFAULT_NAMESPACE,"text-decoration":DEFAULT_NAMESPACE,"text-rendering":DEFAULT_NAMESPACE,textLength:DEFAULT_NAMESPACE,timelineBegin:DEFAULT_NAMESPACE,title:DEFAULT_NAMESPACE,to:DEFAULT_NAMESPACE,transform:DEFAULT_NAMESPACE,transformBehavior:DEFAULT_NAMESPACE,type:DEFAULT_NAMESPACE,"typeof":DEFAULT_NAMESPACE,u1:DEFAULT_NAMESPACE,u2:DEFAULT_NAMESPACE,"underline-position":DEFAULT_NAMESPACE,"underline-thickness":DEFAULT_NAMESPACE,unicode:DEFAULT_NAMESPACE,"unicode-bidi":DEFAULT_NAMESPACE,"unicode-range":DEFAULT_NAMESPACE,"units-per-em":DEFAULT_NAMESPACE,"v-alphabetic":DEFAULT_NAMESPACE,"v-hanging":DEFAULT_NAMESPACE,"v-ideographic":DEFAULT_NAMESPACE,"v-mathematical":DEFAULT_NAMESPACE,values:DEFAULT_NAMESPACE,version:DEFAULT_NAMESPACE,"vert-adv-y":DEFAULT_NAMESPACE,"vert-origin-x":DEFAULT_NAMESPACE,"vert-origin-y":DEFAULT_NAMESPACE,viewBox:DEFAULT_NAMESPACE,viewTarget:DEFAULT_NAMESPACE,visibility:DEFAULT_NAMESPACE,width:DEFAULT_NAMESPACE,widths:DEFAULT_NAMESPACE,"word-spacing":DEFAULT_NAMESPACE,"writing-mode":DEFAULT_NAMESPACE,x:DEFAULT_NAMESPACE,"x-height":DEFAULT_NAMESPACE,x1:DEFAULT_NAMESPACE,x2:DEFAULT_NAMESPACE,xChannelSelector:DEFAULT_NAMESPACE,"xlink:actuate":XLINK_NAMESPACE,"xlink:arcrole":XLINK_NAMESPACE,"xlink:href":XLINK_NAMESPACE,"xlink:role":XLINK_NAMESPACE,"xlink:show":XLINK_NAMESPACE,"xlink:title":XLINK_NAMESPACE,"xlink:type":XLINK_NAMESPACE,"xml:base":XML_NAMESPACE,"xml:id":XML_NAMESPACE,"xml:lang":XML_NAMESPACE,"xml:space":XML_NAMESPACE,y:DEFAULT_NAMESPACE,y1:DEFAULT_NAMESPACE,y2:DEFAULT_NAMESPACE,yChannelSelector:DEFAULT_NAMESPACE,z:DEFAULT_NAMESPACE,zoomAndPan:DEFAULT_NAMESPACE};module.exports=SVGAttributeNamespace;

},{}],91:[function(require,module,exports){
function handleThunk(e,n){var r=e,i=n;return isThunk(n)&&(i=renderThunk(n,e)),isThunk(e)&&(r=renderThunk(e,null)),{a:r,b:i}}function renderThunk(e,n){var r=e.vnode;if(r||(r=e.vnode=e.render(n)),!(isVNode(r)||isVText(r)||isWidget(r)))throw new Error("thunk did not return a valid node");return r}var isVNode=require("./is-vnode"),isVText=require("./is-vtext"),isWidget=require("./is-widget"),isThunk=require("./is-thunk");module.exports=handleThunk;

},{"./is-thunk":92,"./is-vnode":94,"./is-vtext":95,"./is-widget":96}],92:[function(require,module,exports){
function isThunk(n){return n&&"Thunk"===n.type}module.exports=isThunk;

},{}],93:[function(require,module,exports){
function isHook(o){return o&&("function"==typeof o.hook&&!o.hasOwnProperty("hook")||"function"==typeof o.unhook&&!o.hasOwnProperty("unhook"))}module.exports=isHook;

},{}],94:[function(require,module,exports){
function isVirtualNode(e){return e&&"VirtualNode"===e.type&&e.version===version}var version=require("./version");module.exports=isVirtualNode;

},{"./version":97}],95:[function(require,module,exports){
function isVirtualText(e){return e&&"VirtualText"===e.type&&e.version===version}var version=require("./version");module.exports=isVirtualText;

},{"./version":97}],96:[function(require,module,exports){
function isWidget(e){return e&&"Widget"===e.type}module.exports=isWidget;

},{}],97:[function(require,module,exports){
module.exports="2";

},{}],98:[function(require,module,exports){
function VirtualNode(e,i,o,s,r){this.tagName=e,this.properties=i||noProperties,this.children=o||noChildren,this.key=null!=s?String(s):void 0,this.namespace="string"==typeof r?r:null;var t,n=o&&o.length||0,h=0,a=!1,d=!1,u=!1;for(var k in i)if(i.hasOwnProperty(k)){var l=i[k];isVHook(l)&&l.unhook&&(t||(t={}),t[k]=l)}for(var p=0;n>p;p++){var v=o[p];isVNode(v)?(h+=v.count||0,!a&&v.hasWidgets&&(a=!0),!d&&v.hasThunks&&(d=!0),u||!v.hooks&&!v.descendantHooks||(u=!0)):!a&&isWidget(v)?"function"==typeof v.destroy&&(a=!0):!d&&isThunk(v)&&(d=!0)}this.count=n+h,this.hasWidgets=a,this.hasThunks=d,this.hooks=t,this.descendantHooks=u}var version=require("./version"),isVNode=require("./is-vnode"),isWidget=require("./is-widget"),isThunk=require("./is-thunk"),isVHook=require("./is-vhook");module.exports=VirtualNode;var noProperties={},noChildren=[];VirtualNode.prototype.version=version,VirtualNode.prototype.type="VirtualNode";

},{"./is-thunk":92,"./is-vhook":93,"./is-vnode":94,"./is-widget":96,"./version":97}],99:[function(require,module,exports){
function VirtualPatch(t,a,r){this.type=Number(t),this.vNode=a,this.patch=r}var version=require("./version");VirtualPatch.NONE=0,VirtualPatch.VTEXT=1,VirtualPatch.VNODE=2,VirtualPatch.WIDGET=3,VirtualPatch.PROPS=4,VirtualPatch.ORDER=5,VirtualPatch.INSERT=6,VirtualPatch.REMOVE=7,VirtualPatch.THUNK=8,module.exports=VirtualPatch,VirtualPatch.prototype.version=version,VirtualPatch.prototype.type="VirtualPatch";

},{"./version":97}],100:[function(require,module,exports){
function VirtualText(t){this.text=String(t)}var version=require("./version");module.exports=VirtualText,VirtualText.prototype.version=version,VirtualText.prototype.type="VirtualText";

},{"./version":97}],101:[function(require,module,exports){
function diffProps(o,t){var e;for(var r in o){r in t||(e=e||{},e[r]=void 0);var i=o[r],f=t[r];if(i!==f)if(isObject(i)&&isObject(f))if(getPrototype(f)!==getPrototype(i))e=e||{},e[r]=f;else if(isHook(f))e=e||{},e[r]=f;else{var s=diffProps(i,f);s&&(e=e||{},e[r]=s)}else e=e||{},e[r]=f}for(var n in t)n in o||(e=e||{},e[n]=t[n]);return e}function getPrototype(o){return Object.getPrototypeOf?Object.getPrototypeOf(o):o.__proto__?o.__proto__:o.constructor?o.constructor.prototype:void 0}var isObject=require("is-object"),isHook=require("../vnode/is-vhook");module.exports=diffProps;

},{"../vnode/is-vhook":93,"is-object":58}],102:[function(require,module,exports){
function diff(e,n){var t={a:e};return walk(e,n,t,0),t}function walk(e,n,t,r){if(e!==n){var h=t[r],a=!1;if(isThunk(e)||isThunk(n))thunks(e,n,t,r);else if(null==n)isWidget(e)||(clearState(e,t,r),h=t[r]),h=appendPatch(h,new VPatch(VPatch.REMOVE,e,n));else if(isVNode(n))if(isVNode(e))if(e.tagName===n.tagName&&e.namespace===n.namespace&&e.key===n.key){var i=diffProps(e.properties,n.properties);i&&(h=appendPatch(h,new VPatch(VPatch.PROPS,e,i))),h=diffChildren(e,n,t,h,r)}else h=appendPatch(h,new VPatch(VPatch.VNODE,e,n)),a=!0;else h=appendPatch(h,new VPatch(VPatch.VNODE,e,n)),a=!0;else isVText(n)?isVText(e)?e.text!==n.text&&(h=appendPatch(h,new VPatch(VPatch.VTEXT,e,n))):(h=appendPatch(h,new VPatch(VPatch.VTEXT,e,n)),a=!0):isWidget(n)&&(isWidget(e)||(a=!0),h=appendPatch(h,new VPatch(VPatch.WIDGET,e,n)));h&&(t[r]=h),a&&clearState(e,t,r)}}function diffChildren(e,n,t,r,h){for(var a=e.children,i=reorder(a,n.children),s=i.children,o=a.length,u=s.length,c=o>u?o:u,d=0;c>d;d++){var l=a[d],f=s[d];h+=1,l?walk(l,f,t,h):f&&(r=appendPatch(r,new VPatch(VPatch.INSERT,null,f))),isVNode(l)&&l.count&&(h+=l.count)}return i.moves&&(r=appendPatch(r,new VPatch(VPatch.ORDER,e,i.moves))),r}function clearState(e,n,t){unhook(e,n,t),destroyWidgets(e,n,t)}function destroyWidgets(e,n,t){if(isWidget(e))"function"==typeof e.destroy&&(n[t]=appendPatch(n[t],new VPatch(VPatch.REMOVE,e,null)));else if(isVNode(e)&&(e.hasWidgets||e.hasThunks))for(var r=e.children,h=r.length,a=0;h>a;a++){var i=r[a];t+=1,destroyWidgets(i,n,t),isVNode(i)&&i.count&&(t+=i.count)}else isThunk(e)&&thunks(e,null,n,t)}function thunks(e,n,t,r){var h=handleThunk(e,n),a=diff(h.a,h.b);hasPatches(a)&&(t[r]=new VPatch(VPatch.THUNK,null,a))}function hasPatches(e){for(var n in e)if("a"!==n)return!0;return!1}function unhook(e,n,t){if(isVNode(e)){if(e.hooks&&(n[t]=appendPatch(n[t],new VPatch(VPatch.PROPS,e,undefinedKeys(e.hooks)))),e.descendantHooks||e.hasThunks)for(var r=e.children,h=r.length,a=0;h>a;a++){var i=r[a];t+=1,unhook(i,n,t),isVNode(i)&&i.count&&(t+=i.count)}}else isThunk(e)&&thunks(e,null,n,t)}function undefinedKeys(e){var n={};for(var t in e)n[t]=void 0;return n}function reorder(e,n){var t=keyIndex(n),r=t.keys,h=t.free;if(h.length===n.length)return{children:n,moves:null};var a=keyIndex(e),i=a.keys,s=a.free;if(s.length===e.length)return{children:n,moves:null};for(var o=[],u=0,c=h.length,d=0,l=0;l<e.length;l++){var f,k=e[l];k.key?r.hasOwnProperty(k.key)?(f=r[k.key],o.push(n[f])):(f=l-d++,o.push(null)):c>u?(f=h[u++],o.push(n[f])):(f=l-d++,o.push(null))}for(var p=u>=h.length?n.length:h[u],P=0;P<n.length;P++){var v=n[P];v.key?i.hasOwnProperty(v.key)||o.push(v):P>=p&&o.push(v)}for(var y,V=o.slice(),g=0,T=[],m=[],w=0;w<n.length;){var N=n[w];for(y=V[g];null===y&&V.length;)T.push(remove(V,g,null)),y=V[g];y&&y.key===N.key?(g++,w++):N.key?(y&&y.key&&r[y.key]!==w+1?(T.push(remove(V,g,y.key)),y=V[g],y&&y.key===N.key?g++:m.push({key:N.key,to:w})):m.push({key:N.key,to:w}),w++):y&&y.key&&T.push(remove(V,g,y.key))}for(;g<V.length;)y=V[g],T.push(remove(V,g,y&&y.key));return T.length!==d||m.length?{children:o,moves:{removes:T,inserts:m}}:{children:o,moves:null}}function remove(e,n,t){return e.splice(n,1),{from:n,key:t}}function keyIndex(e){for(var n={},t=[],r=e.length,h=0;r>h;h++){var a=e[h];a.key?n[a.key]=h:t.push(h)}return{keys:n,free:t}}function appendPatch(e,n){return e?(isArray(e)?e.push(n):e=[e,n],e):n}var isArray=require("x-is-array"),VPatch=require("../vnode/vpatch"),isVNode=require("../vnode/is-vnode"),isVText=require("../vnode/is-vtext"),isWidget=require("../vnode/is-widget"),isThunk=require("../vnode/is-thunk"),handleThunk=require("../vnode/handle-thunk"),diffProps=require("./diff-props");module.exports=diff;

},{"../vnode/handle-thunk":91,"../vnode/is-thunk":92,"../vnode/is-vnode":94,"../vnode/is-vtext":95,"../vnode/is-widget":96,"../vnode/vpatch":99,"./diff-props":101,"x-is-array":104}],103:[function(require,module,exports){
(function (process){
"use strict";var warning=function(){};"production"!==process.env.NODE_ENV&&(warning=function(r,n,e){var o=arguments.length;e=new Array(o>2?o-2:0);for(var t=2;o>t;t++)e[t-2]=arguments[t];if(void 0===n)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(n.length<10||/^[s\W]*$/.test(n))throw new Error("The warning format should be able to uniquely identify this warning. Please, use a more descriptive format than: "+n);if(!r){var i=0,a="Warning: "+n.replace(/%s/g,function(){return e[i++]});"undefined"!=typeof console&&console.error(a);try{throw new Error(a)}catch(s){}}}),module.exports=warning;

}).call(this,require('_process'))

},{"_process":15}],104:[function(require,module,exports){
function isArray(r){return"[object Array]"===toString.call(r)}var nativeIsArray=Array.isArray,toString=Object.prototype.toString;module.exports=nativeIsArray||isArray;

},{}],105:[function(require,module,exports){
function extend(){for(var r={},e=0;e<arguments.length;e++){var t=arguments[e];for(var n in t)hasOwnProperty.call(t,n)&&(r[n]=t[n])}return r}module.exports=extend;var hasOwnProperty=Object.prototype.hasOwnProperty;

},{}],106:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}var _core=require("@cycle/core"),_dom=require("@cycle/dom"),_cyclicHistory=require("cyclic-history"),_http=require("@cycle/http"),_cyclicRouter=require("cyclic-router"),_history=require("history"),_stateDriver=require("./state-driver"),_main=require("./main"),_main2=_interopRequireDefault(_main),_polymer=require("./polymer"),_polymer2=_interopRequireDefault(_polymer);app.addEventListener("dom-change",function(){var e={DOM:(0,_dom.makeDOMDriver)("#application"),HTTP:(0,_http.makeHTTPDriver)(),router:(0,_cyclicRouter.makeRouterDriver)((0,_cyclicHistory.makeHistoryDriver)((0,_history.createHashHistory)())),state$:(0,_stateDriver.makeStateDriver)()};(0,_core.run)(_main2["default"],e)});

},{"./main":120,"./polymer":121,"./state-driver":122,"@cycle/core":1,"@cycle/dom":2,"@cycle/http":11,"cyclic-history":17,"cyclic-router":24,"history":49}],107:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function ContentRouter(e){var t=e.router,a=e.state$,n=t.define(routes),r=n.path$,u=n.value$,p=r.zip(u,function(n,r){var u=r(_extends({},e,{router:t.path(n),state$:a.take(1)}));return{DOM:u.DOM,state$:u.state$}});return{DOM:p.flatMapLatest(function(e){return e.DOM}),state$:p.flatMapLatest(function(e){return e.state$}),path$:r}}Object.defineProperty(exports,"__esModule",{value:!0});var _extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},_homeIndex=require("../../pages/home/home-index"),_homeIndex2=_interopRequireDefault(_homeIndex),_page1Index=require("../../pages/page1/page1-index"),_page1Index2=_interopRequireDefault(_page1Index),_page2Index=require("../../pages/page2/page2-index"),_page2Index2=_interopRequireDefault(_page2Index),_page404Index=require("../../pages/page404/page404-index"),_page404Index2=_interopRequireDefault(_page404Index),routes={"/":_homeIndex2["default"],"/page1":_page1Index2["default"],"/page2":_page2Index2["default"],"*":_page404Index2["default"]};exports["default"]=ContentRouter;

},{"../../pages/home/home-index":110,"../../pages/page1/page1-index":114,"../../pages/page2/page2-index":116,"../../pages/page404/page404-index":118}],108:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var _navbarView=require("./navbar-view"),_navbarView2=_interopRequireDefault(_navbarView),navbar=function(e,r){var a=(0,_navbarView2["default"])(e,r);return{DOM:a}};exports["default"]=navbar;

},{"./navbar-view":109}],109:[function(require,module,exports){
"use strict";function view(e,t){var r=e.router.createHref,o=r("/"),n=r("/page1"),a=r("/page2");return t.map(function(){return(0,_dom.div)([(0,_dom.nav)(".nav",[(0,_dom.ul)(".nav-list",[(0,_dom.li)(".nav-item .link",[(0,_dom.a)(".pure-button",{href:o},["Home"])]),(0,_dom.li)(".nav-item .link",[(0,_dom.a)(".pure-button",{href:n},["Page 1"])]),(0,_dom.li)(".nav-item .link .testlink",[(0,_dom.a)(".pure-button",{href:a},["Page 2"])])])])])})}Object.defineProperty(exports,"__esModule",{value:!0});var _dom=require("@cycle/dom");exports["default"]=view;

},{"@cycle/dom":2}],110:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var _extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(e[r]=o[r])}return e},_homeView=require("./home-view"),_homeView2=_interopRequireDefault(_homeView),_homeIntent=require("./home-intent"),_homeIntent2=_interopRequireDefault(_homeIntent),_homeModel=require("./home-model"),_homeModel2=_interopRequireDefault(_homeModel),Home=function(e){var t=e.state$,o=(0,_homeIntent2["default"])(e),r=(0,_homeModel2["default"])(_extends({},o,{state$:t}));return{DOM:(0,_homeView2["default"])(r),state$:r}};exports["default"]=Home;

},{"./home-intent":111,"./home-model":112,"./home-view":113}],111:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var homeIntent=function(e){return{inc$:e.DOM.select(".increment").events("click").map(function(){return 1}),dec$:e.DOM.select(".decrement").events("click").map(function(){return-1})}};exports["default"]=homeIntent;

},{}],112:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var _rx=require("rx"),_rx2=_interopRequireDefault(_rx),homeModel=function(e){var r=e.inc$,t=e.dec$,u=e.state$;return _rx2["default"].Observable.merge(u.take(1).map(function(e){var r=e.counter;return parseFloat(r)}),r,t).scan(function(e,r){return e+r}).map(function(e){return{counter:e}})};exports["default"]=homeModel;

},{"rx":64}],113:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _dom=require("@cycle/dom"),view=function(e){return e.map(function(e){var r=e.counter;return(0,_dom.div)(".homepage",[(0,_dom.div)([(0,_dom.div)([(0,_dom.h)("p","Counter: "+r)]),(0,_dom.h)("paper-input.username",{label:"Username"}),(0,_dom.h)("paper-input.password",{label:"Password",type:"password"}),(0,_dom.h)("paper-button.login",{raised:"true"},"Login")])])})};exports["default"]=view;

},{"@cycle/dom":2}],114:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var _rx=require("rx"),_rx2=_interopRequireDefault(_rx),_page1View=require("./page1-view"),_page1View2=_interopRequireDefault(_page1View),Page1=function(e){var r=e.state$,t=(0,_page1View2["default"])(r);return{DOM:_rx2["default"].Observable.just(t),state$:r}};exports["default"]=Page1;

},{"./page1-view":115,"rx":64}],115:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _dom=require("@cycle/dom"),view=function(e){return e.map(function(e){var o=e.counter;return(0,_dom.div)(".page1",[(0,_dom.h1)(".content-subhead",["Page 1"]),(0,_dom.h1)(["This is Page 1"]),(0,_dom.h2)(["Counter: "+o])])})};exports["default"]=view;

},{"@cycle/dom":2}],116:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var _rx=require("rx"),_rx2=_interopRequireDefault(_rx),_page2View=require("./page2-view"),_page2View2=_interopRequireDefault(_page2View),Page2=function(e){var r=e.state$,t=(0,_page2View2["default"])(r);return{DOM:_rx2["default"].Observable.just(t),state$:r}};exports["default"]=Page2;

},{"./page2-view":117,"rx":64}],117:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _dom=require("@cycle/dom"),view=function(e){return e.map(function(e){var o=e.counter;return(0,_dom.div)(".page2",[(0,_dom.h1)(".content-subhead",["Page 2"]),(0,_dom.h1)(["This is the second Page"]),(0,_dom.h2)(["Counter: "+o])])})};exports["default"]=view;

},{"@cycle/dom":2}],118:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var _rx=require("rx"),_rx2=_interopRequireDefault(_rx),_page404View=require("./page404-view"),_page404View2=_interopRequireDefault(_page404View),Page404=function(){var e=_rx2["default"].Observable.just((0,_page404View2["default"])());return{DOM:e}};exports["default"]=Page404;

},{"./page404-view":119,"rx":64}],119:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _dom=require("@cycle/dom"),view=function(){return(0,_dom.div)([(0,_dom.h1)(".content-subhead",["404 error"]),(0,_dom.h1)("Page could not be found")])};exports["default"]=view;

},{"@cycle/dom":2}],120:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function main(e){var n=(0,_contentRouterIndex2["default"])(e),t=n.path$,r=n.state$,o=((0,_navbarIndex2["default"])(e,t),e.DOM.select(".login").events("click").debounce(500).flatMap(function(n){return _rx.Observable.zip(e.DOM.select(".username").observable.flatMap(function(e){return e}).map(function(e){return e.value}).take(1),e.DOM.select(".password").observable.flatMap(function(e){return e}).map(function(e){return e.value}).take(1),function(e,n){return{username:e,password:n}})}).doOnNext(function(e){return console.log(e)}).filter(function(e){return e.username.length>0}).filter(function(e){return e.password.length>0}).map(function(e){return{url:"https://api.robinhood.com/api-token-auth/",method:"POST",field:{username:e.username,password:e.password},headers:{"X-Robinhood-API-Version":"1.60.1","User-Agent":"okhttp/3.2.0"}}})),u=e.HTTP.flatMap(function(e){return e}).map(function(e){return e.body.token}).startWith("").map(function(e){return(0,_dom.h1)(".token",e)}).merge(n.DOM);return{DOM:u,HTTP:o,state$:r.startWith({counter:0})}}Object.defineProperty(exports,"__esModule",{value:!0});var _rx=require("rx"),_navbarIndex=require("./dialogue/components/navbar/navbar-index"),_navbarIndex2=_interopRequireDefault(_navbarIndex),_contentRouterIndex=require("./dialogue/components/content-router/content-router-index"),_contentRouterIndex2=_interopRequireDefault(_contentRouterIndex),_dom=require("@cycle/dom"),view=function(e,n){return(0,_dom.div)("#layout",[(0,_dom.div)((0,_dom.div)(".header",[e])),(0,_dom.div)([n])])};exports["default"]=main;

},{"./dialogue/components/content-router/content-router-index":107,"./dialogue/components/navbar/navbar-index":108,"@cycle/dom":2,"rx":64}],121:[function(require,module,exports){
"use strict";!function(e){var o=e.querySelector("#app");o.baseUrl="/",""===window.location.port,o.displayInstalledToast=function(){Polymer.dom(e).querySelector("platinum-sw-cache").disabled||Polymer.dom(e).querySelector("#caching-complete").show()},o.addEventListener("dom-change",function(){}),window.addEventListener("WebComponentsReady",function(){}),window.addEventListener("paper-header-transform",function(o){var a=Polymer.dom(e).querySelector("#mainToolbar .app-name"),r=Polymer.dom(e).querySelector("#mainToolbar .middle-container"),n=Polymer.dom(e).querySelector("#mainToolbar .bottom-container"),t=o.detail,l=t.height-t.condensedHeight,c=Math.min(1,t.y/l),i=.5,m=l-t.y,s=l/(1-i),d=Math.max(i,m/s+i),y=1-c;Polymer.Base.transform("translate3d(0,"+100*c+"%,0)",r),Polymer.Base.transform("scale("+y+") translateZ(0)",n),Polymer.Base.transform("scale("+d+") translateZ(0)",a)}),o.scrollPageToTop=function(){o.$.headerPanelMain.scrollToTop(!0)},o.closeDrawer=function(){o.$.paperDrawerPanel.closeDrawer()}}(document);

},{}],122:[function(require,module,exports){
"use strict";function makeStateDriver(){var e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];return function(t){var o=t.scan(function(e,t){if(!t||"object"!==("undefined"==typeof t?"undefined":_typeof(t)))throw new TypeError("state must be an object");return Object.assign(e,t)},e).replay(null,1);return o.connect(),o}}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};Object.defineProperty(exports,"__esModule",{value:!0}),exports.makeStateDriver=makeStateDriver;

},{}]},{},[106])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
